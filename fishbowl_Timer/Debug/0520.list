
0520.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800b388  0800b388  0001b388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7e0  0800b7e0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7e0  0800b7e0  0001b7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7e8  0800b7e8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7e8  0800b7e8  0001b7e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7ec  0800b7ec  0001b7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b7f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000918  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000af4  20000af4  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ae41  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003124  00000000  00000000  0003b04d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  0003e178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001588  00000000  00000000  0003f820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000280f3  00000000  00000000  00040da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aa4d  00000000  00000000  00068e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3ec4  00000000  00000000  000838e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001777ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000776c  00000000  00000000  001777fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b36c 	.word	0x0800b36c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	0800b36c 	.word	0x0800b36c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup 4E or 3F 27

void lcd_send_cmd (char cmd)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f023 030f 	bic.w	r3, r3, #15
 8000f9c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	011b      	lsls	r3, r3, #4
 8000fa2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	f043 030c 	orr.w	r3, r3, #12
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
 8000fba:	f043 030c 	orr.w	r3, r3, #12
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	f043 0308 	orr.w	r3, r3, #8
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000fcc:	f107 0208 	add.w	r2, r7, #8
 8000fd0:	2364      	movs	r3, #100	; 0x64
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	214e      	movs	r1, #78	; 0x4e
 8000fd8:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <lcd_send_cmd+0x5c>)
 8000fda:	f003 f807 	bl	8003fec <HAL_I2C_Master_Transmit>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200004b0 	.word	0x200004b0

08000fec <lcd_send_data>:

void lcd_send_data (char data)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f023 030f 	bic.w	r3, r3, #15
 8000ffc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	011b      	lsls	r3, r3, #4
 8001002:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	f043 030d 	orr.w	r3, r3, #13
 800100a:	b2db      	uxtb	r3, r3
 800100c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	f043 0309 	orr.w	r3, r3, #9
 8001014:	b2db      	uxtb	r3, r3
 8001016:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	f043 030d 	orr.w	r3, r3, #13
 800101e:	b2db      	uxtb	r3, r3
 8001020:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001022:	7bbb      	ldrb	r3, [r7, #14]
 8001024:	f043 0309 	orr.w	r3, r3, #9
 8001028:	b2db      	uxtb	r3, r3
 800102a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800102c:	f107 0208 	add.w	r2, r7, #8
 8001030:	2364      	movs	r3, #100	; 0x64
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2304      	movs	r3, #4
 8001036:	214e      	movs	r1, #78	; 0x4e
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <lcd_send_data+0x5c>)
 800103a:	f002 ffd7 	bl	8003fec <HAL_I2C_Master_Transmit>
}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200004b0 	.word	0x200004b0

0800104c <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
    switch (row)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <lcd_put_cur+0x18>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d005      	beq.n	800106e <lcd_put_cur+0x22>
 8001062:	e009      	b.n	8001078 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800106a:	603b      	str	r3, [r7, #0]
            break;
 800106c:	e004      	b.n	8001078 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001074:	603b      	str	r3, [r7, #0]
            break;
 8001076:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff85 	bl	8000f8c <lcd_send_cmd>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <lcd_init>:


void lcd_init (void)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800108e:	2032      	movs	r0, #50	; 0x32
 8001090:	f001 f9d2 	bl	8002438 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001094:	2030      	movs	r0, #48	; 0x30
 8001096:	f7ff ff79 	bl	8000f8c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800109a:	2005      	movs	r0, #5
 800109c:	f001 f9cc 	bl	8002438 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010a0:	2030      	movs	r0, #48	; 0x30
 80010a2:	f7ff ff73 	bl	8000f8c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80010a6:	2001      	movs	r0, #1
 80010a8:	f001 f9c6 	bl	8002438 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010ac:	2030      	movs	r0, #48	; 0x30
 80010ae:	f7ff ff6d 	bl	8000f8c <lcd_send_cmd>
	HAL_Delay(10);
 80010b2:	200a      	movs	r0, #10
 80010b4:	f001 f9c0 	bl	8002438 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80010b8:	2020      	movs	r0, #32
 80010ba:	f7ff ff67 	bl	8000f8c <lcd_send_cmd>
	HAL_Delay(10);
 80010be:	200a      	movs	r0, #10
 80010c0:	f001 f9ba 	bl	8002438 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80010c4:	2028      	movs	r0, #40	; 0x28
 80010c6:	f7ff ff61 	bl	8000f8c <lcd_send_cmd>
	HAL_Delay(1);
 80010ca:	2001      	movs	r0, #1
 80010cc:	f001 f9b4 	bl	8002438 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80010d0:	2008      	movs	r0, #8
 80010d2:	f7ff ff5b 	bl	8000f8c <lcd_send_cmd>
	HAL_Delay(1);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f001 f9ae 	bl	8002438 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80010dc:	2001      	movs	r0, #1
 80010de:	f7ff ff55 	bl	8000f8c <lcd_send_cmd>
	HAL_Delay(1);
 80010e2:	2001      	movs	r0, #1
 80010e4:	f001 f9a8 	bl	8002438 <HAL_Delay>
	HAL_Delay(1);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f001 f9a5 	bl	8002438 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80010ee:	2006      	movs	r0, #6
 80010f0:	f7ff ff4c 	bl	8000f8c <lcd_send_cmd>
	HAL_Delay(1);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f001 f99f 	bl	8002438 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80010fa:	200c      	movs	r0, #12
 80010fc:	f7ff ff46 	bl	8000f8c <lcd_send_cmd>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800110c:	e006      	b.n	800111c <lcd_send_string+0x18>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	1c5a      	adds	r2, r3, #1
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff68 	bl	8000fec <lcd_send_data>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f4      	bne.n	800110e <lcd_send_string+0xa>
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8001138:	1d39      	adds	r1, r7, #4
 800113a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800113e:	2201      	movs	r2, #1
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <__io_putchar+0x20>)
 8001142:	f004 ff5e 	bl	8006002 <HAL_UART_Transmit>

	return ch;
 8001146:	687b      	ldr	r3, [r7, #4]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000054c 	.word	0x2000054c

08001154 <map>:

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	69b9      	ldr	r1, [r7, #24]
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	1a8a      	subs	r2, r1, r2
 800116e:	fb03 f202 	mul.w	r2, r3, r2
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	1acb      	subs	r3, r1, r3
 8001178:	fb92 f2f3 	sdiv	r2, r2, r3
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	4413      	add	r3, r2
}
 8001180:	4618      	mov	r0, r3
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LCD>:

void LCD() {
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
	//lcd ?��?��
	char co2_text[20], gas_text[20];
	lcd_put_cur(0, 0);
 8001192:	2100      	movs	r1, #0
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff ff59 	bl	800104c <lcd_put_cur>
	sprintf(co2_text, "CO2 : %.2fppm ", ppm);
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <LCD+0x58>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9f2 	bl	8000588 <__aeabi_f2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	f107 0014 	add.w	r0, r7, #20
 80011ac:	490e      	ldr	r1, [pc, #56]	; (80011e8 <LCD+0x5c>)
 80011ae:	f006 ff47 	bl	8008040 <siprintf>
	lcd_send_string(co2_text);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ffa4 	bl	8001104 <lcd_send_string>
	lcd_put_cur(1, 0);
 80011bc:	2100      	movs	r1, #0
 80011be:	2001      	movs	r0, #1
 80011c0:	f7ff ff44 	bl	800104c <lcd_put_cur>
	sprintf(gas_text, "Gas : %dppm", gas);
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <LCD+0x60>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	463b      	mov	r3, r7
 80011ca:	4909      	ldr	r1, [pc, #36]	; (80011f0 <LCD+0x64>)
 80011cc:	4618      	mov	r0, r3
 80011ce:	f006 ff37 	bl	8008040 <siprintf>
	lcd_send_string(gas_text);
 80011d2:	463b      	mov	r3, r7
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff95 	bl	8001104 <lcd_send_string>
}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	; 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000ab4 	.word	0x20000ab4
 80011e8:	0800b388 	.word	0x0800b388
 80011ec:	20000ab8 	.word	0x20000ab8
 80011f0:	0800b398 	.word	0x0800b398
 80011f4:	00000000 	.word	0x00000000

080011f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011fe:	f001 f8a9 	bl	8002354 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001202:	f000 f985 	bl	8001510 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001206:	f000 fbf1 	bl	80019ec <MX_GPIO_Init>
	MX_ETH_Init();
 800120a:	f000 fa91 	bl	8001730 <MX_ETH_Init>
	MX_USART3_UART_Init();
 800120e:	f000 fb95 	bl	800193c <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8001212:	f000 fbbd 	bl	8001990 <MX_USB_OTG_FS_PCD_Init>
	MX_ADC1_Init();
 8001216:	f000 f9e7 	bl	80015e8 <MX_ADC1_Init>
	MX_TIM2_Init();
 800121a:	f000 fb17 	bl	800184c <MX_TIM2_Init>
	MX_ADC2_Init();
 800121e:	f000 fa35 	bl	800168c <MX_ADC2_Init>
	MX_I2C1_Init();
 8001222:	f000 fad3 	bl	80017cc <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001226:	2100      	movs	r1, #0
 8001228:	48a5      	ldr	r0, [pc, #660]	; (80014c0 <main+0x2c8>)
 800122a:	f004 f8bf 	bl	80053ac <HAL_TIM_PWM_Start>
	HAL_ADC_Start_IT(&hadc1);
 800122e:	48a5      	ldr	r0, [pc, #660]	; (80014c4 <main+0x2cc>)
 8001230:	f001 fac8 	bl	80027c4 <HAL_ADC_Start_IT>
	HAL_ADC_Start_IT(&hadc2);
 8001234:	48a4      	ldr	r0, [pc, #656]	; (80014c8 <main+0x2d0>)
 8001236:	f001 fac5 	bl	80027c4 <HAL_ADC_Start_IT>

	lcd_init();
 800123a:	f7ff ff26 	bl	800108a <lcd_init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		uint8_t RxTemp;
		int count = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]

		LCD();
 8001242:	f7ff ffa3 	bl	800118c <LCD>
		//ADC
		HAL_ADC_Start(&hadc1);
 8001246:	489f      	ldr	r0, [pc, #636]	; (80014c4 <main+0x2cc>)
 8001248:	f001 f95e 	bl	8002508 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 800124c:	210a      	movs	r1, #10
 800124e:	489d      	ldr	r0, [pc, #628]	; (80014c4 <main+0x2cc>)
 8001250:	f001 fa2c 	bl	80026ac <HAL_ADC_PollForConversion>
		adc_value1 = (uint16_t) HAL_ADC_GetValue(&hadc1);
 8001254:	489b      	ldr	r0, [pc, #620]	; (80014c4 <main+0x2cc>)
 8001256:	f001 fca3 	bl	8002ba0 <HAL_ADC_GetValue>
 800125a:	4603      	mov	r3, r0
 800125c:	b29a      	uxth	r2, r3
 800125e:	4b9b      	ldr	r3, [pc, #620]	; (80014cc <main+0x2d4>)
 8001260:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start(&hadc2);
 8001262:	4899      	ldr	r0, [pc, #612]	; (80014c8 <main+0x2d0>)
 8001264:	f001 f950 	bl	8002508 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 10);
 8001268:	210a      	movs	r1, #10
 800126a:	4897      	ldr	r0, [pc, #604]	; (80014c8 <main+0x2d0>)
 800126c:	f001 fa1e 	bl	80026ac <HAL_ADC_PollForConversion>
		adc_value2 = (uint16_t) HAL_ADC_GetValue(&hadc2);
 8001270:	4895      	ldr	r0, [pc, #596]	; (80014c8 <main+0x2d0>)
 8001272:	f001 fc95 	bl	8002ba0 <HAL_ADC_GetValue>
 8001276:	4603      	mov	r3, r0
 8001278:	b29a      	uxth	r2, r3
 800127a:	4b95      	ldr	r3, [pc, #596]	; (80014d0 <main+0x2d8>)
 800127c:	801a      	strh	r2, [r3, #0]

		getResistance = ((4096.0 / (float) adc_value1) - 1.0) * RLOAD;
 800127e:	4b93      	ldr	r3, [pc, #588]	; (80014cc <main+0x2d4>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800128a:	ee17 0a90 	vmov	r0, s15
 800128e:	f7ff f97b 	bl	8000588 <__aeabi_f2d>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	f04f 0000 	mov.w	r0, #0
 800129a:	498e      	ldr	r1, [pc, #568]	; (80014d4 <main+0x2dc>)
 800129c:	f7ff faf6 	bl	800088c <__aeabi_ddiv>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	4b8a      	ldr	r3, [pc, #552]	; (80014d8 <main+0x2e0>)
 80012ae:	f7ff f80b 	bl	80002c8 <__aeabi_dsub>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	a379      	add	r3, pc, #484	; (adr r3, 80014a0 <main+0x2a8>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff f9ba 	bl	8000638 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fc8c 	bl	8000be8 <__aeabi_d2f>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4a82      	ldr	r2, [pc, #520]	; (80014dc <main+0x2e4>)
 80012d4:	6013      	str	r3, [r2, #0]
		ppm = PARA * pow((getResistance / RZERO), -PARB);
 80012d6:	4b81      	ldr	r3, [pc, #516]	; (80014dc <main+0x2e4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f954 	bl	8000588 <__aeabi_f2d>
 80012e0:	a371      	add	r3, pc, #452	; (adr r3, 80014a8 <main+0x2b0>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7ff fad1 	bl	800088c <__aeabi_ddiv>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	ec43 2b17 	vmov	d7, r2, r3
 80012f2:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 80014b0 <main+0x2b8>
 80012f6:	eeb0 0a47 	vmov.f32	s0, s14
 80012fa:	eef0 0a67 	vmov.f32	s1, s15
 80012fe:	f009 f919 	bl	800a534 <pow>
 8001302:	ec51 0b10 	vmov	r0, r1, d0
 8001306:	a36c      	add	r3, pc, #432	; (adr r3, 80014b8 <main+0x2c0>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f994 	bl	8000638 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fc66 	bl	8000be8 <__aeabi_d2f>
 800131c:	4603      	mov	r3, r0
 800131e:	4a70      	ldr	r2, [pc, #448]	; (80014e0 <main+0x2e8>)
 8001320:	6013      	str	r3, [r2, #0]

		gas = map(adc_value2, 0, 4096, 0, 1000);
 8001322:	4b6b      	ldr	r3, [pc, #428]	; (80014d0 <main+0x2d8>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2300      	movs	r3, #0
 8001330:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001334:	2100      	movs	r1, #0
 8001336:	f7ff ff0d 	bl	8001154 <map>
 800133a:	4603      	mov	r3, r0
 800133c:	4a69      	ldr	r2, [pc, #420]	; (80014e4 <main+0x2ec>)
 800133e:	6013      	str	r3, [r2, #0]


		if (ppm < 1400.0 && gas < 1000) {
 8001340:	4b67      	ldr	r3, [pc, #412]	; (80014e0 <main+0x2e8>)
 8001342:	edd3 7a00 	vldr	s15, [r3]
 8001346:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80014e8 <main+0x2f0>
 800134a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001352:	d54e      	bpl.n	80013f2 <main+0x1fa>
 8001354:	4b63      	ldr	r3, [pc, #396]	; (80014e4 <main+0x2ec>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800135c:	da49      	bge.n	80013f2 <main+0x1fa>
			if (ppm > 700) {
 800135e:	4b60      	ldr	r3, [pc, #384]	; (80014e0 <main+0x2e8>)
 8001360:	edd3 7a00 	vldr	s15, [r3]
 8001364:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80014ec <main+0x2f4>
 8001368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001370:	dd0c      	ble.n	800138c <main+0x194>
				flag = 1;
 8001372:	4b5f      	ldr	r3, [pc, #380]	; (80014f0 <main+0x2f8>)
 8001374:	2201      	movs	r2, #1
 8001376:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOG, led_Pin, 1);
 8001378:	2201      	movs	r2, #1
 800137a:	2101      	movs	r1, #1
 800137c:	485d      	ldr	r0, [pc, #372]	; (80014f4 <main+0x2fc>)
 800137e:	f002 fcd7 	bl	8003d30 <HAL_GPIO_WritePin>
				TIM2->CCR1 = 150;
 8001382:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001386:	2296      	movs	r2, #150	; 0x96
 8001388:	635a      	str	r2, [r3, #52]	; 0x34
 800138a:	e00b      	b.n	80013a4 <main+0x1ac>
				//HAL_Delay(500);
			} else {
				flag = 0;
 800138c:	4b58      	ldr	r3, [pc, #352]	; (80014f0 <main+0x2f8>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOG, led_Pin, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2101      	movs	r1, #1
 8001396:	4857      	ldr	r0, [pc, #348]	; (80014f4 <main+0x2fc>)
 8001398:	f002 fcca 	bl	8003d30 <HAL_GPIO_WritePin>
				TIM2->CCR1 = 50;
 800139c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013a0:	2232      	movs	r2, #50	; 0x32
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34
				// HAL_Delay(500);
			}
			if (gas > 300) {
 80013a4:	4b4f      	ldr	r3, [pc, #316]	; (80014e4 <main+0x2ec>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80013ac:	dd08      	ble.n	80013c0 <main+0x1c8>
				flag = 1;
 80013ae:	4b50      	ldr	r3, [pc, #320]	; (80014f0 <main+0x2f8>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOG, led2_Pin, 1);
 80013b4:	2201      	movs	r2, #1
 80013b6:	2102      	movs	r1, #2
 80013b8:	484e      	ldr	r0, [pc, #312]	; (80014f4 <main+0x2fc>)
 80013ba:	f002 fcb9 	bl	8003d30 <HAL_GPIO_WritePin>
 80013be:	e007      	b.n	80013d0 <main+0x1d8>
			} else {
				flag = 0;
 80013c0:	4b4b      	ldr	r3, [pc, #300]	; (80014f0 <main+0x2f8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOG, led2_Pin, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2102      	movs	r1, #2
 80013ca:	484a      	ldr	r0, [pc, #296]	; (80014f4 <main+0x2fc>)
 80013cc:	f002 fcb0 	bl	8003d30 <HAL_GPIO_WritePin>
			}
			sprintf(msg, "%.2lf:%dL", ppm, gas);
 80013d0:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <main+0x2e8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f8d7 	bl	8000588 <__aeabi_f2d>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4941      	ldr	r1, [pc, #260]	; (80014e4 <main+0x2ec>)
 80013e0:	6809      	ldr	r1, [r1, #0]
 80013e2:	9100      	str	r1, [sp, #0]
 80013e4:	4944      	ldr	r1, [pc, #272]	; (80014f8 <main+0x300>)
 80013e6:	4845      	ldr	r0, [pc, #276]	; (80014fc <main+0x304>)
 80013e8:	f006 fe2a 	bl	8008040 <siprintf>
			printf(msg);
 80013ec:	4843      	ldr	r0, [pc, #268]	; (80014fc <main+0x304>)
 80013ee:	f006 fe0f 	bl	8008010 <iprintf>
		}

		while (1) {
			if (HAL_UART_Receive(&huart3, &RxTemp, 1, 50) == HAL_OK) {
 80013f2:	1cf9      	adds	r1, r7, #3
 80013f4:	2332      	movs	r3, #50	; 0x32
 80013f6:	2201      	movs	r2, #1
 80013f8:	4841      	ldr	r0, [pc, #260]	; (8001500 <main+0x308>)
 80013fa:	f004 fe94 	bl	8006126 <HAL_UART_Receive>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f6      	bne.n	80013f2 <main+0x1fa>
				RxBuffer[count++] = RxTemp;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	60fa      	str	r2, [r7, #12]
 800140a:	78f9      	ldrb	r1, [r7, #3]
 800140c:	4a3d      	ldr	r2, [pc, #244]	; (8001504 <main+0x30c>)
 800140e:	54d1      	strb	r1, [r2, r3]
				HAL_Delay(1);
 8001410:	2001      	movs	r0, #1
 8001412:	f001 f811 	bl	8002438 <HAL_Delay>
				if (RxTemp == 'P')
 8001416:	78fb      	ldrb	r3, [r7, #3]
 8001418:	2b50      	cmp	r3, #80	; 0x50
 800141a:	d000      	beq.n	800141e <main+0x226>
			if (HAL_UART_Receive(&huart3, &RxTemp, 1, 50) == HAL_OK) {
 800141c:	e7e9      	b.n	80013f2 <main+0x1fa>
					break;
 800141e:	bf00      	nop
			}
		}

		RxBuffer[count - 1] = '\0';
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3b01      	subs	r3, #1
 8001424:	4a37      	ldr	r2, [pc, #220]	; (8001504 <main+0x30c>)
 8001426:	2100      	movs	r1, #0
 8001428:	54d1      	strb	r1, [r2, r3]
		count = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
		if (strcmp(RxBuffer, "ON") == 0) {
 800142e:	4936      	ldr	r1, [pc, #216]	; (8001508 <main+0x310>)
 8001430:	4834      	ldr	r0, [pc, #208]	; (8001504 <main+0x30c>)
 8001432:	f7fe fedd 	bl	80001f0 <strcmp>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d112      	bne.n	8001462 <main+0x26a>
			HAL_GPIO_WritePin(GPIOG, pan_Pin, 1);
 800143c:	2201      	movs	r2, #1
 800143e:	2104      	movs	r1, #4
 8001440:	482c      	ldr	r0, [pc, #176]	; (80014f4 <main+0x2fc>)
 8001442:	f002 fc75 	bl	8003d30 <HAL_GPIO_WritePin>
			for(int idx = 0; idx < RxBufferSize; idx++)
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	e007      	b.n	800145c <main+0x264>
				RxBuffer[idx] = 0;
 800144c:	4a2d      	ldr	r2, [pc, #180]	; (8001504 <main+0x30c>)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	4413      	add	r3, r2
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
			for(int idx = 0; idx < RxBufferSize; idx++)
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	3301      	adds	r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	2b13      	cmp	r3, #19
 8001460:	ddf4      	ble.n	800144c <main+0x254>
		}
		if (strcmp(RxBuffer, "OFF") == 0) {
 8001462:	492a      	ldr	r1, [pc, #168]	; (800150c <main+0x314>)
 8001464:	4827      	ldr	r0, [pc, #156]	; (8001504 <main+0x30c>)
 8001466:	f7fe fec3 	bl	80001f0 <strcmp>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d112      	bne.n	8001496 <main+0x29e>
			HAL_GPIO_WritePin(GPIOG, pan_Pin, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2104      	movs	r1, #4
 8001474:	481f      	ldr	r0, [pc, #124]	; (80014f4 <main+0x2fc>)
 8001476:	f002 fc5b 	bl	8003d30 <HAL_GPIO_WritePin>
			for(int idx = 0; idx < RxBufferSize; idx++)
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	e007      	b.n	8001490 <main+0x298>
				RxBuffer[idx] = 0;
 8001480:	4a20      	ldr	r2, [pc, #128]	; (8001504 <main+0x30c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
			for(int idx = 0; idx < RxBufferSize; idx++)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3301      	adds	r3, #1
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b13      	cmp	r3, #19
 8001494:	ddf4      	ble.n	8001480 <main+0x288>
		}

		HAL_Delay(1000);
 8001496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800149a:	f000 ffcd 	bl	8002438 <HAL_Delay>
	while (1) {
 800149e:	e6ce      	b.n	800123e <main+0x46>
 80014a0:	66666666 	.word	0x66666666
 80014a4:	3fee6666 	.word	0x3fee6666
 80014a8:	1eb851ec 	.word	0x1eb851ec
 80014ac:	400beb85 	.word	0x400beb85
 80014b0:	bf42646d 	.word	0xbf42646d
 80014b4:	c00626fb 	.word	0xc00626fb
 80014b8:	490f3d8b 	.word	0x490f3d8b
 80014bc:	405d2688 	.word	0x405d2688
 80014c0:	20000504 	.word	0x20000504
 80014c4:	20000370 	.word	0x20000370
 80014c8:	200003b8 	.word	0x200003b8
 80014cc:	20000ab0 	.word	0x20000ab0
 80014d0:	20000ab2 	.word	0x20000ab2
 80014d4:	40b00000 	.word	0x40b00000
 80014d8:	3ff00000 	.word	0x3ff00000
 80014dc:	20000ac0 	.word	0x20000ac0
 80014e0:	20000ab4 	.word	0x20000ab4
 80014e4:	20000ab8 	.word	0x20000ab8
 80014e8:	44af0000 	.word	0x44af0000
 80014ec:	442f0000 	.word	0x442f0000
 80014f0:	20000abc 	.word	0x20000abc
 80014f4:	40021800 	.word	0x40021800
 80014f8:	0800b3a4 	.word	0x0800b3a4
 80014fc:	20000ac4 	.word	0x20000ac4
 8001500:	2000054c 	.word	0x2000054c
 8001504:	20000a9c 	.word	0x20000a9c
 8001508:	0800b3b0 	.word	0x0800b3b0
 800150c:	0800b3b4 	.word	0x0800b3b4

08001510 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b094      	sub	sp, #80	; 0x50
 8001514:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001516:	f107 0320 	add.w	r3, r7, #32
 800151a:	2230      	movs	r2, #48	; 0x30
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f006 f904 	bl	800772c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <SystemClock_Config+0xd0>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	4a28      	ldr	r2, [pc, #160]	; (80015e0 <SystemClock_Config+0xd0>)
 800153e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001542:	6413      	str	r3, [r2, #64]	; 0x40
 8001544:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <SystemClock_Config+0xd0>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <SystemClock_Config+0xd4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800155c:	4a21      	ldr	r2, [pc, #132]	; (80015e4 <SystemClock_Config+0xd4>)
 800155e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <SystemClock_Config+0xd4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001570:	2301      	movs	r3, #1
 8001572:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001574:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157a:	2302      	movs	r3, #2
 800157c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800157e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001584:	2304      	movs	r3, #4
 8001586:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8001588:	2348      	movs	r3, #72	; 0x48
 800158a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800158c:	2302      	movs	r3, #2
 800158e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8001590:	2303      	movs	r3, #3
 8001592:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001594:	f107 0320 	add.w	r3, r7, #32
 8001598:	4618      	mov	r0, r3
 800159a:	f003 f9c7 	bl	800492c <HAL_RCC_OscConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0x98>
		Error_Handler();
 80015a4:	f000 fad0 	bl	8001b48 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80015a8:	230f      	movs	r3, #15
 80015aa:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ac:	2302      	movs	r3, #2
 80015ae:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015be:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2102      	movs	r1, #2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f003 fc28 	bl	8004e1c <HAL_RCC_ClockConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0xc6>
		Error_Handler();
 80015d2:	f000 fab9 	bl	8001b48 <Error_Handler>
	}
}
 80015d6:	bf00      	nop
 80015d8:	3750      	adds	r7, #80	; 0x50
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40007000 	.word	0x40007000

080015e8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80015ee:	463b      	mov	r3, r7
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <MX_ADC1_Init+0x98>)
 80015fc:	4a21      	ldr	r2, [pc, #132]	; (8001684 <MX_ADC1_Init+0x9c>)
 80015fe:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001600:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <MX_ADC1_Init+0x98>)
 8001602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001606:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <MX_ADC1_Init+0x98>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <MX_ADC1_Init+0x98>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <MX_ADC1_Init+0x98>)
 8001616:	2201      	movs	r2, #1
 8001618:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <MX_ADC1_Init+0x98>)
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <MX_ADC1_Init+0x98>)
 8001624:	2200      	movs	r2, #0
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <MX_ADC1_Init+0x98>)
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <MX_ADC1_Init+0xa0>)
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <MX_ADC1_Init+0x98>)
 8001630:	2200      	movs	r2, #0
 8001632:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <MX_ADC1_Init+0x98>)
 8001636:	2201      	movs	r2, #1
 8001638:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_ADC1_Init+0x98>)
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <MX_ADC1_Init+0x98>)
 8001644:	2201      	movs	r2, #1
 8001646:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001648:	480d      	ldr	r0, [pc, #52]	; (8001680 <MX_ADC1_Init+0x98>)
 800164a:	f000 ff19 	bl	8002480 <HAL_ADC_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_ADC1_Init+0x70>
		Error_Handler();
 8001654:	f000 fa78 	bl	8001b48 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001658:	2303      	movs	r3, #3
 800165a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800165c:	2301      	movs	r3, #1
 800165e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001664:	463b      	mov	r3, r7
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_ADC1_Init+0x98>)
 800166a:	f001 fac5 	bl	8002bf8 <HAL_ADC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC1_Init+0x90>
		Error_Handler();
 8001674:	f000 fa68 	bl	8001b48 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000370 	.word	0x20000370
 8001684:	40012000 	.word	0x40012000
 8001688:	0f000001 	.word	0x0f000001

0800168c <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001692:	463b      	mov	r3, r7
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC2_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <MX_ADC2_Init+0x98>)
 80016a0:	4a21      	ldr	r2, [pc, #132]	; (8001728 <MX_ADC2_Init+0x9c>)
 80016a2:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <MX_ADC2_Init+0x98>)
 80016a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016aa:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016ac:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <MX_ADC2_Init+0x98>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <MX_ADC2_Init+0x98>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <MX_ADC2_Init+0x98>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <MX_ADC2_Init+0x98>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <MX_ADC2_Init+0x98>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016cc:	4b15      	ldr	r3, [pc, #84]	; (8001724 <MX_ADC2_Init+0x98>)
 80016ce:	4a17      	ldr	r2, [pc, #92]	; (800172c <MX_ADC2_Init+0xa0>)
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016d2:	4b14      	ldr	r3, [pc, #80]	; (8001724 <MX_ADC2_Init+0x98>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <MX_ADC2_Init+0x98>)
 80016da:	2201      	movs	r2, #1
 80016dc:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_ADC2_Init+0x98>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <MX_ADC2_Init+0x98>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80016ec:	480d      	ldr	r0, [pc, #52]	; (8001724 <MX_ADC2_Init+0x98>)
 80016ee:	f000 fec7 	bl	8002480 <HAL_ADC_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_ADC2_Init+0x70>
		Error_Handler();
 80016f8:	f000 fa26 	bl	8001b48 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80016fc:	2304      	movs	r3, #4
 80016fe:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001700:	2301      	movs	r3, #1
 8001702:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001708:	463b      	mov	r3, r7
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_ADC2_Init+0x98>)
 800170e:	f001 fa73 	bl	8002bf8 <HAL_ADC_ConfigChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_ADC2_Init+0x90>
		Error_Handler();
 8001718:	f000 fa16 	bl	8001b48 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200003b8 	.word	0x200003b8
 8001728:	40012100 	.word	0x40012100
 800172c:	0f000001 	.word	0x0f000001

08001730 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8001734:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <MX_ETH_Init+0x84>)
 8001736:	4a20      	ldr	r2, [pc, #128]	; (80017b8 <MX_ETH_Init+0x88>)
 8001738:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <MX_ETH_Init+0x8c>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <MX_ETH_Init+0x8c>)
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <MX_ETH_Init+0x8c>)
 8001748:	22e1      	movs	r2, #225	; 0xe1
 800174a:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <MX_ETH_Init+0x8c>)
 800174e:	2200      	movs	r2, #0
 8001750:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8001752:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_ETH_Init+0x8c>)
 8001754:	2200      	movs	r2, #0
 8001756:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <MX_ETH_Init+0x8c>)
 800175a:	2200      	movs	r2, #0
 800175c:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <MX_ETH_Init+0x84>)
 8001760:	4a16      	ldr	r2, [pc, #88]	; (80017bc <MX_ETH_Init+0x8c>)
 8001762:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <MX_ETH_Init+0x84>)
 8001766:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800176a:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_ETH_Init+0x84>)
 800176e:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <MX_ETH_Init+0x90>)
 8001770:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <MX_ETH_Init+0x84>)
 8001774:	4a13      	ldr	r2, [pc, #76]	; (80017c4 <MX_ETH_Init+0x94>)
 8001776:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_ETH_Init+0x84>)
 800177a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800177e:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8001780:	480c      	ldr	r0, [pc, #48]	; (80017b4 <MX_ETH_Init+0x84>)
 8001782:	f001 fe15 	bl	80033b0 <HAL_ETH_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_ETH_Init+0x60>
		Error_Handler();
 800178c:	f000 f9dc 	bl	8001b48 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8001790:	2238      	movs	r2, #56	; 0x38
 8001792:	2100      	movs	r1, #0
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <MX_ETH_Init+0x98>)
 8001796:	f005 ffc9 	bl	800772c <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <MX_ETH_Init+0x98>)
 800179c:	2221      	movs	r2, #33	; 0x21
 800179e:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_ETH_Init+0x98>)
 80017a2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80017a6:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <MX_ETH_Init+0x98>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000400 	.word	0x20000400
 80017b8:	40028000 	.word	0x40028000
 80017bc:	20000ad4 	.word	0x20000ad4
 80017c0:	200002d0 	.word	0x200002d0
 80017c4:	20000230 	.word	0x20000230
 80017c8:	200001f8 	.word	0x200001f8

080017cc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <MX_I2C1_Init+0x74>)
 80017d2:	4a1c      	ldr	r2, [pc, #112]	; (8001844 <MX_I2C1_Init+0x78>)
 80017d4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <MX_I2C1_Init+0x74>)
 80017d8:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <MX_I2C1_Init+0x7c>)
 80017da:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017dc:	4b18      	ldr	r3, [pc, #96]	; (8001840 <MX_I2C1_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <MX_I2C1_Init+0x74>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <MX_I2C1_Init+0x74>)
 80017ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ee:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <MX_I2C1_Init+0x74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <MX_I2C1_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <MX_I2C1_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <MX_I2C1_Init+0x74>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001808:	480d      	ldr	r0, [pc, #52]	; (8001840 <MX_I2C1_Init+0x74>)
 800180a:	f002 faab 	bl	8003d64 <HAL_I2C_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001814:	f000 f998 	bl	8001b48 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001818:	2100      	movs	r1, #0
 800181a:	4809      	ldr	r0, [pc, #36]	; (8001840 <MX_I2C1_Init+0x74>)
 800181c:	f002 feed 	bl	80045fa <HAL_I2CEx_ConfigAnalogFilter>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8001826:	f000 f98f 	bl	8001b48 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800182a:	2100      	movs	r1, #0
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <MX_I2C1_Init+0x74>)
 800182e:	f002 ff20 	bl	8004672 <HAL_I2CEx_ConfigDigitalFilter>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_I2C1_Init+0x70>
		Error_Handler();
 8001838:	f000 f986 	bl	8001b48 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200004b0 	.word	0x200004b0
 8001844:	40005400 	.word	0x40005400
 8001848:	000186a0 	.word	0x000186a0

0800184c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b08e      	sub	sp, #56	; 0x38
 8001850:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001860:	f107 0320 	add.w	r3, r7, #32
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
 8001878:	615a      	str	r2, [r3, #20]
 800187a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800187c:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <MX_TIM2_Init+0xec>)
 800187e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001882:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 640 - 1;
 8001884:	4b2c      	ldr	r3, [pc, #176]	; (8001938 <MX_TIM2_Init+0xec>)
 8001886:	f240 227f 	movw	r2, #639	; 0x27f
 800188a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188c:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <MX_TIM2_Init+0xec>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 2000 - 1;
 8001892:	4b29      	ldr	r3, [pc, #164]	; (8001938 <MX_TIM2_Init+0xec>)
 8001894:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001898:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189a:	4b27      	ldr	r3, [pc, #156]	; (8001938 <MX_TIM2_Init+0xec>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a0:	4b25      	ldr	r3, [pc, #148]	; (8001938 <MX_TIM2_Init+0xec>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80018a6:	4824      	ldr	r0, [pc, #144]	; (8001938 <MX_TIM2_Init+0xec>)
 80018a8:	f003 fcd8 	bl	800525c <HAL_TIM_Base_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM2_Init+0x6a>
		Error_Handler();
 80018b2:	f000 f949 	bl	8001b48 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80018bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018c0:	4619      	mov	r1, r3
 80018c2:	481d      	ldr	r0, [pc, #116]	; (8001938 <MX_TIM2_Init+0xec>)
 80018c4:	f003 fefc 	bl	80056c0 <HAL_TIM_ConfigClockSource>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM2_Init+0x86>
		Error_Handler();
 80018ce:	f000 f93b 	bl	8001b48 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80018d2:	4819      	ldr	r0, [pc, #100]	; (8001938 <MX_TIM2_Init+0xec>)
 80018d4:	f003 fd11 	bl	80052fa <HAL_TIM_PWM_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM2_Init+0x96>
		Error_Handler();
 80018de:	f000 f933 	bl	8001b48 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80018ea:	f107 0320 	add.w	r3, r7, #32
 80018ee:	4619      	mov	r1, r3
 80018f0:	4811      	ldr	r0, [pc, #68]	; (8001938 <MX_TIM2_Init+0xec>)
 80018f2:	f004 fabd 	bl	8005e70 <HAL_TIMEx_MasterConfigSynchronization>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80018fc:	f000 f924 	bl	8001b48 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001900:	2360      	movs	r3, #96	; 0x60
 8001902:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 300 - 1;
 8001904:	f240 132b 	movw	r3, #299	; 0x12b
 8001908:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	2200      	movs	r2, #0
 8001916:	4619      	mov	r1, r3
 8001918:	4807      	ldr	r0, [pc, #28]	; (8001938 <MX_TIM2_Init+0xec>)
 800191a:	f003 fe0f 	bl	800553c <HAL_TIM_PWM_ConfigChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM2_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 8001924:	f000 f910 	bl	8001b48 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001928:	4803      	ldr	r0, [pc, #12]	; (8001938 <MX_TIM2_Init+0xec>)
 800192a:	f000 faed 	bl	8001f08 <HAL_TIM_MspPostInit>

}
 800192e:	bf00      	nop
 8001930:	3738      	adds	r7, #56	; 0x38
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000504 	.word	0x20000504

0800193c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_USART3_UART_Init+0x4c>)
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <MX_USART3_UART_Init+0x50>)
 8001944:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <MX_USART3_UART_Init+0x4c>)
 8001948:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800194c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_USART3_UART_Init+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MX_USART3_UART_Init+0x4c>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <MX_USART3_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_USART3_UART_Init+0x4c>)
 8001962:	220c      	movs	r2, #12
 8001964:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MX_USART3_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_USART3_UART_Init+0x4c>)
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_USART3_UART_Init+0x4c>)
 8001974:	f004 faf8 	bl	8005f68 <HAL_UART_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800197e:	f000 f8e3 	bl	8001b48 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	2000054c 	.word	0x2000054c
 800198c:	40004800 	.word	0x40004800

08001990 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001996:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800199a:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800199e:	2204      	movs	r2, #4
 80019a0:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019a4:	2202      	movs	r2, #2
 80019a6:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b0:	2202      	movs	r2, #2
 80019b2:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019bc:	2200      	movs	r2, #0
 80019be:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019d4:	f002 fe8c 	bl	80046f0 <HAL_PCD_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 80019de:	f000 f8b3 	bl	8001b48 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000590 	.word	0x20000590

080019ec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08c      	sub	sp, #48	; 0x30
 80019f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <MX_GPIO_Init+0x14c>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a4b      	ldr	r2, [pc, #300]	; (8001b38 <MX_GPIO_Init+0x14c>)
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b49      	ldr	r3, [pc, #292]	; (8001b38 <MX_GPIO_Init+0x14c>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	4b45      	ldr	r3, [pc, #276]	; (8001b38 <MX_GPIO_Init+0x14c>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a44      	ldr	r2, [pc, #272]	; (8001b38 <MX_GPIO_Init+0x14c>)
 8001a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b42      	ldr	r3, [pc, #264]	; (8001b38 <MX_GPIO_Init+0x14c>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b3e      	ldr	r3, [pc, #248]	; (8001b38 <MX_GPIO_Init+0x14c>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a3d      	ldr	r2, [pc, #244]	; (8001b38 <MX_GPIO_Init+0x14c>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b3b      	ldr	r3, [pc, #236]	; (8001b38 <MX_GPIO_Init+0x14c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <MX_GPIO_Init+0x14c>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a36      	ldr	r2, [pc, #216]	; (8001b38 <MX_GPIO_Init+0x14c>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b34      	ldr	r3, [pc, #208]	; (8001b38 <MX_GPIO_Init+0x14c>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <MX_GPIO_Init+0x14c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a2f      	ldr	r2, [pc, #188]	; (8001b38 <MX_GPIO_Init+0x14c>)
 8001a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <MX_GPIO_Init+0x14c>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <MX_GPIO_Init+0x14c>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a28      	ldr	r2, [pc, #160]	; (8001b38 <MX_GPIO_Init+0x14c>)
 8001a98:	f043 0308 	orr.w	r3, r3, #8
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <MX_GPIO_Init+0x14c>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f244 0181 	movw	r1, #16513	; 0x4081
 8001ab0:	4822      	ldr	r0, [pc, #136]	; (8001b3c <MX_GPIO_Init+0x150>)
 8001ab2:	f002 f93d 	bl	8003d30 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG,
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2147      	movs	r1, #71	; 0x47
 8001aba:	4821      	ldr	r0, [pc, #132]	; (8001b40 <MX_GPIO_Init+0x154>)
 8001abc:	f002 f938 	bl	8003d30 <HAL_GPIO_WritePin>
	led_Pin | led2_Pin | pan_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ac6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001aca:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	481b      	ldr	r0, [pc, #108]	; (8001b44 <MX_GPIO_Init+0x158>)
 8001ad8:	f001 ff7e 	bl	80039d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8001adc:	f244 0381 	movw	r3, #16513	; 0x4081
 8001ae0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	4619      	mov	r1, r3
 8001af4:	4811      	ldr	r0, [pc, #68]	; (8001b3c <MX_GPIO_Init+0x150>)
 8001af6:	f001 ff6f 	bl	80039d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : led_Pin led2_Pin pan_Pin USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = led_Pin | led2_Pin | pan_Pin | USB_PowerSwitchOn_Pin;
 8001afa:	2347      	movs	r3, #71	; 0x47
 8001afc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afe:	2301      	movs	r3, #1
 8001b00:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	4619      	mov	r1, r3
 8001b10:	480b      	ldr	r0, [pc, #44]	; (8001b40 <MX_GPIO_Init+0x154>)
 8001b12:	f001 ff61 	bl	80039d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_GPIO_Init+0x154>)
 8001b2a:	f001 ff55 	bl	80039d8 <HAL_GPIO_Init>

}
 8001b2e:	bf00      	nop
 8001b30:	3730      	adds	r7, #48	; 0x30
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	40021800 	.word	0x40021800
 8001b44:	40020800 	.word	0x40020800

08001b48 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b50:	e7fe      	b.n	8001b50 <Error_Handler+0x8>
	...

08001b54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	4a0f      	ldr	r2, [pc, #60]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b68:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b84:	6413      	str	r3, [r2, #64]	; 0x40
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08c      	sub	sp, #48	; 0x30
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a36      	ldr	r2, [pc, #216]	; (8001c9c <HAL_ADC_MspInit+0xf8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d130      	bne.n	8001c28 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	4b35      	ldr	r3, [pc, #212]	; (8001ca0 <HAL_ADC_MspInit+0xfc>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	4a34      	ldr	r2, [pc, #208]	; (8001ca0 <HAL_ADC_MspInit+0xfc>)
 8001bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd6:	4b32      	ldr	r3, [pc, #200]	; (8001ca0 <HAL_ADC_MspInit+0xfc>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	4b2e      	ldr	r3, [pc, #184]	; (8001ca0 <HAL_ADC_MspInit+0xfc>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a2d      	ldr	r2, [pc, #180]	; (8001ca0 <HAL_ADC_MspInit+0xfc>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <HAL_ADC_MspInit+0xfc>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bfe:	2308      	movs	r3, #8
 8001c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c02:	2303      	movs	r3, #3
 8001c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4824      	ldr	r0, [pc, #144]	; (8001ca4 <HAL_ADC_MspInit+0x100>)
 8001c12:	f001 fee1 	bl	80039d8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2012      	movs	r0, #18
 8001c1c:	f001 faff 	bl	800321e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c20:	2012      	movs	r0, #18
 8001c22:	f001 fb18 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c26:	e034      	b.n	8001c92 <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ca8 <HAL_ADC_MspInit+0x104>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d12f      	bne.n	8001c92 <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <HAL_ADC_MspInit+0xfc>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	4a19      	ldr	r2, [pc, #100]	; (8001ca0 <HAL_ADC_MspInit+0xfc>)
 8001c3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c40:	6453      	str	r3, [r2, #68]	; 0x44
 8001c42:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <HAL_ADC_MspInit+0xfc>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_ADC_MspInit+0xfc>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <HAL_ADC_MspInit+0xfc>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_ADC_MspInit+0xfc>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c6a:	2310      	movs	r3, #16
 8001c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <HAL_ADC_MspInit+0x100>)
 8001c7e:	f001 feab 	bl	80039d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	2012      	movs	r0, #18
 8001c88:	f001 fac9 	bl	800321e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c8c:	2012      	movs	r0, #18
 8001c8e:	f001 fae2 	bl	8003256 <HAL_NVIC_EnableIRQ>
}
 8001c92:	bf00      	nop
 8001c94:	3730      	adds	r7, #48	; 0x30
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40012000 	.word	0x40012000
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40012100 	.word	0x40012100

08001cac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08e      	sub	sp, #56	; 0x38
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a55      	ldr	r2, [pc, #340]	; (8001e20 <HAL_ETH_MspInit+0x174>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	f040 80a4 	bne.w	8001e18 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
 8001cd4:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	4a52      	ldr	r2, [pc, #328]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001cda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cde:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce0:	4b50      	ldr	r3, [pc, #320]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	623b      	str	r3, [r7, #32]
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
 8001cf0:	4b4c      	ldr	r3, [pc, #304]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	4a4b      	ldr	r2, [pc, #300]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001cf6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfc:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	4b45      	ldr	r3, [pc, #276]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	4a44      	ldr	r2, [pc, #272]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001d12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d16:	6313      	str	r3, [r2, #48]	; 0x30
 8001d18:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	4a3d      	ldr	r2, [pc, #244]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	6313      	str	r3, [r2, #48]	; 0x30
 8001d34:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	4b37      	ldr	r3, [pc, #220]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	4a36      	ldr	r2, [pc, #216]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d50:	4b34      	ldr	r3, [pc, #208]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	4a2f      	ldr	r2, [pc, #188]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001d66:	f043 0302 	orr.w	r3, r3, #2
 8001d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6c:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	4a28      	ldr	r2, [pc, #160]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d86:	6313      	str	r3, [r2, #48]	; 0x30
 8001d88:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <HAL_ETH_MspInit+0x178>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d94:	2332      	movs	r3, #50	; 0x32
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001da4:	230b      	movs	r3, #11
 8001da6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dac:	4619      	mov	r1, r3
 8001dae:	481e      	ldr	r0, [pc, #120]	; (8001e28 <HAL_ETH_MspInit+0x17c>)
 8001db0:	f001 fe12 	bl	80039d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001db4:	2386      	movs	r3, #134	; 0x86
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dc4:	230b      	movs	r3, #11
 8001dc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4817      	ldr	r0, [pc, #92]	; (8001e2c <HAL_ETH_MspInit+0x180>)
 8001dd0:	f001 fe02 	bl	80039d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de2:	2303      	movs	r3, #3
 8001de4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001de6:	230b      	movs	r3, #11
 8001de8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dee:	4619      	mov	r1, r3
 8001df0:	480f      	ldr	r0, [pc, #60]	; (8001e30 <HAL_ETH_MspInit+0x184>)
 8001df2:	f001 fdf1 	bl	80039d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001df6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e08:	230b      	movs	r3, #11
 8001e0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e10:	4619      	mov	r1, r3
 8001e12:	4808      	ldr	r0, [pc, #32]	; (8001e34 <HAL_ETH_MspInit+0x188>)
 8001e14:	f001 fde0 	bl	80039d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001e18:	bf00      	nop
 8001e1a:	3738      	adds	r7, #56	; 0x38
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40028000 	.word	0x40028000
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020800 	.word	0x40020800
 8001e2c:	40020000 	.word	0x40020000
 8001e30:	40020400 	.word	0x40020400
 8001e34:	40021800 	.word	0x40021800

08001e38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a19      	ldr	r2, [pc, #100]	; (8001ebc <HAL_I2C_MspInit+0x84>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d12c      	bne.n	8001eb4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <HAL_I2C_MspInit+0x88>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a17      	ldr	r2, [pc, #92]	; (8001ec0 <HAL_I2C_MspInit+0x88>)
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <HAL_I2C_MspInit+0x88>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001e76:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e7c:	2312      	movs	r3, #18
 8001e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e84:	2303      	movs	r3, #3
 8001e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e88:	2304      	movs	r3, #4
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4619      	mov	r1, r3
 8001e92:	480c      	ldr	r0, [pc, #48]	; (8001ec4 <HAL_I2C_MspInit+0x8c>)
 8001e94:	f001 fda0 	bl	80039d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <HAL_I2C_MspInit+0x88>)
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <HAL_I2C_MspInit+0x88>)
 8001ea2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_I2C_MspInit+0x88>)
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001eb4:	bf00      	nop
 8001eb6:	3728      	adds	r7, #40	; 0x28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40005400 	.word	0x40005400
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020400 	.word	0x40020400

08001ec8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed8:	d10d      	bne.n	8001ef6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_TIM_Base_MspInit+0x3c>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <HAL_TIM_Base_MspInit+0x3c>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_TIM_Base_MspInit+0x3c>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800

08001f08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 030c 	add.w	r3, r7, #12
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f28:	d11d      	bne.n	8001f66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <HAL_TIM_MspPostInit+0x68>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <HAL_TIM_MspPostInit+0x68>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <HAL_TIM_MspPostInit+0x68>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f46:	2301      	movs	r3, #1
 8001f48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f56:	2301      	movs	r3, #1
 8001f58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5a:	f107 030c 	add.w	r3, r7, #12
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4804      	ldr	r0, [pc, #16]	; (8001f74 <HAL_TIM_MspPostInit+0x6c>)
 8001f62:	f001 fd39 	bl	80039d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f66:	bf00      	nop
 8001f68:	3720      	adds	r7, #32
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020000 	.word	0x40020000

08001f78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a1d      	ldr	r2, [pc, #116]	; (800200c <HAL_UART_MspInit+0x94>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d134      	bne.n	8002004 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <HAL_UART_MspInit+0x98>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <HAL_UART_MspInit+0x98>)
 8001fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_UART_MspInit+0x98>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <HAL_UART_MspInit+0x98>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a14      	ldr	r2, [pc, #80]	; (8002010 <HAL_UART_MspInit+0x98>)
 8001fc0:	f043 0308 	orr.w	r3, r3, #8
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_UART_MspInit+0x98>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001fd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fe4:	2307      	movs	r3, #7
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	4619      	mov	r1, r3
 8001fee:	4809      	ldr	r0, [pc, #36]	; (8002014 <HAL_UART_MspInit+0x9c>)
 8001ff0:	f001 fcf2 	bl	80039d8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2027      	movs	r0, #39	; 0x27
 8001ffa:	f001 f910 	bl	800321e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ffe:	2027      	movs	r0, #39	; 0x27
 8002000:	f001 f929 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002004:	bf00      	nop
 8002006:	3728      	adds	r7, #40	; 0x28
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40004800 	.word	0x40004800
 8002010:	40023800 	.word	0x40023800
 8002014:	40020c00 	.word	0x40020c00

08002018 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002038:	d13f      	bne.n	80020ba <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <HAL_PCD_MspInit+0xac>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a20      	ldr	r2, [pc, #128]	; (80020c4 <HAL_PCD_MspInit+0xac>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <HAL_PCD_MspInit+0xac>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002056:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800205a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002064:	2303      	movs	r3, #3
 8002066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002068:	230a      	movs	r3, #10
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4619      	mov	r1, r3
 8002072:	4815      	ldr	r0, [pc, #84]	; (80020c8 <HAL_PCD_MspInit+0xb0>)
 8002074:	f001 fcb0 	bl	80039d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800207c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	4619      	mov	r1, r3
 800208c:	480e      	ldr	r0, [pc, #56]	; (80020c8 <HAL_PCD_MspInit+0xb0>)
 800208e:	f001 fca3 	bl	80039d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002092:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <HAL_PCD_MspInit+0xac>)
 8002094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002096:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <HAL_PCD_MspInit+0xac>)
 8002098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800209c:	6353      	str	r3, [r2, #52]	; 0x34
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_PCD_MspInit+0xac>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	4a07      	ldr	r2, [pc, #28]	; (80020c4 <HAL_PCD_MspInit+0xac>)
 80020a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ac:	6453      	str	r3, [r2, #68]	; 0x44
 80020ae:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_PCD_MspInit+0xac>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80020ba:	bf00      	nop
 80020bc:	3728      	adds	r7, #40	; 0x28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40020000 	.word	0x40020000

080020cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <NMI_Handler+0x4>

080020d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d6:	e7fe      	b.n	80020d6 <HardFault_Handler+0x4>

080020d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <MemManage_Handler+0x4>

080020de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e2:	e7fe      	b.n	80020e2 <BusFault_Handler+0x4>

080020e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <UsageFault_Handler+0x4>

080020ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002118:	f000 f96e 	bl	80023f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}

08002120 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002124:	4803      	ldr	r0, [pc, #12]	; (8002134 <ADC_IRQHandler+0x14>)
 8002126:	f000 fc2b 	bl	8002980 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800212a:	4803      	ldr	r0, [pc, #12]	; (8002138 <ADC_IRQHandler+0x18>)
 800212c:	f000 fc28 	bl	8002980 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000370 	.word	0x20000370
 8002138:	200003b8 	.word	0x200003b8

0800213c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <USART3_IRQHandler+0x10>)
 8002142:	f004 f893 	bl	800626c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	2000054c 	.word	0x2000054c

08002150 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
	return 1;
 8002154:	2301      	movs	r3, #1
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_kill>:

int _kill(int pid, int sig)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800216a:	f005 fab5 	bl	80076d8 <__errno>
 800216e:	4603      	mov	r3, r0
 8002170:	2216      	movs	r2, #22
 8002172:	601a      	str	r2, [r3, #0]
	return -1;
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <_exit>:

void _exit (int status)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002188:	f04f 31ff 	mov.w	r1, #4294967295
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ffe7 	bl	8002160 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002192:	e7fe      	b.n	8002192 <_exit+0x12>

08002194 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	e00a      	b.n	80021bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021a6:	f3af 8000 	nop.w
 80021aa:	4601      	mov	r1, r0
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	60ba      	str	r2, [r7, #8]
 80021b2:	b2ca      	uxtb	r2, r1
 80021b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	3301      	adds	r3, #1
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	dbf0      	blt.n	80021a6 <_read+0x12>
	}

return len;
 80021c4:	687b      	ldr	r3, [r7, #4]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	e009      	b.n	80021f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	60ba      	str	r2, [r7, #8]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe ffa1 	bl	8001130 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	3301      	adds	r3, #1
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	dbf1      	blt.n	80021e0 <_write+0x12>
	}
	return len;
 80021fc:	687b      	ldr	r3, [r7, #4]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <_close>:

int _close(int file)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
	return -1;
 800220e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800222e:	605a      	str	r2, [r3, #4]
	return 0;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <_isatty>:

int _isatty(int file)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
	return 1;
 8002246:	2301      	movs	r3, #1
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
	return 0;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002278:	4a14      	ldr	r2, [pc, #80]	; (80022cc <_sbrk+0x5c>)
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <_sbrk+0x60>)
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002284:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <_sbrk+0x64>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d102      	bne.n	8002292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <_sbrk+0x64>)
 800228e:	4a12      	ldr	r2, [pc, #72]	; (80022d8 <_sbrk+0x68>)
 8002290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <_sbrk+0x64>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4413      	add	r3, r2
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	429a      	cmp	r2, r3
 800229e:	d207      	bcs.n	80022b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a0:	f005 fa1a 	bl	80076d8 <__errno>
 80022a4:	4603      	mov	r3, r0
 80022a6:	220c      	movs	r2, #12
 80022a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
 80022ae:	e009      	b.n	80022c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <_sbrk+0x64>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022b6:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <_sbrk+0x64>)
 80022c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022c2:	68fb      	ldr	r3, [r7, #12]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20030000 	.word	0x20030000
 80022d0:	00000400 	.word	0x00000400
 80022d4:	20000adc 	.word	0x20000adc
 80022d8:	20000af8 	.word	0x20000af8

080022dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <SystemInit+0x20>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	4a05      	ldr	r2, [pc, #20]	; (80022fc <SystemInit+0x20>)
 80022e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002338 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002304:	480d      	ldr	r0, [pc, #52]	; (800233c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002306:	490e      	ldr	r1, [pc, #56]	; (8002340 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002308:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800230a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800230c:	e002      	b.n	8002314 <LoopCopyDataInit>

0800230e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800230e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002312:	3304      	adds	r3, #4

08002314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002318:	d3f9      	bcc.n	800230e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800231a:	4a0b      	ldr	r2, [pc, #44]	; (8002348 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800231c:	4c0b      	ldr	r4, [pc, #44]	; (800234c <LoopFillZerobss+0x26>)
  movs r3, #0
 800231e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002320:	e001      	b.n	8002326 <LoopFillZerobss>

08002322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002324:	3204      	adds	r2, #4

08002326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002328:	d3fb      	bcc.n	8002322 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800232a:	f7ff ffd7 	bl	80022dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800232e:	f005 f9d9 	bl	80076e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002332:	f7fe ff61 	bl	80011f8 <main>
  bx  lr    
 8002336:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002338:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800233c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002340:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002344:	0800b7f0 	.word	0x0800b7f0
  ldr r2, =_sbss
 8002348:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800234c:	20000af4 	.word	0x20000af4

08002350 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002350:	e7fe      	b.n	8002350 <CAN1_RX0_IRQHandler>
	...

08002354 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002358:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <HAL_Init+0x40>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0d      	ldr	r2, [pc, #52]	; (8002394 <HAL_Init+0x40>)
 800235e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002362:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_Init+0x40>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <HAL_Init+0x40>)
 800236a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800236e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <HAL_Init+0x40>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a07      	ldr	r2, [pc, #28]	; (8002394 <HAL_Init+0x40>)
 8002376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800237c:	2003      	movs	r0, #3
 800237e:	f000 ff43 	bl	8003208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002382:	2000      	movs	r0, #0
 8002384:	f000 f808 	bl	8002398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002388:	f7ff fbe4 	bl	8001b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40023c00 	.word	0x40023c00

08002398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a0:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_InitTick+0x54>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_InitTick+0x58>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4619      	mov	r1, r3
 80023aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 ff5b 	bl	8003272 <HAL_SYSTICK_Config>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e00e      	b.n	80023e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b0f      	cmp	r3, #15
 80023ca:	d80a      	bhi.n	80023e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023cc:	2200      	movs	r2, #0
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295
 80023d4:	f000 ff23 	bl	800321e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d8:	4a06      	ldr	r2, [pc, #24]	; (80023f4 <HAL_InitTick+0x5c>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	e000      	b.n	80023e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20000000 	.word	0x20000000
 80023f0:	20000008 	.word	0x20000008
 80023f4:	20000004 	.word	0x20000004

080023f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_IncTick+0x20>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_IncTick+0x24>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4413      	add	r3, r2
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <HAL_IncTick+0x24>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20000008 	.word	0x20000008
 800241c:	20000ae0 	.word	0x20000ae0

08002420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return uwTick;
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <HAL_GetTick+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000ae0 	.word	0x20000ae0

08002438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002440:	f7ff ffee 	bl	8002420 <HAL_GetTick>
 8002444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d005      	beq.n	800245e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_Delay+0x44>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800245e:	bf00      	nop
 8002460:	f7ff ffde 	bl	8002420 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	429a      	cmp	r2, r3
 800246e:	d8f7      	bhi.n	8002460 <HAL_Delay+0x28>
  {
  }
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000008 	.word	0x20000008

08002480 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e033      	b.n	80024fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff fb80 	bl	8001ba4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d118      	bne.n	80024f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024c6:	f023 0302 	bic.w	r3, r3, #2
 80024ca:	f043 0202 	orr.w	r2, r3, #2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fcc2 	bl	8002e5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f023 0303 	bic.w	r3, r3, #3
 80024e6:	f043 0201 	orr.w	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
 80024ee:	e001      	b.n	80024f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_ADC_Start+0x1a>
 800251e:	2302      	movs	r3, #2
 8002520:	e0b2      	b.n	8002688 <HAL_ADC_Start+0x180>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	d018      	beq.n	800256a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002548:	4b52      	ldr	r3, [pc, #328]	; (8002694 <HAL_ADC_Start+0x18c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a52      	ldr	r2, [pc, #328]	; (8002698 <HAL_ADC_Start+0x190>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	0c9a      	lsrs	r2, r3, #18
 8002554:	4613      	mov	r3, r2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	4413      	add	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800255c:	e002      	b.n	8002564 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	3b01      	subs	r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f9      	bne.n	800255e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b01      	cmp	r3, #1
 8002576:	d17a      	bne.n	800266e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002580:	f023 0301 	bic.w	r3, r3, #1
 8002584:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b6:	d106      	bne.n	80025c6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	f023 0206 	bic.w	r2, r3, #6
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	645a      	str	r2, [r3, #68]	; 0x44
 80025c4:	e002      	b.n	80025cc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025d4:	4b31      	ldr	r3, [pc, #196]	; (800269c <HAL_ADC_Start+0x194>)
 80025d6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80025e0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d12a      	bne.n	8002644 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a2b      	ldr	r2, [pc, #172]	; (80026a0 <HAL_ADC_Start+0x198>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d015      	beq.n	8002624 <HAL_ADC_Start+0x11c>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a29      	ldr	r2, [pc, #164]	; (80026a4 <HAL_ADC_Start+0x19c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d105      	bne.n	800260e <HAL_ADC_Start+0x106>
 8002602:	4b26      	ldr	r3, [pc, #152]	; (800269c <HAL_ADC_Start+0x194>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00a      	beq.n	8002624 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a25      	ldr	r2, [pc, #148]	; (80026a8 <HAL_ADC_Start+0x1a0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d136      	bne.n	8002686 <HAL_ADC_Start+0x17e>
 8002618:	4b20      	ldr	r3, [pc, #128]	; (800269c <HAL_ADC_Start+0x194>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	d130      	bne.n	8002686 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d129      	bne.n	8002686 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	e020      	b.n	8002686 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a15      	ldr	r2, [pc, #84]	; (80026a0 <HAL_ADC_Start+0x198>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d11b      	bne.n	8002686 <HAL_ADC_Start+0x17e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d114      	bne.n	8002686 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	e00b      	b.n	8002686 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f043 0210 	orr.w	r2, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	f043 0201 	orr.w	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	20000000 	.word	0x20000000
 8002698:	431bde83 	.word	0x431bde83
 800269c:	40012300 	.word	0x40012300
 80026a0:	40012000 	.word	0x40012000
 80026a4:	40012100 	.word	0x40012100
 80026a8:	40012200 	.word	0x40012200

080026ac <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c8:	d113      	bne.n	80026f2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80026d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d8:	d10b      	bne.n	80026f2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f043 0220 	orr.w	r2, r3, #32
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e063      	b.n	80027ba <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80026f2:	f7ff fe95 	bl	8002420 <HAL_GetTick>
 80026f6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026f8:	e021      	b.n	800273e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002700:	d01d      	beq.n	800273e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d007      	beq.n	8002718 <HAL_ADC_PollForConversion+0x6c>
 8002708:	f7ff fe8a 	bl	8002420 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d212      	bcs.n	800273e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b02      	cmp	r3, #2
 8002724:	d00b      	beq.n	800273e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f043 0204 	orr.w	r2, r3, #4
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e03d      	b.n	80027ba <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b02      	cmp	r3, #2
 800274a:	d1d6      	bne.n	80026fa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0212 	mvn.w	r2, #18
 8002754:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d123      	bne.n	80027b8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002774:	2b00      	cmp	r3, #0
 8002776:	d11f      	bne.n	80027b8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002782:	2b00      	cmp	r3, #0
 8002784:	d006      	beq.n	8002794 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002790:	2b00      	cmp	r3, #0
 8002792:	d111      	bne.n	80027b8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d105      	bne.n	80027b8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f043 0201 	orr.w	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_ADC_Start_IT+0x1a>
 80027da:	2302      	movs	r3, #2
 80027dc:	e0bd      	b.n	800295a <HAL_ADC_Start_IT+0x196>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d018      	beq.n	8002826 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002804:	4b58      	ldr	r3, [pc, #352]	; (8002968 <HAL_ADC_Start_IT+0x1a4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a58      	ldr	r2, [pc, #352]	; (800296c <HAL_ADC_Start_IT+0x1a8>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	0c9a      	lsrs	r2, r3, #18
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002818:	e002      	b.n	8002820 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	3b01      	subs	r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f9      	bne.n	800281a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	f040 8085 	bne.w	8002940 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002854:	2b00      	cmp	r3, #0
 8002856:	d007      	beq.n	8002868 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002860:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002874:	d106      	bne.n	8002884 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f023 0206 	bic.w	r2, r3, #6
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	645a      	str	r2, [r3, #68]	; 0x44
 8002882:	e002      	b.n	800288a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002892:	4b37      	ldr	r3, [pc, #220]	; (8002970 <HAL_ADC_Start_IT+0x1ac>)
 8002894:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800289e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028ae:	f043 0320 	orr.w	r3, r3, #32
 80028b2:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d12a      	bne.n	8002916 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2b      	ldr	r2, [pc, #172]	; (8002974 <HAL_ADC_Start_IT+0x1b0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d015      	beq.n	80028f6 <HAL_ADC_Start_IT+0x132>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a2a      	ldr	r2, [pc, #168]	; (8002978 <HAL_ADC_Start_IT+0x1b4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d105      	bne.n	80028e0 <HAL_ADC_Start_IT+0x11c>
 80028d4:	4b26      	ldr	r3, [pc, #152]	; (8002970 <HAL_ADC_Start_IT+0x1ac>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a25      	ldr	r2, [pc, #148]	; (800297c <HAL_ADC_Start_IT+0x1b8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d136      	bne.n	8002958 <HAL_ADC_Start_IT+0x194>
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_ADC_Start_IT+0x1ac>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d130      	bne.n	8002958 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d129      	bne.n	8002958 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	e020      	b.n	8002958 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a16      	ldr	r2, [pc, #88]	; (8002974 <HAL_ADC_Start_IT+0x1b0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d11b      	bne.n	8002958 <HAL_ADC_Start_IT+0x194>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d114      	bne.n	8002958 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	e00b      	b.n	8002958 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	f043 0210 	orr.w	r2, r3, #16
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002950:	f043 0201 	orr.w	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000000 	.word	0x20000000
 800296c:	431bde83 	.word	0x431bde83
 8002970:	40012300 	.word	0x40012300
 8002974:	40012000 	.word	0x40012000
 8002978:	40012100 	.word	0x40012100
 800297c:	40012200 	.word	0x40012200

08002980 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	2300      	movs	r3, #0
 800298e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d049      	beq.n	8002a4a <HAL_ADC_IRQHandler+0xca>
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d046      	beq.n	8002a4a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f003 0310 	and.w	r3, r3, #16
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d105      	bne.n	80029d4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d12b      	bne.n	8002a3a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d127      	bne.n	8002a3a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d006      	beq.n	8002a06 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d119      	bne.n	8002a3a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0220 	bic.w	r2, r2, #32
 8002a14:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d105      	bne.n	8002a3a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f043 0201 	orr.w	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f8bd 	bl	8002bba <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0212 	mvn.w	r2, #18
 8002a48:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d057      	beq.n	8002b10 <HAL_ADC_IRQHandler+0x190>
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d054      	beq.n	8002b10 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f003 0310 	and.w	r3, r3, #16
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d105      	bne.n	8002a7e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d139      	bne.n	8002b00 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d006      	beq.n	8002aa8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d12b      	bne.n	8002b00 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d124      	bne.n	8002b00 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d11d      	bne.n	8002b00 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d119      	bne.n	8002b00 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ada:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d105      	bne.n	8002b00 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	f043 0201 	orr.w	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 faa7 	bl	8003054 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f06f 020c 	mvn.w	r2, #12
 8002b0e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d017      	beq.n	8002b56 <HAL_ADC_IRQHandler+0x1d6>
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d014      	beq.n	8002b56 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d10d      	bne.n	8002b56 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f841 	bl	8002bce <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0201 	mvn.w	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b64:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d015      	beq.n	8002b98 <HAL_ADC_IRQHandler+0x218>
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d012      	beq.n	8002b98 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	f043 0202 	orr.w	r2, r3, #2
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f06f 0220 	mvn.w	r2, #32
 8002b86:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f82a 	bl	8002be2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f06f 0220 	mvn.w	r2, #32
 8002b96:	601a      	str	r2, [r3, #0]
  }
}
 8002b98:	bf00      	nop
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x1c>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e113      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x244>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b09      	cmp	r3, #9
 8002c22:	d925      	bls.n	8002c70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68d9      	ldr	r1, [r3, #12]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	4613      	mov	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	3b1e      	subs	r3, #30
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43da      	mvns	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	400a      	ands	r2, r1
 8002c48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68d9      	ldr	r1, [r3, #12]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4403      	add	r3, r0
 8002c62:	3b1e      	subs	r3, #30
 8002c64:	409a      	lsls	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	e022      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6919      	ldr	r1, [r3, #16]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4613      	mov	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	2207      	movs	r2, #7
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43da      	mvns	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	400a      	ands	r2, r1
 8002c92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6919      	ldr	r1, [r3, #16]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4403      	add	r3, r0
 8002cac:	409a      	lsls	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	d824      	bhi.n	8002d08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	3b05      	subs	r3, #5
 8002cd0:	221f      	movs	r2, #31
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43da      	mvns	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	400a      	ands	r2, r1
 8002cde:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	4618      	mov	r0, r3
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3b05      	subs	r3, #5
 8002cfa:	fa00 f203 	lsl.w	r2, r0, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	635a      	str	r2, [r3, #52]	; 0x34
 8002d06:	e04c      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b0c      	cmp	r3, #12
 8002d0e:	d824      	bhi.n	8002d5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	3b23      	subs	r3, #35	; 0x23
 8002d22:	221f      	movs	r2, #31
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43da      	mvns	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	400a      	ands	r2, r1
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	4618      	mov	r0, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	3b23      	subs	r3, #35	; 0x23
 8002d4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
 8002d58:	e023      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	3b41      	subs	r3, #65	; 0x41
 8002d6c:	221f      	movs	r2, #31
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43da      	mvns	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	400a      	ands	r2, r1
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	4618      	mov	r0, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	3b41      	subs	r3, #65	; 0x41
 8002d96:	fa00 f203 	lsl.w	r2, r0, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002da2:	4b29      	ldr	r3, [pc, #164]	; (8002e48 <HAL_ADC_ConfigChannel+0x250>)
 8002da4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a28      	ldr	r2, [pc, #160]	; (8002e4c <HAL_ADC_ConfigChannel+0x254>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d10f      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x1d8>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b12      	cmp	r3, #18
 8002db6:	d10b      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1d      	ldr	r2, [pc, #116]	; (8002e4c <HAL_ADC_ConfigChannel+0x254>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d12b      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x23a>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a1c      	ldr	r2, [pc, #112]	; (8002e50 <HAL_ADC_ConfigChannel+0x258>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d003      	beq.n	8002dec <HAL_ADC_ConfigChannel+0x1f4>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b11      	cmp	r3, #17
 8002dea:	d122      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a11      	ldr	r2, [pc, #68]	; (8002e50 <HAL_ADC_ConfigChannel+0x258>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d111      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e0e:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <HAL_ADC_ConfigChannel+0x25c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a11      	ldr	r2, [pc, #68]	; (8002e58 <HAL_ADC_ConfigChannel+0x260>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	0c9a      	lsrs	r2, r3, #18
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e24:	e002      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f9      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	40012300 	.word	0x40012300
 8002e4c:	40012000 	.word	0x40012000
 8002e50:	10000012 	.word	0x10000012
 8002e54:	20000000 	.word	0x20000000
 8002e58:	431bde83 	.word	0x431bde83

08002e5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e64:	4b79      	ldr	r3, [pc, #484]	; (800304c <ADC_Init+0x1f0>)
 8002e66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6859      	ldr	r1, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	021a      	lsls	r2, r3, #8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002eb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6859      	ldr	r1, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ed6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6899      	ldr	r1, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	4a58      	ldr	r2, [pc, #352]	; (8003050 <ADC_Init+0x1f4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d022      	beq.n	8002f3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6899      	ldr	r1, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6899      	ldr	r1, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	e00f      	b.n	8002f5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0202 	bic.w	r2, r2, #2
 8002f68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6899      	ldr	r1, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	7e1b      	ldrb	r3, [r3, #24]
 8002f74:	005a      	lsls	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01b      	beq.n	8002fc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002fa6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6859      	ldr	r1, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	035a      	lsls	r2, r3, #13
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	e007      	b.n	8002fd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	051a      	lsls	r2, r3, #20
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003004:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6899      	ldr	r1, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003012:	025a      	lsls	r2, r3, #9
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800302a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6899      	ldr	r1, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	029a      	lsls	r2, r3, #10
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	609a      	str	r2, [r3, #8]
}
 8003040:	bf00      	nop
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	40012300 	.word	0x40012300
 8003050:	0f000001 	.word	0x0f000001

08003054 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003078:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <__NVIC_SetPriorityGrouping+0x44>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003084:	4013      	ands	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800309a:	4a04      	ldr	r2, [pc, #16]	; (80030ac <__NVIC_SetPriorityGrouping+0x44>)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	60d3      	str	r3, [r2, #12]
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030b4:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <__NVIC_GetPriorityGrouping+0x18>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	0a1b      	lsrs	r3, r3, #8
 80030ba:	f003 0307 	and.w	r3, r3, #7
}
 80030be:	4618      	mov	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	e000ed00 	.word	0xe000ed00

080030cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	db0b      	blt.n	80030f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	f003 021f 	and.w	r2, r3, #31
 80030e4:	4907      	ldr	r1, [pc, #28]	; (8003104 <__NVIC_EnableIRQ+0x38>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	2001      	movs	r0, #1
 80030ee:	fa00 f202 	lsl.w	r2, r0, r2
 80030f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000e100 	.word	0xe000e100

08003108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	6039      	str	r1, [r7, #0]
 8003112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003118:	2b00      	cmp	r3, #0
 800311a:	db0a      	blt.n	8003132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	b2da      	uxtb	r2, r3
 8003120:	490c      	ldr	r1, [pc, #48]	; (8003154 <__NVIC_SetPriority+0x4c>)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	0112      	lsls	r2, r2, #4
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	440b      	add	r3, r1
 800312c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003130:	e00a      	b.n	8003148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	4908      	ldr	r1, [pc, #32]	; (8003158 <__NVIC_SetPriority+0x50>)
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	3b04      	subs	r3, #4
 8003140:	0112      	lsls	r2, r2, #4
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	440b      	add	r3, r1
 8003146:	761a      	strb	r2, [r3, #24]
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000e100 	.word	0xe000e100
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800315c:	b480      	push	{r7}
 800315e:	b089      	sub	sp, #36	; 0x24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f1c3 0307 	rsb	r3, r3, #7
 8003176:	2b04      	cmp	r3, #4
 8003178:	bf28      	it	cs
 800317a:	2304      	movcs	r3, #4
 800317c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3304      	adds	r3, #4
 8003182:	2b06      	cmp	r3, #6
 8003184:	d902      	bls.n	800318c <NVIC_EncodePriority+0x30>
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3b03      	subs	r3, #3
 800318a:	e000      	b.n	800318e <NVIC_EncodePriority+0x32>
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003190:	f04f 32ff 	mov.w	r2, #4294967295
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43da      	mvns	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	401a      	ands	r2, r3
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031a4:	f04f 31ff 	mov.w	r1, #4294967295
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	43d9      	mvns	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b4:	4313      	orrs	r3, r2
         );
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3724      	adds	r7, #36	; 0x24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031d4:	d301      	bcc.n	80031da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031d6:	2301      	movs	r3, #1
 80031d8:	e00f      	b.n	80031fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031da:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <SysTick_Config+0x40>)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3b01      	subs	r3, #1
 80031e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031e2:	210f      	movs	r1, #15
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295
 80031e8:	f7ff ff8e 	bl	8003108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <SysTick_Config+0x40>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031f2:	4b04      	ldr	r3, [pc, #16]	; (8003204 <SysTick_Config+0x40>)
 80031f4:	2207      	movs	r2, #7
 80031f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	e000e010 	.word	0xe000e010

08003208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff ff29 	bl	8003068 <__NVIC_SetPriorityGrouping>
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800321e:	b580      	push	{r7, lr}
 8003220:	b086      	sub	sp, #24
 8003222:	af00      	add	r7, sp, #0
 8003224:	4603      	mov	r3, r0
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003230:	f7ff ff3e 	bl	80030b0 <__NVIC_GetPriorityGrouping>
 8003234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	6978      	ldr	r0, [r7, #20]
 800323c:	f7ff ff8e 	bl	800315c <NVIC_EncodePriority>
 8003240:	4602      	mov	r2, r0
 8003242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff5d 	bl	8003108 <__NVIC_SetPriority>
}
 800324e:	bf00      	nop
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff ff31 	bl	80030cc <__NVIC_EnableIRQ>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff ffa2 	bl	80031c4 <SysTick_Config>
 8003280:	4603      	mov	r3, r0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003298:	f7ff f8c2 	bl	8002420 <HAL_GetTick>
 800329c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d008      	beq.n	80032bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2280      	movs	r2, #128	; 0x80
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e052      	b.n	8003362 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0216 	bic.w	r2, r2, #22
 80032ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d103      	bne.n	80032ec <HAL_DMA_Abort+0x62>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d007      	beq.n	80032fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0208 	bic.w	r2, r2, #8
 80032fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0201 	bic.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800330c:	e013      	b.n	8003336 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800330e:	f7ff f887 	bl	8002420 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b05      	cmp	r3, #5
 800331a:	d90c      	bls.n	8003336 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2203      	movs	r2, #3
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e015      	b.n	8003362 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1e4      	bne.n	800330e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003348:	223f      	movs	r2, #63	; 0x3f
 800334a:	409a      	lsls	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d004      	beq.n	8003388 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2280      	movs	r2, #128	; 0x80
 8003382:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e00c      	b.n	80033a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2205      	movs	r2, #5
 800338c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e06c      	b.n	800349c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d106      	bne.n	80033da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2223      	movs	r2, #35	; 0x23
 80033d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7fe fc69 	bl	8001cac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	4b31      	ldr	r3, [pc, #196]	; (80034a4 <HAL_ETH_Init+0xf4>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	4a30      	ldr	r2, [pc, #192]	; (80034a4 <HAL_ETH_Init+0xf4>)
 80033e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033e8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ea:	4b2e      	ldr	r3, [pc, #184]	; (80034a4 <HAL_ETH_Init+0xf4>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80033f6:	4b2c      	ldr	r3, [pc, #176]	; (80034a8 <HAL_ETH_Init+0xf8>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4a2b      	ldr	r2, [pc, #172]	; (80034a8 <HAL_ETH_Init+0xf8>)
 80033fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003400:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003402:	4b29      	ldr	r3, [pc, #164]	; (80034a8 <HAL_ETH_Init+0xf8>)
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	4927      	ldr	r1, [pc, #156]	; (80034a8 <HAL_ETH_Init+0xf8>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003410:	4b25      	ldr	r3, [pc, #148]	; (80034a8 <HAL_ETH_Init+0xf8>)
 8003412:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800342a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800342c:	f7fe fff8 	bl	8002420 <HAL_GetTick>
 8003430:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003432:	e011      	b.n	8003458 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003434:	f7fe fff4 	bl	8002420 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003442:	d909      	bls.n	8003458 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2204      	movs	r2, #4
 8003448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	22e0      	movs	r2, #224	; 0xe0
 8003450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e021      	b.n	800349c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1e4      	bne.n	8003434 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f944 	bl	80036f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f9eb 	bl	800384c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fa41 	bl	80038fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	461a      	mov	r2, r3
 8003482:	2100      	movs	r1, #0
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f9a9 	bl	80037dc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2210      	movs	r2, #16
 8003496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40013800 	.word	0x40013800

080034ac <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4b47      	ldr	r3, [pc, #284]	; (80035e0 <ETH_SetMACConfig+0x134>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	7c1b      	ldrb	r3, [r3, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d102      	bne.n	80034d4 <ETH_SetMACConfig+0x28>
 80034ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80034d2:	e000      	b.n	80034d6 <ETH_SetMACConfig+0x2a>
 80034d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	7c5b      	ldrb	r3, [r3, #17]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d102      	bne.n	80034e4 <ETH_SetMACConfig+0x38>
 80034de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034e2:	e000      	b.n	80034e6 <ETH_SetMACConfig+0x3a>
 80034e4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80034e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80034ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	7fdb      	ldrb	r3, [r3, #31]
 80034f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80034f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80034fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	7f92      	ldrb	r2, [r2, #30]
 8003500:	2a00      	cmp	r2, #0
 8003502:	d102      	bne.n	800350a <ETH_SetMACConfig+0x5e>
 8003504:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003508:	e000      	b.n	800350c <ETH_SetMACConfig+0x60>
 800350a:	2200      	movs	r2, #0
                        macconf->Speed |
 800350c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	7f1b      	ldrb	r3, [r3, #28]
 8003512:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003514:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800351a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	791b      	ldrb	r3, [r3, #4]
 8003520:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003522:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	f892 2020 	ldrb.w	r2, [r2, #32]
 800352a:	2a00      	cmp	r2, #0
 800352c:	d102      	bne.n	8003534 <ETH_SetMACConfig+0x88>
 800352e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003532:	e000      	b.n	8003536 <ETH_SetMACConfig+0x8a>
 8003534:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003536:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	7bdb      	ldrb	r3, [r3, #15]
 800353c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800353e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003544:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800354c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800354e:	4313      	orrs	r3, r2
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003566:	2001      	movs	r0, #1
 8003568:	f7fe ff66 	bl	8002438 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003582:	4013      	ands	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003592:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8003598:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 80035a0:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80035a8:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80035b0:	4313      	orrs	r3, r2
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035c8:	2001      	movs	r0, #1
 80035ca:	f7fe ff35 	bl	8002438 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	619a      	str	r2, [r3, #24]
}
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	ff20810f 	.word	0xff20810f

080035e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4b3d      	ldr	r3, [pc, #244]	; (80036f4 <ETH_SetDMAConfig+0x110>)
 80035fe:	4013      	ands	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	7b1b      	ldrb	r3, [r3, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d102      	bne.n	8003610 <ETH_SetDMAConfig+0x2c>
 800360a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800360e:	e000      	b.n	8003612 <ETH_SetDMAConfig+0x2e>
 8003610:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	7b5b      	ldrb	r3, [r3, #13]
 8003616:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003618:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	7f52      	ldrb	r2, [r2, #29]
 800361e:	2a00      	cmp	r2, #0
 8003620:	d102      	bne.n	8003628 <ETH_SetDMAConfig+0x44>
 8003622:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003626:	e000      	b.n	800362a <ETH_SetDMAConfig+0x46>
 8003628:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800362a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	7b9b      	ldrb	r3, [r3, #14]
 8003630:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003632:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003638:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	7f1b      	ldrb	r3, [r3, #28]
 800363e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003640:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	7f9b      	ldrb	r3, [r3, #30]
 8003646:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003648:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800364e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003656:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003658:	4313      	orrs	r3, r2
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003668:	461a      	mov	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800367a:	2001      	movs	r0, #1
 800367c:	f7fe fedc 	bl	8002438 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003688:	461a      	mov	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	791b      	ldrb	r3, [r3, #4]
 8003692:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003698:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800369e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80036a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80036ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80036b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80036bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6812      	ldr	r2, [r2, #0]
 80036c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036d8:	2001      	movs	r0, #1
 80036da:	f7fe fead 	bl	8002438 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e6:	461a      	mov	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6013      	str	r3, [r2, #0]
}
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	f8de3f23 	.word	0xf8de3f23

080036f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b0a6      	sub	sp, #152	; 0x98
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003700:	2301      	movs	r3, #1
 8003702:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003706:	2301      	movs	r3, #1
 8003708:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800370c:	2300      	movs	r3, #0
 800370e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003710:	2300      	movs	r3, #0
 8003712:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800371c:	2300      	movs	r3, #0
 800371e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003722:	2301      	movs	r3, #1
 8003724:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003728:	2300      	movs	r3, #0
 800372a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800372e:	2300      	movs	r3, #0
 8003730:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003734:	2300      	movs	r3, #0
 8003736:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003738:	2300      	movs	r3, #0
 800373a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800373e:	2300      	movs	r3, #0
 8003740:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003742:	2300      	movs	r3, #0
 8003744:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003748:	2300      	movs	r3, #0
 800374a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800374e:	2300      	movs	r3, #0
 8003750:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003754:	2300      	movs	r3, #0
 8003756:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800375a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800375e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003760:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003764:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003766:	2300      	movs	r3, #0
 8003768:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800376c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003770:	4619      	mov	r1, r3
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff fe9a 	bl	80034ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003778:	2301      	movs	r3, #1
 800377a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800377c:	2301      	movs	r3, #1
 800377e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003780:	2301      	movs	r3, #1
 8003782:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003786:	2301      	movs	r3, #1
 8003788:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800378e:	2300      	movs	r3, #0
 8003790:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003794:	2300      	movs	r3, #0
 8003796:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800379a:	2300      	movs	r3, #0
 800379c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800379e:	2301      	movs	r3, #1
 80037a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80037a4:	2301      	movs	r3, #1
 80037a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80037a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037ac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80037ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80037b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80037ba:	2301      	movs	r3, #1
 80037bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80037c8:	f107 0308 	add.w	r3, r7, #8
 80037cc:	4619      	mov	r1, r3
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff ff08 	bl	80035e4 <ETH_SetDMAConfig>
}
 80037d4:	bf00      	nop
 80037d6:	3798      	adds	r7, #152	; 0x98
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3305      	adds	r3, #5
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	3204      	adds	r2, #4
 80037f4:	7812      	ldrb	r2, [r2, #0]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	4b11      	ldr	r3, [pc, #68]	; (8003844 <ETH_MACAddressConfig+0x68>)
 80037fe:	4413      	add	r3, r2
 8003800:	461a      	mov	r2, r3
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3303      	adds	r3, #3
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	061a      	lsls	r2, r3, #24
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3302      	adds	r3, #2
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	041b      	lsls	r3, r3, #16
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3301      	adds	r3, #1
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	4313      	orrs	r3, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	7812      	ldrb	r2, [r2, #0]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <ETH_MACAddressConfig+0x6c>)
 800382e:	4413      	add	r3, r2
 8003830:	461a      	mov	r2, r3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	6013      	str	r3, [r2, #0]
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40028040 	.word	0x40028040
 8003848:	40028044 	.word	0x40028044

0800384c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	e03e      	b.n	80038d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68d9      	ldr	r1, [r3, #12]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	440b      	add	r3, r1
 800386a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2200      	movs	r2, #0
 8003876:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2200      	movs	r2, #0
 800387c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2200      	movs	r2, #0
 8003882:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	3206      	adds	r2, #6
 800388c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d80c      	bhi.n	80038bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68d9      	ldr	r1, [r3, #12]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	440b      	add	r3, r1
 80038b4:	461a      	mov	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	e004      	b.n	80038c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	461a      	mov	r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3301      	adds	r3, #1
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d9bd      	bls.n	800385a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f0:	611a      	str	r2, [r3, #16]
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80038fe:	b480      	push	{r7}
 8003900:	b085      	sub	sp, #20
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	e046      	b.n	800399a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6919      	ldr	r1, [r3, #16]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4613      	mov	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	440b      	add	r3, r1
 800391c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2200      	movs	r2, #0
 8003928:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2200      	movs	r2, #0
 800392e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2200      	movs	r2, #0
 8003934:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2200      	movs	r2, #0
 800393a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2200      	movs	r2, #0
 8003940:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003948:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003950:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	3212      	adds	r2, #18
 8003966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b02      	cmp	r3, #2
 800396e:	d80c      	bhi.n	800398a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6919      	ldr	r1, [r3, #16]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	440b      	add	r3, r1
 8003982:	461a      	mov	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	60da      	str	r2, [r3, #12]
 8003988:	e004      	b.n	8003994 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	461a      	mov	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	3301      	adds	r3, #1
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d9b5      	bls.n	800390c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ca:	60da      	str	r2, [r3, #12]
}
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039d8:	b480      	push	{r7}
 80039da:	b089      	sub	sp, #36	; 0x24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
 80039f2:	e177      	b.n	8003ce4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039f4:	2201      	movs	r2, #1
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4013      	ands	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	f040 8166 	bne.w	8003cde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d005      	beq.n	8003a2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d130      	bne.n	8003a8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	2203      	movs	r2, #3
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a60:	2201      	movs	r2, #1
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 0201 	and.w	r2, r3, #1
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d017      	beq.n	8003ac8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d123      	bne.n	8003b1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	08da      	lsrs	r2, r3, #3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3208      	adds	r2, #8
 8003adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	220f      	movs	r2, #15
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4013      	ands	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	08da      	lsrs	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3208      	adds	r2, #8
 8003b16:	69b9      	ldr	r1, [r7, #24]
 8003b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	2203      	movs	r2, #3
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 0203 	and.w	r2, r3, #3
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80c0 	beq.w	8003cde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	4b66      	ldr	r3, [pc, #408]	; (8003cfc <HAL_GPIO_Init+0x324>)
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	4a65      	ldr	r2, [pc, #404]	; (8003cfc <HAL_GPIO_Init+0x324>)
 8003b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b6e:	4b63      	ldr	r3, [pc, #396]	; (8003cfc <HAL_GPIO_Init+0x324>)
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b7a:	4a61      	ldr	r2, [pc, #388]	; (8003d00 <HAL_GPIO_Init+0x328>)
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	089b      	lsrs	r3, r3, #2
 8003b80:	3302      	adds	r3, #2
 8003b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	220f      	movs	r2, #15
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a58      	ldr	r2, [pc, #352]	; (8003d04 <HAL_GPIO_Init+0x32c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d037      	beq.n	8003c16 <HAL_GPIO_Init+0x23e>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a57      	ldr	r2, [pc, #348]	; (8003d08 <HAL_GPIO_Init+0x330>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d031      	beq.n	8003c12 <HAL_GPIO_Init+0x23a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a56      	ldr	r2, [pc, #344]	; (8003d0c <HAL_GPIO_Init+0x334>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d02b      	beq.n	8003c0e <HAL_GPIO_Init+0x236>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a55      	ldr	r2, [pc, #340]	; (8003d10 <HAL_GPIO_Init+0x338>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d025      	beq.n	8003c0a <HAL_GPIO_Init+0x232>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a54      	ldr	r2, [pc, #336]	; (8003d14 <HAL_GPIO_Init+0x33c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d01f      	beq.n	8003c06 <HAL_GPIO_Init+0x22e>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a53      	ldr	r2, [pc, #332]	; (8003d18 <HAL_GPIO_Init+0x340>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d019      	beq.n	8003c02 <HAL_GPIO_Init+0x22a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a52      	ldr	r2, [pc, #328]	; (8003d1c <HAL_GPIO_Init+0x344>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d013      	beq.n	8003bfe <HAL_GPIO_Init+0x226>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a51      	ldr	r2, [pc, #324]	; (8003d20 <HAL_GPIO_Init+0x348>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00d      	beq.n	8003bfa <HAL_GPIO_Init+0x222>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a50      	ldr	r2, [pc, #320]	; (8003d24 <HAL_GPIO_Init+0x34c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d007      	beq.n	8003bf6 <HAL_GPIO_Init+0x21e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a4f      	ldr	r2, [pc, #316]	; (8003d28 <HAL_GPIO_Init+0x350>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d101      	bne.n	8003bf2 <HAL_GPIO_Init+0x21a>
 8003bee:	2309      	movs	r3, #9
 8003bf0:	e012      	b.n	8003c18 <HAL_GPIO_Init+0x240>
 8003bf2:	230a      	movs	r3, #10
 8003bf4:	e010      	b.n	8003c18 <HAL_GPIO_Init+0x240>
 8003bf6:	2308      	movs	r3, #8
 8003bf8:	e00e      	b.n	8003c18 <HAL_GPIO_Init+0x240>
 8003bfa:	2307      	movs	r3, #7
 8003bfc:	e00c      	b.n	8003c18 <HAL_GPIO_Init+0x240>
 8003bfe:	2306      	movs	r3, #6
 8003c00:	e00a      	b.n	8003c18 <HAL_GPIO_Init+0x240>
 8003c02:	2305      	movs	r3, #5
 8003c04:	e008      	b.n	8003c18 <HAL_GPIO_Init+0x240>
 8003c06:	2304      	movs	r3, #4
 8003c08:	e006      	b.n	8003c18 <HAL_GPIO_Init+0x240>
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e004      	b.n	8003c18 <HAL_GPIO_Init+0x240>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e002      	b.n	8003c18 <HAL_GPIO_Init+0x240>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <HAL_GPIO_Init+0x240>
 8003c16:	2300      	movs	r3, #0
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	f002 0203 	and.w	r2, r2, #3
 8003c1e:	0092      	lsls	r2, r2, #2
 8003c20:	4093      	lsls	r3, r2
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c28:	4935      	ldr	r1, [pc, #212]	; (8003d00 <HAL_GPIO_Init+0x328>)
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	089b      	lsrs	r3, r3, #2
 8003c2e:	3302      	adds	r3, #2
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c36:	4b3d      	ldr	r3, [pc, #244]	; (8003d2c <HAL_GPIO_Init+0x354>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4013      	ands	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c5a:	4a34      	ldr	r2, [pc, #208]	; (8003d2c <HAL_GPIO_Init+0x354>)
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c60:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <HAL_GPIO_Init+0x354>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c84:	4a29      	ldr	r2, [pc, #164]	; (8003d2c <HAL_GPIO_Init+0x354>)
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c8a:	4b28      	ldr	r3, [pc, #160]	; (8003d2c <HAL_GPIO_Init+0x354>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	43db      	mvns	r3, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4013      	ands	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cae:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <HAL_GPIO_Init+0x354>)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <HAL_GPIO_Init+0x354>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cd8:	4a14      	ldr	r2, [pc, #80]	; (8003d2c <HAL_GPIO_Init+0x354>)
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	61fb      	str	r3, [r7, #28]
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	2b0f      	cmp	r3, #15
 8003ce8:	f67f ae84 	bls.w	80039f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cec:	bf00      	nop
 8003cee:	bf00      	nop
 8003cf0:	3724      	adds	r7, #36	; 0x24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	40013800 	.word	0x40013800
 8003d04:	40020000 	.word	0x40020000
 8003d08:	40020400 	.word	0x40020400
 8003d0c:	40020800 	.word	0x40020800
 8003d10:	40020c00 	.word	0x40020c00
 8003d14:	40021000 	.word	0x40021000
 8003d18:	40021400 	.word	0x40021400
 8003d1c:	40021800 	.word	0x40021800
 8003d20:	40021c00 	.word	0x40021c00
 8003d24:	40022000 	.word	0x40022000
 8003d28:	40022400 	.word	0x40022400
 8003d2c:	40013c00 	.word	0x40013c00

08003d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d40:	787b      	ldrb	r3, [r7, #1]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d4c:	e003      	b.n	8003d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d4e:	887b      	ldrh	r3, [r7, #2]
 8003d50:	041a      	lsls	r2, r3, #16
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	619a      	str	r2, [r3, #24]
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e12b      	b.n	8003fce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fe f854 	bl	8001e38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2224      	movs	r2, #36	; 0x24
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003db6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dc8:	f001 fa20 	bl	800520c <HAL_RCC_GetPCLK1Freq>
 8003dcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4a81      	ldr	r2, [pc, #516]	; (8003fd8 <HAL_I2C_Init+0x274>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d807      	bhi.n	8003de8 <HAL_I2C_Init+0x84>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4a80      	ldr	r2, [pc, #512]	; (8003fdc <HAL_I2C_Init+0x278>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	bf94      	ite	ls
 8003de0:	2301      	movls	r3, #1
 8003de2:	2300      	movhi	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	e006      	b.n	8003df6 <HAL_I2C_Init+0x92>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4a7d      	ldr	r2, [pc, #500]	; (8003fe0 <HAL_I2C_Init+0x27c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	bf94      	ite	ls
 8003df0:	2301      	movls	r3, #1
 8003df2:	2300      	movhi	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e0e7      	b.n	8003fce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4a78      	ldr	r2, [pc, #480]	; (8003fe4 <HAL_I2C_Init+0x280>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	0c9b      	lsrs	r3, r3, #18
 8003e08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	4a6a      	ldr	r2, [pc, #424]	; (8003fd8 <HAL_I2C_Init+0x274>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d802      	bhi.n	8003e38 <HAL_I2C_Init+0xd4>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	3301      	adds	r3, #1
 8003e36:	e009      	b.n	8003e4c <HAL_I2C_Init+0xe8>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	4a69      	ldr	r2, [pc, #420]	; (8003fe8 <HAL_I2C_Init+0x284>)
 8003e44:	fba2 2303 	umull	r2, r3, r2, r3
 8003e48:	099b      	lsrs	r3, r3, #6
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	430b      	orrs	r3, r1
 8003e52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	495c      	ldr	r1, [pc, #368]	; (8003fd8 <HAL_I2C_Init+0x274>)
 8003e68:	428b      	cmp	r3, r1
 8003e6a:	d819      	bhi.n	8003ea0 <HAL_I2C_Init+0x13c>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1e59      	subs	r1, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e7a:	1c59      	adds	r1, r3, #1
 8003e7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e80:	400b      	ands	r3, r1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_I2C_Init+0x138>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	1e59      	subs	r1, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e94:	3301      	adds	r3, #1
 8003e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9a:	e051      	b.n	8003f40 <HAL_I2C_Init+0x1dc>
 8003e9c:	2304      	movs	r3, #4
 8003e9e:	e04f      	b.n	8003f40 <HAL_I2C_Init+0x1dc>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d111      	bne.n	8003ecc <HAL_I2C_Init+0x168>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1e58      	subs	r0, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	440b      	add	r3, r1
 8003eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eba:	3301      	adds	r3, #1
 8003ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bf0c      	ite	eq
 8003ec4:	2301      	moveq	r3, #1
 8003ec6:	2300      	movne	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	e012      	b.n	8003ef2 <HAL_I2C_Init+0x18e>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1e58      	subs	r0, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6859      	ldr	r1, [r3, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	0099      	lsls	r1, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_I2C_Init+0x196>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e022      	b.n	8003f40 <HAL_I2C_Init+0x1dc>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10e      	bne.n	8003f20 <HAL_I2C_Init+0x1bc>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1e58      	subs	r0, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	440b      	add	r3, r1
 8003f10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f14:	3301      	adds	r3, #1
 8003f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f1e:	e00f      	b.n	8003f40 <HAL_I2C_Init+0x1dc>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	1e58      	subs	r0, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6859      	ldr	r1, [r3, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	0099      	lsls	r1, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f36:	3301      	adds	r3, #1
 8003f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	6809      	ldr	r1, [r1, #0]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69da      	ldr	r2, [r3, #28]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6911      	ldr	r1, [r2, #16]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68d2      	ldr	r2, [r2, #12]
 8003f7a:	4311      	orrs	r1, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	430b      	orrs	r3, r1
 8003f82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	000186a0 	.word	0x000186a0
 8003fdc:	001e847f 	.word	0x001e847f
 8003fe0:	003d08ff 	.word	0x003d08ff
 8003fe4:	431bde83 	.word	0x431bde83
 8003fe8:	10624dd3 	.word	0x10624dd3

08003fec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	607a      	str	r2, [r7, #4]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	817b      	strh	r3, [r7, #10]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004000:	f7fe fa0e 	bl	8002420 <HAL_GetTick>
 8004004:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b20      	cmp	r3, #32
 8004010:	f040 80e0 	bne.w	80041d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	2319      	movs	r3, #25
 800401a:	2201      	movs	r2, #1
 800401c:	4970      	ldr	r1, [pc, #448]	; (80041e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f964 	bl	80042ec <I2C_WaitOnFlagUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800402a:	2302      	movs	r3, #2
 800402c:	e0d3      	b.n	80041d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_I2C_Master_Transmit+0x50>
 8004038:	2302      	movs	r3, #2
 800403a:	e0cc      	b.n	80041d6 <HAL_I2C_Master_Transmit+0x1ea>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b01      	cmp	r3, #1
 8004050:	d007      	beq.n	8004062 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0201 	orr.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004070:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2221      	movs	r2, #33	; 0x21
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2210      	movs	r2, #16
 800407e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	893a      	ldrh	r2, [r7, #8]
 8004092:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4a50      	ldr	r2, [pc, #320]	; (80041e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80040a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040a4:	8979      	ldrh	r1, [r7, #10]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	6a3a      	ldr	r2, [r7, #32]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 f89c 	bl	80041e8 <I2C_MasterRequestWrite>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e08d      	b.n	80041d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ba:	2300      	movs	r3, #0
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040d0:	e066      	b.n	80041a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	6a39      	ldr	r1, [r7, #32]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f9de 	bl	8004498 <I2C_WaitOnTXEFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00d      	beq.n	80040fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d107      	bne.n	80040fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e06b      	b.n	80041d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	781a      	ldrb	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b04      	cmp	r3, #4
 800413a:	d11b      	bne.n	8004174 <HAL_I2C_Master_Transmit+0x188>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004140:	2b00      	cmp	r3, #0
 8004142:	d017      	beq.n	8004174 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	781a      	ldrb	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	6a39      	ldr	r1, [r7, #32]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f9ce 	bl	800451a <I2C_WaitOnBTFFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00d      	beq.n	80041a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	2b04      	cmp	r3, #4
 800418a:	d107      	bne.n	800419c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800419a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e01a      	b.n	80041d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d194      	bne.n	80040d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e000      	b.n	80041d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
  }
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	00100002 	.word	0x00100002
 80041e4:	ffff0000 	.word	0xffff0000

080041e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	607a      	str	r2, [r7, #4]
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	460b      	mov	r3, r1
 80041f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d006      	beq.n	8004212 <I2C_MasterRequestWrite+0x2a>
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d003      	beq.n	8004212 <I2C_MasterRequestWrite+0x2a>
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004210:	d108      	bne.n	8004224 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	e00b      	b.n	800423c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	2b12      	cmp	r3, #18
 800422a:	d107      	bne.n	800423c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800423a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f84f 	bl	80042ec <I2C_WaitOnFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00d      	beq.n	8004270 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004262:	d103      	bne.n	800426c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800426a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e035      	b.n	80042dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004278:	d108      	bne.n	800428c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800427a:	897b      	ldrh	r3, [r7, #10]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	461a      	mov	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004288:	611a      	str	r2, [r3, #16]
 800428a:	e01b      	b.n	80042c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800428c:	897b      	ldrh	r3, [r7, #10]
 800428e:	11db      	asrs	r3, r3, #7
 8004290:	b2db      	uxtb	r3, r3
 8004292:	f003 0306 	and.w	r3, r3, #6
 8004296:	b2db      	uxtb	r3, r3
 8004298:	f063 030f 	orn	r3, r3, #15
 800429c:	b2da      	uxtb	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	490e      	ldr	r1, [pc, #56]	; (80042e4 <I2C_MasterRequestWrite+0xfc>)
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f875 	bl	800439a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e010      	b.n	80042dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042ba:	897b      	ldrh	r3, [r7, #10]
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	4907      	ldr	r1, [pc, #28]	; (80042e8 <I2C_MasterRequestWrite+0x100>)
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f865 	bl	800439a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	00010008 	.word	0x00010008
 80042e8:	00010002 	.word	0x00010002

080042ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042fc:	e025      	b.n	800434a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004304:	d021      	beq.n	800434a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004306:	f7fe f88b 	bl	8002420 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d302      	bcc.n	800431c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d116      	bne.n	800434a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f043 0220 	orr.w	r2, r3, #32
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e023      	b.n	8004392 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	0c1b      	lsrs	r3, r3, #16
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b01      	cmp	r3, #1
 8004352:	d10d      	bne.n	8004370 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	43da      	mvns	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4013      	ands	r3, r2
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	bf0c      	ite	eq
 8004366:	2301      	moveq	r3, #1
 8004368:	2300      	movne	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	e00c      	b.n	800438a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	43da      	mvns	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4013      	ands	r3, r2
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	bf0c      	ite	eq
 8004382:	2301      	moveq	r3, #1
 8004384:	2300      	movne	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	429a      	cmp	r2, r3
 800438e:	d0b6      	beq.n	80042fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
 80043a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043a8:	e051      	b.n	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b8:	d123      	bne.n	8004402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f043 0204 	orr.w	r2, r3, #4
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e046      	b.n	8004490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004408:	d021      	beq.n	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440a:	f7fe f809 	bl	8002420 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	429a      	cmp	r2, r3
 8004418:	d302      	bcc.n	8004420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d116      	bne.n	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f043 0220 	orr.w	r2, r3, #32
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e020      	b.n	8004490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	0c1b      	lsrs	r3, r3, #16
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b01      	cmp	r3, #1
 8004456:	d10c      	bne.n	8004472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	43da      	mvns	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4013      	ands	r3, r2
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	bf14      	ite	ne
 800446a:	2301      	movne	r3, #1
 800446c:	2300      	moveq	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	e00b      	b.n	800448a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	43da      	mvns	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4013      	ands	r3, r2
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf14      	ite	ne
 8004484:	2301      	movne	r3, #1
 8004486:	2300      	moveq	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d18d      	bne.n	80043aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044a4:	e02d      	b.n	8004502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f878 	bl	800459c <I2C_IsAcknowledgeFailed>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e02d      	b.n	8004512 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044bc:	d021      	beq.n	8004502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044be:	f7fd ffaf 	bl	8002420 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d302      	bcc.n	80044d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d116      	bne.n	8004502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f043 0220 	orr.w	r2, r3, #32
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e007      	b.n	8004512 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450c:	2b80      	cmp	r3, #128	; 0x80
 800450e:	d1ca      	bne.n	80044a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004526:	e02d      	b.n	8004584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 f837 	bl	800459c <I2C_IsAcknowledgeFailed>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e02d      	b.n	8004594 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453e:	d021      	beq.n	8004584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004540:	f7fd ff6e 	bl	8002420 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	429a      	cmp	r2, r3
 800454e:	d302      	bcc.n	8004556 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d116      	bne.n	8004584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	f043 0220 	orr.w	r2, r3, #32
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e007      	b.n	8004594 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b04      	cmp	r3, #4
 8004590:	d1ca      	bne.n	8004528 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b2:	d11b      	bne.n	80045ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	f043 0204 	orr.w	r2, r3, #4
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b20      	cmp	r3, #32
 800460e:	d129      	bne.n	8004664 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2224      	movs	r2, #36	; 0x24
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0201 	bic.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0210 	bic.w	r2, r2, #16
 8004636:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	e000      	b.n	8004666 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004664:	2302      	movs	r3, #2
  }
}
 8004666:	4618      	mov	r0, r3
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004672:	b480      	push	{r7}
 8004674:	b085      	sub	sp, #20
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b20      	cmp	r3, #32
 800468a:	d12a      	bne.n	80046e2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2224      	movs	r2, #36	; 0x24
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0201 	bic.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80046ac:	89fb      	ldrh	r3, [r7, #14]
 80046ae:	f023 030f 	bic.w	r3, r3, #15
 80046b2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	89fb      	ldrh	r3, [r7, #14]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	89fa      	ldrh	r2, [r7, #14]
 80046c4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f042 0201 	orr.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	e000      	b.n	80046e4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80046e2:	2302      	movs	r3, #2
  }
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80046f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046f2:	b08f      	sub	sp, #60	; 0x3c
 80046f4:	af0a      	add	r7, sp, #40	; 0x28
 80046f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e10f      	b.n	8004922 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d106      	bne.n	8004722 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7fd fc7b 	bl	8002018 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2203      	movs	r2, #3
 8004726:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d102      	bne.n	800473c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4618      	mov	r0, r3
 8004742:	f002 fd28 	bl	8007196 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	687e      	ldr	r6, [r7, #4]
 800474e:	466d      	mov	r5, sp
 8004750:	f106 0410 	add.w	r4, r6, #16
 8004754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800475a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800475c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004760:	e885 0003 	stmia.w	r5, {r0, r1}
 8004764:	1d33      	adds	r3, r6, #4
 8004766:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004768:	6838      	ldr	r0, [r7, #0]
 800476a:	f002 fcb3 	bl	80070d4 <USB_CoreInit>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0d0      	b.n	8004922 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2100      	movs	r1, #0
 8004786:	4618      	mov	r0, r3
 8004788:	f002 fd16 	bl	80071b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800478c:	2300      	movs	r3, #0
 800478e:	73fb      	strb	r3, [r7, #15]
 8004790:	e04a      	b.n	8004828 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004792:	7bfa      	ldrb	r2, [r7, #15]
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	4613      	mov	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4413      	add	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	440b      	add	r3, r1
 80047a0:	333d      	adds	r3, #61	; 0x3d
 80047a2:	2201      	movs	r2, #1
 80047a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047a6:	7bfa      	ldrb	r2, [r7, #15]
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	440b      	add	r3, r1
 80047b4:	333c      	adds	r3, #60	; 0x3c
 80047b6:	7bfa      	ldrb	r2, [r7, #15]
 80047b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047ba:	7bfa      	ldrb	r2, [r7, #15]
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	b298      	uxth	r0, r3
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	3344      	adds	r3, #68	; 0x44
 80047ce:	4602      	mov	r2, r0
 80047d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047d2:	7bfa      	ldrb	r2, [r7, #15]
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	3340      	adds	r3, #64	; 0x40
 80047e2:	2200      	movs	r2, #0
 80047e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047e6:	7bfa      	ldrb	r2, [r7, #15]
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	3348      	adds	r3, #72	; 0x48
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047fa:	7bfa      	ldrb	r2, [r7, #15]
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	334c      	adds	r3, #76	; 0x4c
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800480e:	7bfa      	ldrb	r2, [r7, #15]
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	4613      	mov	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	3354      	adds	r3, #84	; 0x54
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004822:	7bfb      	ldrb	r3, [r7, #15]
 8004824:	3301      	adds	r3, #1
 8004826:	73fb      	strb	r3, [r7, #15]
 8004828:	7bfa      	ldrb	r2, [r7, #15]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	429a      	cmp	r2, r3
 8004830:	d3af      	bcc.n	8004792 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004832:	2300      	movs	r3, #0
 8004834:	73fb      	strb	r3, [r7, #15]
 8004836:	e044      	b.n	80048c2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004838:	7bfa      	ldrb	r2, [r7, #15]
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	4413      	add	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800484e:	7bfa      	ldrb	r2, [r7, #15]
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004860:	7bfa      	ldrb	r2, [r7, #15]
 8004862:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004864:	7bfa      	ldrb	r2, [r7, #15]
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	4613      	mov	r3, r2
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	4413      	add	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004876:	2200      	movs	r2, #0
 8004878:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800487a:	7bfa      	ldrb	r2, [r7, #15]
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	4613      	mov	r3, r2
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	4413      	add	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	440b      	add	r3, r1
 8004888:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004890:	7bfa      	ldrb	r2, [r7, #15]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048a6:	7bfa      	ldrb	r2, [r7, #15]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	4413      	add	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	3301      	adds	r3, #1
 80048c0:	73fb      	strb	r3, [r7, #15]
 80048c2:	7bfa      	ldrb	r2, [r7, #15]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d3b5      	bcc.n	8004838 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	603b      	str	r3, [r7, #0]
 80048d2:	687e      	ldr	r6, [r7, #4]
 80048d4:	466d      	mov	r5, sp
 80048d6:	f106 0410 	add.w	r4, r6, #16
 80048da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80048ea:	1d33      	adds	r3, r6, #4
 80048ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048ee:	6838      	ldr	r0, [r7, #0]
 80048f0:	f002 fcae 	bl	8007250 <USB_DevInit>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2202      	movs	r2, #2
 80048fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e00d      	b.n	8004922 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f002 fe79 	bl	8007612 <USB_DevDisconnect>

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800492c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e267      	b.n	8004e0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d075      	beq.n	8004a36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800494a:	4b88      	ldr	r3, [pc, #544]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 030c 	and.w	r3, r3, #12
 8004952:	2b04      	cmp	r3, #4
 8004954:	d00c      	beq.n	8004970 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004956:	4b85      	ldr	r3, [pc, #532]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800495e:	2b08      	cmp	r3, #8
 8004960:	d112      	bne.n	8004988 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004962:	4b82      	ldr	r3, [pc, #520]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800496a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800496e:	d10b      	bne.n	8004988 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004970:	4b7e      	ldr	r3, [pc, #504]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d05b      	beq.n	8004a34 <HAL_RCC_OscConfig+0x108>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d157      	bne.n	8004a34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e242      	b.n	8004e0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004990:	d106      	bne.n	80049a0 <HAL_RCC_OscConfig+0x74>
 8004992:	4b76      	ldr	r3, [pc, #472]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a75      	ldr	r2, [pc, #468]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 8004998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e01d      	b.n	80049dc <HAL_RCC_OscConfig+0xb0>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCC_OscConfig+0x98>
 80049aa:	4b70      	ldr	r3, [pc, #448]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a6f      	ldr	r2, [pc, #444]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 80049b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	4b6d      	ldr	r3, [pc, #436]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a6c      	ldr	r2, [pc, #432]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 80049bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	e00b      	b.n	80049dc <HAL_RCC_OscConfig+0xb0>
 80049c4:	4b69      	ldr	r3, [pc, #420]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a68      	ldr	r2, [pc, #416]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 80049ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	4b66      	ldr	r3, [pc, #408]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a65      	ldr	r2, [pc, #404]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 80049d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d013      	beq.n	8004a0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e4:	f7fd fd1c 	bl	8002420 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049ec:	f7fd fd18 	bl	8002420 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b64      	cmp	r3, #100	; 0x64
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e207      	b.n	8004e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fe:	4b5b      	ldr	r3, [pc, #364]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCC_OscConfig+0xc0>
 8004a0a:	e014      	b.n	8004a36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0c:	f7fd fd08 	bl	8002420 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a14:	f7fd fd04 	bl	8002420 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b64      	cmp	r3, #100	; 0x64
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e1f3      	b.n	8004e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a26:	4b51      	ldr	r3, [pc, #324]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0xe8>
 8004a32:	e000      	b.n	8004a36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d063      	beq.n	8004b0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a42:	4b4a      	ldr	r3, [pc, #296]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 030c 	and.w	r3, r3, #12
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00b      	beq.n	8004a66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a4e:	4b47      	ldr	r3, [pc, #284]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d11c      	bne.n	8004a94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a5a:	4b44      	ldr	r3, [pc, #272]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d116      	bne.n	8004a94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a66:	4b41      	ldr	r3, [pc, #260]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d005      	beq.n	8004a7e <HAL_RCC_OscConfig+0x152>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d001      	beq.n	8004a7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e1c7      	b.n	8004e0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7e:	4b3b      	ldr	r3, [pc, #236]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	4937      	ldr	r1, [pc, #220]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a92:	e03a      	b.n	8004b0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d020      	beq.n	8004ade <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a9c:	4b34      	ldr	r3, [pc, #208]	; (8004b70 <HAL_RCC_OscConfig+0x244>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa2:	f7fd fcbd 	bl	8002420 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aaa:	f7fd fcb9 	bl	8002420 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e1a8      	b.n	8004e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004abc:	4b2b      	ldr	r3, [pc, #172]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0f0      	beq.n	8004aaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac8:	4b28      	ldr	r3, [pc, #160]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	4925      	ldr	r1, [pc, #148]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	600b      	str	r3, [r1, #0]
 8004adc:	e015      	b.n	8004b0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ade:	4b24      	ldr	r3, [pc, #144]	; (8004b70 <HAL_RCC_OscConfig+0x244>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae4:	f7fd fc9c 	bl	8002420 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aec:	f7fd fc98 	bl	8002420 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e187      	b.n	8004e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004afe:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d036      	beq.n	8004b84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d016      	beq.n	8004b4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b1e:	4b15      	ldr	r3, [pc, #84]	; (8004b74 <HAL_RCC_OscConfig+0x248>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b24:	f7fd fc7c 	bl	8002420 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b2c:	f7fd fc78 	bl	8002420 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e167      	b.n	8004e0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3e:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <HAL_RCC_OscConfig+0x240>)
 8004b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0f0      	beq.n	8004b2c <HAL_RCC_OscConfig+0x200>
 8004b4a:	e01b      	b.n	8004b84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b4c:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <HAL_RCC_OscConfig+0x248>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b52:	f7fd fc65 	bl	8002420 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b58:	e00e      	b.n	8004b78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b5a:	f7fd fc61 	bl	8002420 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d907      	bls.n	8004b78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e150      	b.n	8004e0e <HAL_RCC_OscConfig+0x4e2>
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	42470000 	.word	0x42470000
 8004b74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b78:	4b88      	ldr	r3, [pc, #544]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1ea      	bne.n	8004b5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8097 	beq.w	8004cc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b92:	2300      	movs	r3, #0
 8004b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b96:	4b81      	ldr	r3, [pc, #516]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10f      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	4b7d      	ldr	r3, [pc, #500]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	4a7c      	ldr	r2, [pc, #496]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8004bb2:	4b7a      	ldr	r3, [pc, #488]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bba:	60bb      	str	r3, [r7, #8]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc2:	4b77      	ldr	r3, [pc, #476]	; (8004da0 <HAL_RCC_OscConfig+0x474>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d118      	bne.n	8004c00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bce:	4b74      	ldr	r3, [pc, #464]	; (8004da0 <HAL_RCC_OscConfig+0x474>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a73      	ldr	r2, [pc, #460]	; (8004da0 <HAL_RCC_OscConfig+0x474>)
 8004bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bda:	f7fd fc21 	bl	8002420 <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be2:	f7fd fc1d 	bl	8002420 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e10c      	b.n	8004e0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf4:	4b6a      	ldr	r3, [pc, #424]	; (8004da0 <HAL_RCC_OscConfig+0x474>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0f0      	beq.n	8004be2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d106      	bne.n	8004c16 <HAL_RCC_OscConfig+0x2ea>
 8004c08:	4b64      	ldr	r3, [pc, #400]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0c:	4a63      	ldr	r2, [pc, #396]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004c0e:	f043 0301 	orr.w	r3, r3, #1
 8004c12:	6713      	str	r3, [r2, #112]	; 0x70
 8004c14:	e01c      	b.n	8004c50 <HAL_RCC_OscConfig+0x324>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	2b05      	cmp	r3, #5
 8004c1c:	d10c      	bne.n	8004c38 <HAL_RCC_OscConfig+0x30c>
 8004c1e:	4b5f      	ldr	r3, [pc, #380]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c22:	4a5e      	ldr	r2, [pc, #376]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004c24:	f043 0304 	orr.w	r3, r3, #4
 8004c28:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2a:	4b5c      	ldr	r3, [pc, #368]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2e:	4a5b      	ldr	r2, [pc, #364]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004c30:	f043 0301 	orr.w	r3, r3, #1
 8004c34:	6713      	str	r3, [r2, #112]	; 0x70
 8004c36:	e00b      	b.n	8004c50 <HAL_RCC_OscConfig+0x324>
 8004c38:	4b58      	ldr	r3, [pc, #352]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3c:	4a57      	ldr	r2, [pc, #348]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	6713      	str	r3, [r2, #112]	; 0x70
 8004c44:	4b55      	ldr	r3, [pc, #340]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c48:	4a54      	ldr	r2, [pc, #336]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004c4a:	f023 0304 	bic.w	r3, r3, #4
 8004c4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d015      	beq.n	8004c84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c58:	f7fd fbe2 	bl	8002420 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c5e:	e00a      	b.n	8004c76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c60:	f7fd fbde 	bl	8002420 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e0cb      	b.n	8004e0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c76:	4b49      	ldr	r3, [pc, #292]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0ee      	beq.n	8004c60 <HAL_RCC_OscConfig+0x334>
 8004c82:	e014      	b.n	8004cae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c84:	f7fd fbcc 	bl	8002420 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c8a:	e00a      	b.n	8004ca2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c8c:	f7fd fbc8 	bl	8002420 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e0b5      	b.n	8004e0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca2:	4b3e      	ldr	r3, [pc, #248]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1ee      	bne.n	8004c8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cae:	7dfb      	ldrb	r3, [r7, #23]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d105      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb4:	4b39      	ldr	r3, [pc, #228]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	4a38      	ldr	r2, [pc, #224]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 80a1 	beq.w	8004e0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cca:	4b34      	ldr	r3, [pc, #208]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 030c 	and.w	r3, r3, #12
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d05c      	beq.n	8004d90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d141      	bne.n	8004d62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cde:	4b31      	ldr	r3, [pc, #196]	; (8004da4 <HAL_RCC_OscConfig+0x478>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce4:	f7fd fb9c 	bl	8002420 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cec:	f7fd fb98 	bl	8002420 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e087      	b.n	8004e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cfe:	4b27      	ldr	r3, [pc, #156]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69da      	ldr	r2, [r3, #28]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	019b      	lsls	r3, r3, #6
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	085b      	lsrs	r3, r3, #1
 8004d22:	3b01      	subs	r3, #1
 8004d24:	041b      	lsls	r3, r3, #16
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	061b      	lsls	r3, r3, #24
 8004d2e:	491b      	ldr	r1, [pc, #108]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d34:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <HAL_RCC_OscConfig+0x478>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3a:	f7fd fb71 	bl	8002420 <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d42:	f7fd fb6d 	bl	8002420 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e05c      	b.n	8004e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d54:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0f0      	beq.n	8004d42 <HAL_RCC_OscConfig+0x416>
 8004d60:	e054      	b.n	8004e0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d62:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <HAL_RCC_OscConfig+0x478>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d68:	f7fd fb5a 	bl	8002420 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d70:	f7fd fb56 	bl	8002420 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e045      	b.n	8004e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d82:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <HAL_RCC_OscConfig+0x470>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0x444>
 8004d8e:	e03d      	b.n	8004e0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d107      	bne.n	8004da8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e038      	b.n	8004e0e <HAL_RCC_OscConfig+0x4e2>
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	40007000 	.word	0x40007000
 8004da4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004da8:	4b1b      	ldr	r3, [pc, #108]	; (8004e18 <HAL_RCC_OscConfig+0x4ec>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d028      	beq.n	8004e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d121      	bne.n	8004e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d11a      	bne.n	8004e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dd8:	4013      	ands	r3, r2
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d111      	bne.n	8004e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	085b      	lsrs	r3, r3, #1
 8004df0:	3b01      	subs	r3, #1
 8004df2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d107      	bne.n	8004e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d001      	beq.n	8004e0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	40023800 	.word	0x40023800

08004e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0cc      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e30:	4b68      	ldr	r3, [pc, #416]	; (8004fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d90c      	bls.n	8004e58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3e:	4b65      	ldr	r3, [pc, #404]	; (8004fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e46:	4b63      	ldr	r3, [pc, #396]	; (8004fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d001      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e0b8      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d020      	beq.n	8004ea6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e70:	4b59      	ldr	r3, [pc, #356]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	4a58      	ldr	r2, [pc, #352]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e88:	4b53      	ldr	r3, [pc, #332]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	4a52      	ldr	r2, [pc, #328]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e94:	4b50      	ldr	r3, [pc, #320]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	494d      	ldr	r1, [pc, #308]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d044      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d107      	bne.n	8004eca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eba:	4b47      	ldr	r3, [pc, #284]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d119      	bne.n	8004efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e07f      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d003      	beq.n	8004eda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d107      	bne.n	8004eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eda:	4b3f      	ldr	r3, [pc, #252]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d109      	bne.n	8004efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e06f      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eea:	4b3b      	ldr	r3, [pc, #236]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e067      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004efa:	4b37      	ldr	r3, [pc, #220]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f023 0203 	bic.w	r2, r3, #3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	4934      	ldr	r1, [pc, #208]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f0c:	f7fd fa88 	bl	8002420 <HAL_GetTick>
 8004f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f12:	e00a      	b.n	8004f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f14:	f7fd fa84 	bl	8002420 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e04f      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2a:	4b2b      	ldr	r3, [pc, #172]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 020c 	and.w	r2, r3, #12
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d1eb      	bne.n	8004f14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f3c:	4b25      	ldr	r3, [pc, #148]	; (8004fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 030f 	and.w	r3, r3, #15
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d20c      	bcs.n	8004f64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f4a:	4b22      	ldr	r3, [pc, #136]	; (8004fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f52:	4b20      	ldr	r3, [pc, #128]	; (8004fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d001      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e032      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f70:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	4916      	ldr	r1, [pc, #88]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0308 	and.w	r3, r3, #8
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d009      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f8e:	4b12      	ldr	r3, [pc, #72]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	490e      	ldr	r1, [pc, #56]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fa2:	f000 f821 	bl	8004fe8 <HAL_RCC_GetSysClockFreq>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	091b      	lsrs	r3, r3, #4
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	490a      	ldr	r1, [pc, #40]	; (8004fdc <HAL_RCC_ClockConfig+0x1c0>)
 8004fb4:	5ccb      	ldrb	r3, [r1, r3]
 8004fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fba:	4a09      	ldr	r2, [pc, #36]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fbe:	4b09      	ldr	r3, [pc, #36]	; (8004fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fd f9e8 	bl	8002398 <HAL_InitTick>

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40023c00 	.word	0x40023c00
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	0800b3b8 	.word	0x0800b3b8
 8004fe0:	20000000 	.word	0x20000000
 8004fe4:	20000004 	.word	0x20000004

08004fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fec:	b094      	sub	sp, #80	; 0x50
 8004fee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005000:	4b79      	ldr	r3, [pc, #484]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 030c 	and.w	r3, r3, #12
 8005008:	2b08      	cmp	r3, #8
 800500a:	d00d      	beq.n	8005028 <HAL_RCC_GetSysClockFreq+0x40>
 800500c:	2b08      	cmp	r3, #8
 800500e:	f200 80e1 	bhi.w	80051d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <HAL_RCC_GetSysClockFreq+0x34>
 8005016:	2b04      	cmp	r3, #4
 8005018:	d003      	beq.n	8005022 <HAL_RCC_GetSysClockFreq+0x3a>
 800501a:	e0db      	b.n	80051d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800501c:	4b73      	ldr	r3, [pc, #460]	; (80051ec <HAL_RCC_GetSysClockFreq+0x204>)
 800501e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005020:	e0db      	b.n	80051da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005022:	4b73      	ldr	r3, [pc, #460]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005024:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005026:	e0d8      	b.n	80051da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005028:	4b6f      	ldr	r3, [pc, #444]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005030:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005032:	4b6d      	ldr	r3, [pc, #436]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d063      	beq.n	8005106 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800503e:	4b6a      	ldr	r3, [pc, #424]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	099b      	lsrs	r3, r3, #6
 8005044:	2200      	movs	r2, #0
 8005046:	63bb      	str	r3, [r7, #56]	; 0x38
 8005048:	63fa      	str	r2, [r7, #60]	; 0x3c
 800504a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005050:	633b      	str	r3, [r7, #48]	; 0x30
 8005052:	2300      	movs	r3, #0
 8005054:	637b      	str	r3, [r7, #52]	; 0x34
 8005056:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800505a:	4622      	mov	r2, r4
 800505c:	462b      	mov	r3, r5
 800505e:	f04f 0000 	mov.w	r0, #0
 8005062:	f04f 0100 	mov.w	r1, #0
 8005066:	0159      	lsls	r1, r3, #5
 8005068:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800506c:	0150      	lsls	r0, r2, #5
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4621      	mov	r1, r4
 8005074:	1a51      	subs	r1, r2, r1
 8005076:	6139      	str	r1, [r7, #16]
 8005078:	4629      	mov	r1, r5
 800507a:	eb63 0301 	sbc.w	r3, r3, r1
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800508c:	4659      	mov	r1, fp
 800508e:	018b      	lsls	r3, r1, #6
 8005090:	4651      	mov	r1, sl
 8005092:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005096:	4651      	mov	r1, sl
 8005098:	018a      	lsls	r2, r1, #6
 800509a:	4651      	mov	r1, sl
 800509c:	ebb2 0801 	subs.w	r8, r2, r1
 80050a0:	4659      	mov	r1, fp
 80050a2:	eb63 0901 	sbc.w	r9, r3, r1
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050ba:	4690      	mov	r8, r2
 80050bc:	4699      	mov	r9, r3
 80050be:	4623      	mov	r3, r4
 80050c0:	eb18 0303 	adds.w	r3, r8, r3
 80050c4:	60bb      	str	r3, [r7, #8]
 80050c6:	462b      	mov	r3, r5
 80050c8:	eb49 0303 	adc.w	r3, r9, r3
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	f04f 0300 	mov.w	r3, #0
 80050d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050da:	4629      	mov	r1, r5
 80050dc:	024b      	lsls	r3, r1, #9
 80050de:	4621      	mov	r1, r4
 80050e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050e4:	4621      	mov	r1, r4
 80050e6:	024a      	lsls	r2, r1, #9
 80050e8:	4610      	mov	r0, r2
 80050ea:	4619      	mov	r1, r3
 80050ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ee:	2200      	movs	r2, #0
 80050f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050f8:	f7fb fdc6 	bl	8000c88 <__aeabi_uldivmod>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4613      	mov	r3, r2
 8005102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005104:	e058      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005106:	4b38      	ldr	r3, [pc, #224]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	099b      	lsrs	r3, r3, #6
 800510c:	2200      	movs	r2, #0
 800510e:	4618      	mov	r0, r3
 8005110:	4611      	mov	r1, r2
 8005112:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005116:	623b      	str	r3, [r7, #32]
 8005118:	2300      	movs	r3, #0
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
 800511c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005120:	4642      	mov	r2, r8
 8005122:	464b      	mov	r3, r9
 8005124:	f04f 0000 	mov.w	r0, #0
 8005128:	f04f 0100 	mov.w	r1, #0
 800512c:	0159      	lsls	r1, r3, #5
 800512e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005132:	0150      	lsls	r0, r2, #5
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4641      	mov	r1, r8
 800513a:	ebb2 0a01 	subs.w	sl, r2, r1
 800513e:	4649      	mov	r1, r9
 8005140:	eb63 0b01 	sbc.w	fp, r3, r1
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005150:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005154:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005158:	ebb2 040a 	subs.w	r4, r2, sl
 800515c:	eb63 050b 	sbc.w	r5, r3, fp
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	00eb      	lsls	r3, r5, #3
 800516a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800516e:	00e2      	lsls	r2, r4, #3
 8005170:	4614      	mov	r4, r2
 8005172:	461d      	mov	r5, r3
 8005174:	4643      	mov	r3, r8
 8005176:	18e3      	adds	r3, r4, r3
 8005178:	603b      	str	r3, [r7, #0]
 800517a:	464b      	mov	r3, r9
 800517c:	eb45 0303 	adc.w	r3, r5, r3
 8005180:	607b      	str	r3, [r7, #4]
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800518e:	4629      	mov	r1, r5
 8005190:	028b      	lsls	r3, r1, #10
 8005192:	4621      	mov	r1, r4
 8005194:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005198:	4621      	mov	r1, r4
 800519a:	028a      	lsls	r2, r1, #10
 800519c:	4610      	mov	r0, r2
 800519e:	4619      	mov	r1, r3
 80051a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051a2:	2200      	movs	r2, #0
 80051a4:	61bb      	str	r3, [r7, #24]
 80051a6:	61fa      	str	r2, [r7, #28]
 80051a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051ac:	f7fb fd6c 	bl	8000c88 <__aeabi_uldivmod>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4613      	mov	r3, r2
 80051b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051b8:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	0c1b      	lsrs	r3, r3, #16
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	3301      	adds	r3, #1
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80051c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051d2:	e002      	b.n	80051da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051d4:	4b05      	ldr	r3, [pc, #20]	; (80051ec <HAL_RCC_GetSysClockFreq+0x204>)
 80051d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3750      	adds	r7, #80	; 0x50
 80051e0:	46bd      	mov	sp, r7
 80051e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051e6:	bf00      	nop
 80051e8:	40023800 	.word	0x40023800
 80051ec:	00f42400 	.word	0x00f42400
 80051f0:	007a1200 	.word	0x007a1200

080051f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051f8:	4b03      	ldr	r3, [pc, #12]	; (8005208 <HAL_RCC_GetHCLKFreq+0x14>)
 80051fa:	681b      	ldr	r3, [r3, #0]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	20000000 	.word	0x20000000

0800520c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005210:	f7ff fff0 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 8005214:	4602      	mov	r2, r0
 8005216:	4b05      	ldr	r3, [pc, #20]	; (800522c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	0a9b      	lsrs	r3, r3, #10
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	4903      	ldr	r1, [pc, #12]	; (8005230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005222:	5ccb      	ldrb	r3, [r1, r3]
 8005224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005228:	4618      	mov	r0, r3
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40023800 	.word	0x40023800
 8005230:	0800b3c8 	.word	0x0800b3c8

08005234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005238:	f7ff ffdc 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 800523c:	4602      	mov	r2, r0
 800523e:	4b05      	ldr	r3, [pc, #20]	; (8005254 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	0b5b      	lsrs	r3, r3, #13
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	4903      	ldr	r1, [pc, #12]	; (8005258 <HAL_RCC_GetPCLK2Freq+0x24>)
 800524a:	5ccb      	ldrb	r3, [r1, r3]
 800524c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005250:	4618      	mov	r0, r3
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40023800 	.word	0x40023800
 8005258:	0800b3c8 	.word	0x0800b3c8

0800525c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e041      	b.n	80052f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d106      	bne.n	8005288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fc fe20 	bl	8001ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3304      	adds	r3, #4
 8005298:	4619      	mov	r1, r3
 800529a:	4610      	mov	r0, r2
 800529c:	f000 fad8 	bl	8005850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e041      	b.n	8005390 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d106      	bne.n	8005326 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f839 	bl	8005398 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2202      	movs	r2, #2
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3304      	adds	r3, #4
 8005336:	4619      	mov	r1, r3
 8005338:	4610      	mov	r0, r2
 800533a:	f000 fa89 	bl	8005850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d109      	bne.n	80053d0 <HAL_TIM_PWM_Start+0x24>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	bf14      	ite	ne
 80053c8:	2301      	movne	r3, #1
 80053ca:	2300      	moveq	r3, #0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	e022      	b.n	8005416 <HAL_TIM_PWM_Start+0x6a>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b04      	cmp	r3, #4
 80053d4:	d109      	bne.n	80053ea <HAL_TIM_PWM_Start+0x3e>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b01      	cmp	r3, #1
 80053e0:	bf14      	ite	ne
 80053e2:	2301      	movne	r3, #1
 80053e4:	2300      	moveq	r3, #0
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	e015      	b.n	8005416 <HAL_TIM_PWM_Start+0x6a>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d109      	bne.n	8005404 <HAL_TIM_PWM_Start+0x58>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	bf14      	ite	ne
 80053fc:	2301      	movne	r3, #1
 80053fe:	2300      	moveq	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	e008      	b.n	8005416 <HAL_TIM_PWM_Start+0x6a>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b01      	cmp	r3, #1
 800540e:	bf14      	ite	ne
 8005410:	2301      	movne	r3, #1
 8005412:	2300      	moveq	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e07c      	b.n	8005518 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d104      	bne.n	800542e <HAL_TIM_PWM_Start+0x82>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800542c:	e013      	b.n	8005456 <HAL_TIM_PWM_Start+0xaa>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b04      	cmp	r3, #4
 8005432:	d104      	bne.n	800543e <HAL_TIM_PWM_Start+0x92>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800543c:	e00b      	b.n	8005456 <HAL_TIM_PWM_Start+0xaa>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b08      	cmp	r3, #8
 8005442:	d104      	bne.n	800544e <HAL_TIM_PWM_Start+0xa2>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800544c:	e003      	b.n	8005456 <HAL_TIM_PWM_Start+0xaa>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2202      	movs	r2, #2
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2201      	movs	r2, #1
 800545c:	6839      	ldr	r1, [r7, #0]
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fce0 	bl	8005e24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a2d      	ldr	r2, [pc, #180]	; (8005520 <HAL_TIM_PWM_Start+0x174>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d004      	beq.n	8005478 <HAL_TIM_PWM_Start+0xcc>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a2c      	ldr	r2, [pc, #176]	; (8005524 <HAL_TIM_PWM_Start+0x178>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d101      	bne.n	800547c <HAL_TIM_PWM_Start+0xd0>
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <HAL_TIM_PWM_Start+0xd2>
 800547c:	2300      	movs	r3, #0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d007      	beq.n	8005492 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005490:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a22      	ldr	r2, [pc, #136]	; (8005520 <HAL_TIM_PWM_Start+0x174>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d022      	beq.n	80054e2 <HAL_TIM_PWM_Start+0x136>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a4:	d01d      	beq.n	80054e2 <HAL_TIM_PWM_Start+0x136>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1f      	ldr	r2, [pc, #124]	; (8005528 <HAL_TIM_PWM_Start+0x17c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d018      	beq.n	80054e2 <HAL_TIM_PWM_Start+0x136>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1d      	ldr	r2, [pc, #116]	; (800552c <HAL_TIM_PWM_Start+0x180>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <HAL_TIM_PWM_Start+0x136>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1c      	ldr	r2, [pc, #112]	; (8005530 <HAL_TIM_PWM_Start+0x184>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00e      	beq.n	80054e2 <HAL_TIM_PWM_Start+0x136>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a16      	ldr	r2, [pc, #88]	; (8005524 <HAL_TIM_PWM_Start+0x178>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d009      	beq.n	80054e2 <HAL_TIM_PWM_Start+0x136>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a18      	ldr	r2, [pc, #96]	; (8005534 <HAL_TIM_PWM_Start+0x188>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d004      	beq.n	80054e2 <HAL_TIM_PWM_Start+0x136>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a16      	ldr	r2, [pc, #88]	; (8005538 <HAL_TIM_PWM_Start+0x18c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d111      	bne.n	8005506 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b06      	cmp	r3, #6
 80054f2:	d010      	beq.n	8005516 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005504:	e007      	b.n	8005516 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f042 0201 	orr.w	r2, r2, #1
 8005514:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40010000 	.word	0x40010000
 8005524:	40010400 	.word	0x40010400
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40000c00 	.word	0x40000c00
 8005534:	40014000 	.word	0x40014000
 8005538:	40001800 	.word	0x40001800

0800553c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005556:	2302      	movs	r3, #2
 8005558:	e0ae      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b0c      	cmp	r3, #12
 8005566:	f200 809f 	bhi.w	80056a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800556a:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800556c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005570:	080055a5 	.word	0x080055a5
 8005574:	080056a9 	.word	0x080056a9
 8005578:	080056a9 	.word	0x080056a9
 800557c:	080056a9 	.word	0x080056a9
 8005580:	080055e5 	.word	0x080055e5
 8005584:	080056a9 	.word	0x080056a9
 8005588:	080056a9 	.word	0x080056a9
 800558c:	080056a9 	.word	0x080056a9
 8005590:	08005627 	.word	0x08005627
 8005594:	080056a9 	.word	0x080056a9
 8005598:	080056a9 	.word	0x080056a9
 800559c:	080056a9 	.word	0x080056a9
 80055a0:	08005667 	.word	0x08005667
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 f9f0 	bl	8005990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0208 	orr.w	r2, r2, #8
 80055be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0204 	bic.w	r2, r2, #4
 80055ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6999      	ldr	r1, [r3, #24]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	691a      	ldr	r2, [r3, #16]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	619a      	str	r2, [r3, #24]
      break;
 80055e2:	e064      	b.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fa40 	bl	8005a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699a      	ldr	r2, [r3, #24]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800560e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6999      	ldr	r1, [r3, #24]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	021a      	lsls	r2, r3, #8
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	619a      	str	r2, [r3, #24]
      break;
 8005624:	e043      	b.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	4618      	mov	r0, r3
 800562e:	f000 fa95 	bl	8005b5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f042 0208 	orr.w	r2, r2, #8
 8005640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0204 	bic.w	r2, r2, #4
 8005650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69d9      	ldr	r1, [r3, #28]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	61da      	str	r2, [r3, #28]
      break;
 8005664:	e023      	b.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fae9 	bl	8005c44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69da      	ldr	r2, [r3, #28]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69da      	ldr	r2, [r3, #28]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69d9      	ldr	r1, [r3, #28]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	021a      	lsls	r2, r3, #8
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	61da      	str	r2, [r3, #28]
      break;
 80056a6:	e002      	b.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	75fb      	strb	r3, [r7, #23]
      break;
 80056ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <HAL_TIM_ConfigClockSource+0x1c>
 80056d8:	2302      	movs	r3, #2
 80056da:	e0b4      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x186>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005714:	d03e      	beq.n	8005794 <HAL_TIM_ConfigClockSource+0xd4>
 8005716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800571a:	f200 8087 	bhi.w	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800571e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005722:	f000 8086 	beq.w	8005832 <HAL_TIM_ConfigClockSource+0x172>
 8005726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800572a:	d87f      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800572c:	2b70      	cmp	r3, #112	; 0x70
 800572e:	d01a      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0xa6>
 8005730:	2b70      	cmp	r3, #112	; 0x70
 8005732:	d87b      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 8005734:	2b60      	cmp	r3, #96	; 0x60
 8005736:	d050      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x11a>
 8005738:	2b60      	cmp	r3, #96	; 0x60
 800573a:	d877      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800573c:	2b50      	cmp	r3, #80	; 0x50
 800573e:	d03c      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0xfa>
 8005740:	2b50      	cmp	r3, #80	; 0x50
 8005742:	d873      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 8005744:	2b40      	cmp	r3, #64	; 0x40
 8005746:	d058      	beq.n	80057fa <HAL_TIM_ConfigClockSource+0x13a>
 8005748:	2b40      	cmp	r3, #64	; 0x40
 800574a:	d86f      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800574c:	2b30      	cmp	r3, #48	; 0x30
 800574e:	d064      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x15a>
 8005750:	2b30      	cmp	r3, #48	; 0x30
 8005752:	d86b      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 8005754:	2b20      	cmp	r3, #32
 8005756:	d060      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x15a>
 8005758:	2b20      	cmp	r3, #32
 800575a:	d867      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d05c      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x15a>
 8005760:	2b10      	cmp	r3, #16
 8005762:	d05a      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x15a>
 8005764:	e062      	b.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	6899      	ldr	r1, [r3, #8]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f000 fb35 	bl	8005de4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005788:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	609a      	str	r2, [r3, #8]
      break;
 8005792:	e04f      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6818      	ldr	r0, [r3, #0]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	6899      	ldr	r1, [r3, #8]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f000 fb1e 	bl	8005de4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689a      	ldr	r2, [r3, #8]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057b6:	609a      	str	r2, [r3, #8]
      break;
 80057b8:	e03c      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	6859      	ldr	r1, [r3, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f000 fa92 	bl	8005cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2150      	movs	r1, #80	; 0x50
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 faeb 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 80057d8:	e02c      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6859      	ldr	r1, [r3, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	461a      	mov	r2, r3
 80057e8:	f000 fab1 	bl	8005d4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2160      	movs	r1, #96	; 0x60
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fadb 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 80057f8:	e01c      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6859      	ldr	r1, [r3, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	461a      	mov	r2, r3
 8005808:	f000 fa72 	bl	8005cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2140      	movs	r1, #64	; 0x40
 8005812:	4618      	mov	r0, r3
 8005814:	f000 facb 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 8005818:	e00c      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4619      	mov	r1, r3
 8005824:	4610      	mov	r0, r2
 8005826:	f000 fac2 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 800582a:	e003      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
      break;
 8005830:	e000      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005844:	7bfb      	ldrb	r3, [r7, #15]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a40      	ldr	r2, [pc, #256]	; (8005964 <TIM_Base_SetConfig+0x114>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d013      	beq.n	8005890 <TIM_Base_SetConfig+0x40>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586e:	d00f      	beq.n	8005890 <TIM_Base_SetConfig+0x40>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a3d      	ldr	r2, [pc, #244]	; (8005968 <TIM_Base_SetConfig+0x118>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00b      	beq.n	8005890 <TIM_Base_SetConfig+0x40>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a3c      	ldr	r2, [pc, #240]	; (800596c <TIM_Base_SetConfig+0x11c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d007      	beq.n	8005890 <TIM_Base_SetConfig+0x40>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a3b      	ldr	r2, [pc, #236]	; (8005970 <TIM_Base_SetConfig+0x120>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d003      	beq.n	8005890 <TIM_Base_SetConfig+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a3a      	ldr	r2, [pc, #232]	; (8005974 <TIM_Base_SetConfig+0x124>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d108      	bne.n	80058a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2f      	ldr	r2, [pc, #188]	; (8005964 <TIM_Base_SetConfig+0x114>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d02b      	beq.n	8005902 <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b0:	d027      	beq.n	8005902 <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a2c      	ldr	r2, [pc, #176]	; (8005968 <TIM_Base_SetConfig+0x118>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d023      	beq.n	8005902 <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2b      	ldr	r2, [pc, #172]	; (800596c <TIM_Base_SetConfig+0x11c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d01f      	beq.n	8005902 <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2a      	ldr	r2, [pc, #168]	; (8005970 <TIM_Base_SetConfig+0x120>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01b      	beq.n	8005902 <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a29      	ldr	r2, [pc, #164]	; (8005974 <TIM_Base_SetConfig+0x124>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d017      	beq.n	8005902 <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a28      	ldr	r2, [pc, #160]	; (8005978 <TIM_Base_SetConfig+0x128>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d013      	beq.n	8005902 <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a27      	ldr	r2, [pc, #156]	; (800597c <TIM_Base_SetConfig+0x12c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00f      	beq.n	8005902 <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a26      	ldr	r2, [pc, #152]	; (8005980 <TIM_Base_SetConfig+0x130>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00b      	beq.n	8005902 <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a25      	ldr	r2, [pc, #148]	; (8005984 <TIM_Base_SetConfig+0x134>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d007      	beq.n	8005902 <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a24      	ldr	r2, [pc, #144]	; (8005988 <TIM_Base_SetConfig+0x138>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d003      	beq.n	8005902 <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a23      	ldr	r2, [pc, #140]	; (800598c <TIM_Base_SetConfig+0x13c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d108      	bne.n	8005914 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4313      	orrs	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a0a      	ldr	r2, [pc, #40]	; (8005964 <TIM_Base_SetConfig+0x114>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d003      	beq.n	8005948 <TIM_Base_SetConfig+0xf8>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a0c      	ldr	r2, [pc, #48]	; (8005974 <TIM_Base_SetConfig+0x124>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d103      	bne.n	8005950 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	615a      	str	r2, [r3, #20]
}
 8005956:	bf00      	nop
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40010000 	.word	0x40010000
 8005968:	40000400 	.word	0x40000400
 800596c:	40000800 	.word	0x40000800
 8005970:	40000c00 	.word	0x40000c00
 8005974:	40010400 	.word	0x40010400
 8005978:	40014000 	.word	0x40014000
 800597c:	40014400 	.word	0x40014400
 8005980:	40014800 	.word	0x40014800
 8005984:	40001800 	.word	0x40001800
 8005988:	40001c00 	.word	0x40001c00
 800598c:	40002000 	.word	0x40002000

08005990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	f023 0201 	bic.w	r2, r3, #1
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0303 	bic.w	r3, r3, #3
 80059c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f023 0302 	bic.w	r3, r3, #2
 80059d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a20      	ldr	r2, [pc, #128]	; (8005a68 <TIM_OC1_SetConfig+0xd8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d003      	beq.n	80059f4 <TIM_OC1_SetConfig+0x64>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a1f      	ldr	r2, [pc, #124]	; (8005a6c <TIM_OC1_SetConfig+0xdc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d10c      	bne.n	8005a0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f023 0308 	bic.w	r3, r3, #8
 80059fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f023 0304 	bic.w	r3, r3, #4
 8005a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a15      	ldr	r2, [pc, #84]	; (8005a68 <TIM_OC1_SetConfig+0xd8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d003      	beq.n	8005a1e <TIM_OC1_SetConfig+0x8e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a14      	ldr	r2, [pc, #80]	; (8005a6c <TIM_OC1_SetConfig+0xdc>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d111      	bne.n	8005a42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	621a      	str	r2, [r3, #32]
}
 8005a5c:	bf00      	nop
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	40010000 	.word	0x40010000
 8005a6c:	40010400 	.word	0x40010400

08005a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f023 0210 	bic.w	r2, r3, #16
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f023 0320 	bic.w	r3, r3, #32
 8005aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a22      	ldr	r2, [pc, #136]	; (8005b54 <TIM_OC2_SetConfig+0xe4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d003      	beq.n	8005ad8 <TIM_OC2_SetConfig+0x68>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a21      	ldr	r2, [pc, #132]	; (8005b58 <TIM_OC2_SetConfig+0xe8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d10d      	bne.n	8005af4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005af2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a17      	ldr	r2, [pc, #92]	; (8005b54 <TIM_OC2_SetConfig+0xe4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d003      	beq.n	8005b04 <TIM_OC2_SetConfig+0x94>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a16      	ldr	r2, [pc, #88]	; (8005b58 <TIM_OC2_SetConfig+0xe8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d113      	bne.n	8005b2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40010000 	.word	0x40010000
 8005b58:	40010400 	.word	0x40010400

08005b5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0303 	bic.w	r3, r3, #3
 8005b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a21      	ldr	r2, [pc, #132]	; (8005c3c <TIM_OC3_SetConfig+0xe0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d003      	beq.n	8005bc2 <TIM_OC3_SetConfig+0x66>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a20      	ldr	r2, [pc, #128]	; (8005c40 <TIM_OC3_SetConfig+0xe4>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d10d      	bne.n	8005bde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	021b      	lsls	r3, r3, #8
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a16      	ldr	r2, [pc, #88]	; (8005c3c <TIM_OC3_SetConfig+0xe0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d003      	beq.n	8005bee <TIM_OC3_SetConfig+0x92>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a15      	ldr	r2, [pc, #84]	; (8005c40 <TIM_OC3_SetConfig+0xe4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d113      	bne.n	8005c16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	621a      	str	r2, [r3, #32]
}
 8005c30:	bf00      	nop
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	40010000 	.word	0x40010000
 8005c40:	40010400 	.word	0x40010400

08005c44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	031b      	lsls	r3, r3, #12
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a12      	ldr	r2, [pc, #72]	; (8005ce8 <TIM_OC4_SetConfig+0xa4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d003      	beq.n	8005cac <TIM_OC4_SetConfig+0x68>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a11      	ldr	r2, [pc, #68]	; (8005cec <TIM_OC4_SetConfig+0xa8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d109      	bne.n	8005cc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	019b      	lsls	r3, r3, #6
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	621a      	str	r2, [r3, #32]
}
 8005cda:	bf00      	nop
 8005cdc:	371c      	adds	r7, #28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	40010000 	.word	0x40010000
 8005cec:	40010400 	.word	0x40010400

08005cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	f023 0201 	bic.w	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f023 030a 	bic.w	r3, r3, #10
 8005d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	621a      	str	r2, [r3, #32]
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b087      	sub	sp, #28
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	60f8      	str	r0, [r7, #12]
 8005d56:	60b9      	str	r1, [r7, #8]
 8005d58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	f023 0210 	bic.w	r2, r3, #16
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	031b      	lsls	r3, r3, #12
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	621a      	str	r2, [r3, #32]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b085      	sub	sp, #20
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	f043 0307 	orr.w	r3, r3, #7
 8005dd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	609a      	str	r2, [r3, #8]
}
 8005dd8:	bf00      	nop
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	021a      	lsls	r2, r3, #8
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	431a      	orrs	r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	609a      	str	r2, [r3, #8]
}
 8005e18:	bf00      	nop
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f003 031f 	and.w	r3, r3, #31
 8005e36:	2201      	movs	r2, #1
 8005e38:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a1a      	ldr	r2, [r3, #32]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	43db      	mvns	r3, r3
 8005e46:	401a      	ands	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a1a      	ldr	r2, [r3, #32]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f003 031f 	and.w	r3, r3, #31
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	fa01 f303 	lsl.w	r3, r1, r3
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	621a      	str	r2, [r3, #32]
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
	...

08005e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e05a      	b.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a21      	ldr	r2, [pc, #132]	; (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d022      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed4:	d01d      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1d      	ldr	r2, [pc, #116]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d018      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a1b      	ldr	r2, [pc, #108]	; (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d013      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1a      	ldr	r2, [pc, #104]	; (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00e      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a18      	ldr	r2, [pc, #96]	; (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d009      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a17      	ldr	r2, [pc, #92]	; (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d004      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a15      	ldr	r2, [pc, #84]	; (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d10c      	bne.n	8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40000c00 	.word	0x40000c00
 8005f5c:	40010400 	.word	0x40010400
 8005f60:	40014000 	.word	0x40014000
 8005f64:	40001800 	.word	0x40001800

08005f68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e03f      	b.n	8005ffa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fb fff2 	bl	8001f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2224      	movs	r2, #36	; 0x24
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005faa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fe1d 	bl	8006bec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	695a      	ldr	r2, [r3, #20]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fe0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b08a      	sub	sp, #40	; 0x28
 8006006:	af02      	add	r7, sp, #8
 8006008:	60f8      	str	r0, [r7, #12]
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	603b      	str	r3, [r7, #0]
 800600e:	4613      	mov	r3, r2
 8006010:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b20      	cmp	r3, #32
 8006020:	d17c      	bne.n	800611c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <HAL_UART_Transmit+0x2c>
 8006028:	88fb      	ldrh	r3, [r7, #6]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e075      	b.n	800611e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006038:	2b01      	cmp	r3, #1
 800603a:	d101      	bne.n	8006040 <HAL_UART_Transmit+0x3e>
 800603c:	2302      	movs	r3, #2
 800603e:	e06e      	b.n	800611e <HAL_UART_Transmit+0x11c>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2221      	movs	r2, #33	; 0x21
 8006052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006056:	f7fc f9e3 	bl	8002420 <HAL_GetTick>
 800605a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	88fa      	ldrh	r2, [r7, #6]
 8006060:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	88fa      	ldrh	r2, [r7, #6]
 8006066:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006070:	d108      	bne.n	8006084 <HAL_UART_Transmit+0x82>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d104      	bne.n	8006084 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800607a:	2300      	movs	r3, #0
 800607c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	61bb      	str	r3, [r7, #24]
 8006082:	e003      	b.n	800608c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006088:	2300      	movs	r3, #0
 800608a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006094:	e02a      	b.n	80060ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2200      	movs	r2, #0
 800609e:	2180      	movs	r1, #128	; 0x80
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 fb9b 	bl	80067dc <UART_WaitOnFlagUntilTimeout>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e036      	b.n	800611e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10b      	bne.n	80060ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	3302      	adds	r3, #2
 80060ca:	61bb      	str	r3, [r7, #24]
 80060cc:	e007      	b.n	80060de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	781a      	ldrb	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	3301      	adds	r3, #1
 80060dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1cf      	bne.n	8006096 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2200      	movs	r2, #0
 80060fe:	2140      	movs	r1, #64	; 0x40
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 fb6b 	bl	80067dc <UART_WaitOnFlagUntilTimeout>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e006      	b.n	800611e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	e000      	b.n	800611e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800611c:	2302      	movs	r3, #2
  }
}
 800611e:	4618      	mov	r0, r3
 8006120:	3720      	adds	r7, #32
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b08a      	sub	sp, #40	; 0x28
 800612a:	af02      	add	r7, sp, #8
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	603b      	str	r3, [r7, #0]
 8006132:	4613      	mov	r3, r2
 8006134:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b20      	cmp	r3, #32
 8006144:	f040 808c 	bne.w	8006260 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <HAL_UART_Receive+0x2e>
 800614e:	88fb      	ldrh	r3, [r7, #6]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e084      	b.n	8006262 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800615e:	2b01      	cmp	r3, #1
 8006160:	d101      	bne.n	8006166 <HAL_UART_Receive+0x40>
 8006162:	2302      	movs	r3, #2
 8006164:	e07d      	b.n	8006262 <HAL_UART_Receive+0x13c>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2222      	movs	r2, #34	; 0x22
 8006178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006182:	f7fc f94d 	bl	8002420 <HAL_GetTick>
 8006186:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	88fa      	ldrh	r2, [r7, #6]
 800618c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	88fa      	ldrh	r2, [r7, #6]
 8006192:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800619c:	d108      	bne.n	80061b0 <HAL_UART_Receive+0x8a>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d104      	bne.n	80061b0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	e003      	b.n	80061b8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061b4:	2300      	movs	r3, #0
 80061b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80061c0:	e043      	b.n	800624a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2200      	movs	r2, #0
 80061ca:	2120      	movs	r1, #32
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 fb05 	bl	80067dc <UART_WaitOnFlagUntilTimeout>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e042      	b.n	8006262 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10c      	bne.n	80061fc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	3302      	adds	r3, #2
 80061f8:	61bb      	str	r3, [r7, #24]
 80061fa:	e01f      	b.n	800623c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006204:	d007      	beq.n	8006216 <HAL_UART_Receive+0xf0>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10a      	bne.n	8006224 <HAL_UART_Receive+0xfe>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d106      	bne.n	8006224 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	b2da      	uxtb	r2, r3
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	e008      	b.n	8006236 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006230:	b2da      	uxtb	r2, r3
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	3301      	adds	r3, #1
 800623a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006240:	b29b      	uxth	r3, r3
 8006242:	3b01      	subs	r3, #1
 8006244:	b29a      	uxth	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800624e:	b29b      	uxth	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1b6      	bne.n	80061c2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2220      	movs	r2, #32
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	e000      	b.n	8006262 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006260:	2302      	movs	r3, #2
  }
}
 8006262:	4618      	mov	r0, r3
 8006264:	3720      	adds	r7, #32
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b0ba      	sub	sp, #232	; 0xe8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006292:	2300      	movs	r3, #0
 8006294:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006298:	2300      	movs	r3, #0
 800629a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800629e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80062aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10f      	bne.n	80062d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b6:	f003 0320 	and.w	r3, r3, #32
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d009      	beq.n	80062d2 <HAL_UART_IRQHandler+0x66>
 80062be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c2:	f003 0320 	and.w	r3, r3, #32
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fbd3 	bl	8006a76 <UART_Receive_IT>
      return;
 80062d0:	e256      	b.n	8006780 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 80de 	beq.w	8006498 <HAL_UART_IRQHandler+0x22c>
 80062dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d106      	bne.n	80062f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 80d1 	beq.w	8006498 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00b      	beq.n	800631a <HAL_UART_IRQHandler+0xae>
 8006302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630a:	2b00      	cmp	r3, #0
 800630c:	d005      	beq.n	800631a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006312:	f043 0201 	orr.w	r2, r3, #1
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800631a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800631e:	f003 0304 	and.w	r3, r3, #4
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00b      	beq.n	800633e <HAL_UART_IRQHandler+0xd2>
 8006326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d005      	beq.n	800633e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	f043 0202 	orr.w	r2, r3, #2
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800633e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00b      	beq.n	8006362 <HAL_UART_IRQHandler+0xf6>
 800634a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d005      	beq.n	8006362 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	f043 0204 	orr.w	r2, r3, #4
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006366:	f003 0308 	and.w	r3, r3, #8
 800636a:	2b00      	cmp	r3, #0
 800636c:	d011      	beq.n	8006392 <HAL_UART_IRQHandler+0x126>
 800636e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006372:	f003 0320 	and.w	r3, r3, #32
 8006376:	2b00      	cmp	r3, #0
 8006378:	d105      	bne.n	8006386 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800637a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d005      	beq.n	8006392 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	f043 0208 	orr.w	r2, r3, #8
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 81ed 	beq.w	8006776 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800639c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a0:	f003 0320 	and.w	r3, r3, #32
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d008      	beq.n	80063ba <HAL_UART_IRQHandler+0x14e>
 80063a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ac:	f003 0320 	and.w	r3, r3, #32
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fb5e 	bl	8006a76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c4:	2b40      	cmp	r3, #64	; 0x40
 80063c6:	bf0c      	ite	eq
 80063c8:	2301      	moveq	r3, #1
 80063ca:	2300      	movne	r3, #0
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d103      	bne.n	80063e6 <HAL_UART_IRQHandler+0x17a>
 80063de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d04f      	beq.n	8006486 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fa66 	bl	80068b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f6:	2b40      	cmp	r3, #64	; 0x40
 80063f8:	d141      	bne.n	800647e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3314      	adds	r3, #20
 8006400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006408:	e853 3f00 	ldrex	r3, [r3]
 800640c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006410:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006418:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3314      	adds	r3, #20
 8006422:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006426:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800642a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006432:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800643e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1d9      	bne.n	80063fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644a:	2b00      	cmp	r3, #0
 800644c:	d013      	beq.n	8006476 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	4a7d      	ldr	r2, [pc, #500]	; (8006648 <HAL_UART_IRQHandler+0x3dc>)
 8006454:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645a:	4618      	mov	r0, r3
 800645c:	f7fc ff85 	bl	800336a <HAL_DMA_Abort_IT>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d016      	beq.n	8006494 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006470:	4610      	mov	r0, r2
 8006472:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006474:	e00e      	b.n	8006494 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f99a 	bl	80067b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800647c:	e00a      	b.n	8006494 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f996 	bl	80067b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006484:	e006      	b.n	8006494 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f992 	bl	80067b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006492:	e170      	b.n	8006776 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006494:	bf00      	nop
    return;
 8006496:	e16e      	b.n	8006776 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649c:	2b01      	cmp	r3, #1
 800649e:	f040 814a 	bne.w	8006736 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a6:	f003 0310 	and.w	r3, r3, #16
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 8143 	beq.w	8006736 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80064b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b4:	f003 0310 	and.w	r3, r3, #16
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 813c 	beq.w	8006736 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064be:	2300      	movs	r3, #0
 80064c0:	60bb      	str	r3, [r7, #8]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	60bb      	str	r3, [r7, #8]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	60bb      	str	r3, [r7, #8]
 80064d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064de:	2b40      	cmp	r3, #64	; 0x40
 80064e0:	f040 80b4 	bne.w	800664c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 8140 	beq.w	800677a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006502:	429a      	cmp	r2, r3
 8006504:	f080 8139 	bcs.w	800677a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800650e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800651a:	f000 8088 	beq.w	800662e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	330c      	adds	r3, #12
 8006524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006528:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800653c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	330c      	adds	r3, #12
 8006546:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800654a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800654e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006552:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006556:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800655a:	e841 2300 	strex	r3, r2, [r1]
 800655e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1d9      	bne.n	800651e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3314      	adds	r3, #20
 8006570:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006574:	e853 3f00 	ldrex	r3, [r3]
 8006578:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800657a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800657c:	f023 0301 	bic.w	r3, r3, #1
 8006580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3314      	adds	r3, #20
 800658a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800658e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006592:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006594:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006596:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e1      	bne.n	800656a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3314      	adds	r3, #20
 80065ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3314      	adds	r3, #20
 80065c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065d2:	e841 2300 	strex	r3, r2, [r1]
 80065d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1e3      	bne.n	80065a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	330c      	adds	r3, #12
 80065f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f6:	e853 3f00 	ldrex	r3, [r3]
 80065fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065fe:	f023 0310 	bic.w	r3, r3, #16
 8006602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	330c      	adds	r3, #12
 800660c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006610:	65ba      	str	r2, [r7, #88]	; 0x58
 8006612:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006616:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006618:	e841 2300 	strex	r3, r2, [r1]
 800661c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800661e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e3      	bne.n	80065ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006628:	4618      	mov	r0, r3
 800662a:	f7fc fe2e 	bl	800328a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006636:	b29b      	uxth	r3, r3
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	b29b      	uxth	r3, r3
 800663c:	4619      	mov	r1, r3
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f8c0 	bl	80067c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006644:	e099      	b.n	800677a <HAL_UART_IRQHandler+0x50e>
 8006646:	bf00      	nop
 8006648:	0800697f 	.word	0x0800697f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006654:	b29b      	uxth	r3, r3
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006660:	b29b      	uxth	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 808b 	beq.w	800677e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8086 	beq.w	800677e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	330c      	adds	r3, #12
 8006678:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667c:	e853 3f00 	ldrex	r3, [r3]
 8006680:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006684:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006688:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	330c      	adds	r3, #12
 8006692:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006696:	647a      	str	r2, [r7, #68]	; 0x44
 8006698:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800669c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e3      	bne.n	8006672 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3314      	adds	r3, #20
 80066b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	e853 3f00 	ldrex	r3, [r3]
 80066b8:	623b      	str	r3, [r7, #32]
   return(result);
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	f023 0301 	bic.w	r3, r3, #1
 80066c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3314      	adds	r3, #20
 80066ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066ce:	633a      	str	r2, [r7, #48]	; 0x30
 80066d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e3      	bne.n	80066aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	330c      	adds	r3, #12
 80066f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	e853 3f00 	ldrex	r3, [r3]
 80066fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f023 0310 	bic.w	r3, r3, #16
 8006706:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	330c      	adds	r3, #12
 8006710:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006714:	61fa      	str	r2, [r7, #28]
 8006716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006718:	69b9      	ldr	r1, [r7, #24]
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	e841 2300 	strex	r3, r2, [r1]
 8006720:	617b      	str	r3, [r7, #20]
   return(result);
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1e3      	bne.n	80066f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f848 	bl	80067c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006734:	e023      	b.n	800677e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673e:	2b00      	cmp	r3, #0
 8006740:	d009      	beq.n	8006756 <HAL_UART_IRQHandler+0x4ea>
 8006742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f929 	bl	80069a6 <UART_Transmit_IT>
    return;
 8006754:	e014      	b.n	8006780 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00e      	beq.n	8006780 <HAL_UART_IRQHandler+0x514>
 8006762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676a:	2b00      	cmp	r3, #0
 800676c:	d008      	beq.n	8006780 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f969 	bl	8006a46 <UART_EndTransmit_IT>
    return;
 8006774:	e004      	b.n	8006780 <HAL_UART_IRQHandler+0x514>
    return;
 8006776:	bf00      	nop
 8006778:	e002      	b.n	8006780 <HAL_UART_IRQHandler+0x514>
      return;
 800677a:	bf00      	nop
 800677c:	e000      	b.n	8006780 <HAL_UART_IRQHandler+0x514>
      return;
 800677e:	bf00      	nop
  }
}
 8006780:	37e8      	adds	r7, #232	; 0xe8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop

08006788 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b090      	sub	sp, #64	; 0x40
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	4613      	mov	r3, r2
 80067ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ec:	e050      	b.n	8006890 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f4:	d04c      	beq.n	8006890 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d007      	beq.n	800680c <UART_WaitOnFlagUntilTimeout+0x30>
 80067fc:	f7fb fe10 	bl	8002420 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006808:	429a      	cmp	r2, r3
 800680a:	d241      	bcs.n	8006890 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800682c:	637a      	str	r2, [r7, #52]	; 0x34
 800682e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800683a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e5      	bne.n	800680c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3314      	adds	r3, #20
 8006846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	e853 3f00 	ldrex	r3, [r3]
 800684e:	613b      	str	r3, [r7, #16]
   return(result);
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f023 0301 	bic.w	r3, r3, #1
 8006856:	63bb      	str	r3, [r7, #56]	; 0x38
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3314      	adds	r3, #20
 800685e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006860:	623a      	str	r2, [r7, #32]
 8006862:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006864:	69f9      	ldr	r1, [r7, #28]
 8006866:	6a3a      	ldr	r2, [r7, #32]
 8006868:	e841 2300 	strex	r3, r2, [r1]
 800686c:	61bb      	str	r3, [r7, #24]
   return(result);
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1e5      	bne.n	8006840 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e00f      	b.n	80068b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	4013      	ands	r3, r2
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	429a      	cmp	r2, r3
 800689e:	bf0c      	ite	eq
 80068a0:	2301      	moveq	r3, #1
 80068a2:	2300      	movne	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	461a      	mov	r2, r3
 80068a8:	79fb      	ldrb	r3, [r7, #7]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d09f      	beq.n	80067ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3740      	adds	r7, #64	; 0x40
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b095      	sub	sp, #84	; 0x54
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	330c      	adds	r3, #12
 80068c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ca:	e853 3f00 	ldrex	r3, [r3]
 80068ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	330c      	adds	r3, #12
 80068de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068e0:	643a      	str	r2, [r7, #64]	; 0x40
 80068e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068e8:	e841 2300 	strex	r3, r2, [r1]
 80068ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1e5      	bne.n	80068c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	3314      	adds	r3, #20
 80068fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	e853 3f00 	ldrex	r3, [r3]
 8006902:	61fb      	str	r3, [r7, #28]
   return(result);
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	f023 0301 	bic.w	r3, r3, #1
 800690a:	64bb      	str	r3, [r7, #72]	; 0x48
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3314      	adds	r3, #20
 8006912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006914:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800691a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e5      	bne.n	80068f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692c:	2b01      	cmp	r3, #1
 800692e:	d119      	bne.n	8006964 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	330c      	adds	r3, #12
 8006936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f023 0310 	bic.w	r3, r3, #16
 8006946:	647b      	str	r3, [r7, #68]	; 0x44
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	330c      	adds	r3, #12
 800694e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006950:	61ba      	str	r2, [r7, #24]
 8006952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	6979      	ldr	r1, [r7, #20]
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	613b      	str	r3, [r7, #16]
   return(result);
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e5      	bne.n	8006930 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2220      	movs	r2, #32
 8006968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006972:	bf00      	nop
 8006974:	3754      	adds	r7, #84	; 0x54
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f7ff ff09 	bl	80067b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800699e:	bf00      	nop
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b085      	sub	sp, #20
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b21      	cmp	r3, #33	; 0x21
 80069b8:	d13e      	bne.n	8006a38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c2:	d114      	bne.n	80069ee <UART_Transmit_IT+0x48>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d110      	bne.n	80069ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	1c9a      	adds	r2, r3, #2
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	621a      	str	r2, [r3, #32]
 80069ec:	e008      	b.n	8006a00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	1c59      	adds	r1, r3, #1
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	6211      	str	r1, [r2, #32]
 80069f8:	781a      	ldrb	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10f      	bne.n	8006a34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a34:	2300      	movs	r3, #0
 8006a36:	e000      	b.n	8006a3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a38:	2302      	movs	r3, #2
  }
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff fe8e 	bl	8006788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b08c      	sub	sp, #48	; 0x30
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b22      	cmp	r3, #34	; 0x22
 8006a88:	f040 80ab 	bne.w	8006be2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a94:	d117      	bne.n	8006ac6 <UART_Receive_IT+0x50>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d113      	bne.n	8006ac6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abe:	1c9a      	adds	r2, r3, #2
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	629a      	str	r2, [r3, #40]	; 0x28
 8006ac4:	e026      	b.n	8006b14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006acc:	2300      	movs	r3, #0
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad8:	d007      	beq.n	8006aea <UART_Receive_IT+0x74>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <UART_Receive_IT+0x82>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d106      	bne.n	8006af8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	e008      	b.n	8006b0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	4619      	mov	r1, r3
 8006b22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d15a      	bne.n	8006bde <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f022 0220 	bic.w	r2, r2, #32
 8006b36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695a      	ldr	r2, [r3, #20]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0201 	bic.w	r2, r2, #1
 8006b56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d135      	bne.n	8006bd4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	330c      	adds	r3, #12
 8006b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f023 0310 	bic.w	r3, r3, #16
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	330c      	adds	r3, #12
 8006b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b8e:	623a      	str	r2, [r7, #32]
 8006b90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b92:	69f9      	ldr	r1, [r7, #28]
 8006b94:	6a3a      	ldr	r2, [r7, #32]
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e5      	bne.n	8006b6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0310 	and.w	r3, r3, #16
 8006bac:	2b10      	cmp	r3, #16
 8006bae:	d10a      	bne.n	8006bc6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	60fb      	str	r3, [r7, #12]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7ff fdf9 	bl	80067c4 <HAL_UARTEx_RxEventCallback>
 8006bd2:	e002      	b.n	8006bda <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff fde1 	bl	800679c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	e002      	b.n	8006be4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	e000      	b.n	8006be4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006be2:	2302      	movs	r3, #2
  }
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3730      	adds	r7, #48	; 0x30
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bf0:	b0c0      	sub	sp, #256	; 0x100
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c08:	68d9      	ldr	r1, [r3, #12]
 8006c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	ea40 0301 	orr.w	r3, r0, r1
 8006c14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	431a      	orrs	r2, r3
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c44:	f021 010c 	bic.w	r1, r1, #12
 8006c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c52:	430b      	orrs	r3, r1
 8006c54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c66:	6999      	ldr	r1, [r3, #24]
 8006c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	ea40 0301 	orr.w	r3, r0, r1
 8006c72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	4b8f      	ldr	r3, [pc, #572]	; (8006eb8 <UART_SetConfig+0x2cc>)
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d005      	beq.n	8006c8c <UART_SetConfig+0xa0>
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	4b8d      	ldr	r3, [pc, #564]	; (8006ebc <UART_SetConfig+0x2d0>)
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d104      	bne.n	8006c96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c8c:	f7fe fad2 	bl	8005234 <HAL_RCC_GetPCLK2Freq>
 8006c90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c94:	e003      	b.n	8006c9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c96:	f7fe fab9 	bl	800520c <HAL_RCC_GetPCLK1Freq>
 8006c9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ca8:	f040 810c 	bne.w	8006ec4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006cba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006cbe:	4622      	mov	r2, r4
 8006cc0:	462b      	mov	r3, r5
 8006cc2:	1891      	adds	r1, r2, r2
 8006cc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8006cc6:	415b      	adcs	r3, r3
 8006cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006cce:	4621      	mov	r1, r4
 8006cd0:	eb12 0801 	adds.w	r8, r2, r1
 8006cd4:	4629      	mov	r1, r5
 8006cd6:	eb43 0901 	adc.w	r9, r3, r1
 8006cda:	f04f 0200 	mov.w	r2, #0
 8006cde:	f04f 0300 	mov.w	r3, #0
 8006ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cee:	4690      	mov	r8, r2
 8006cf0:	4699      	mov	r9, r3
 8006cf2:	4623      	mov	r3, r4
 8006cf4:	eb18 0303 	adds.w	r3, r8, r3
 8006cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cfc:	462b      	mov	r3, r5
 8006cfe:	eb49 0303 	adc.w	r3, r9, r3
 8006d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	18db      	adds	r3, r3, r3
 8006d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d20:	4613      	mov	r3, r2
 8006d22:	eb42 0303 	adc.w	r3, r2, r3
 8006d26:	657b      	str	r3, [r7, #84]	; 0x54
 8006d28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d30:	f7f9 ffaa 	bl	8000c88 <__aeabi_uldivmod>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4b61      	ldr	r3, [pc, #388]	; (8006ec0 <UART_SetConfig+0x2d4>)
 8006d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d3e:	095b      	lsrs	r3, r3, #5
 8006d40:	011c      	lsls	r4, r3, #4
 8006d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d46:	2200      	movs	r2, #0
 8006d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d54:	4642      	mov	r2, r8
 8006d56:	464b      	mov	r3, r9
 8006d58:	1891      	adds	r1, r2, r2
 8006d5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d5c:	415b      	adcs	r3, r3
 8006d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d64:	4641      	mov	r1, r8
 8006d66:	eb12 0a01 	adds.w	sl, r2, r1
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	eb43 0b01 	adc.w	fp, r3, r1
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d84:	4692      	mov	sl, r2
 8006d86:	469b      	mov	fp, r3
 8006d88:	4643      	mov	r3, r8
 8006d8a:	eb1a 0303 	adds.w	r3, sl, r3
 8006d8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d92:	464b      	mov	r3, r9
 8006d94:	eb4b 0303 	adc.w	r3, fp, r3
 8006d98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006da8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006dac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006db0:	460b      	mov	r3, r1
 8006db2:	18db      	adds	r3, r3, r3
 8006db4:	643b      	str	r3, [r7, #64]	; 0x40
 8006db6:	4613      	mov	r3, r2
 8006db8:	eb42 0303 	adc.w	r3, r2, r3
 8006dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8006dbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006dc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006dc6:	f7f9 ff5f 	bl	8000c88 <__aeabi_uldivmod>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4611      	mov	r1, r2
 8006dd0:	4b3b      	ldr	r3, [pc, #236]	; (8006ec0 <UART_SetConfig+0x2d4>)
 8006dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8006dd6:	095b      	lsrs	r3, r3, #5
 8006dd8:	2264      	movs	r2, #100	; 0x64
 8006dda:	fb02 f303 	mul.w	r3, r2, r3
 8006dde:	1acb      	subs	r3, r1, r3
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006de6:	4b36      	ldr	r3, [pc, #216]	; (8006ec0 <UART_SetConfig+0x2d4>)
 8006de8:	fba3 2302 	umull	r2, r3, r3, r2
 8006dec:	095b      	lsrs	r3, r3, #5
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006df4:	441c      	add	r4, r3
 8006df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e08:	4642      	mov	r2, r8
 8006e0a:	464b      	mov	r3, r9
 8006e0c:	1891      	adds	r1, r2, r2
 8006e0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e10:	415b      	adcs	r3, r3
 8006e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e18:	4641      	mov	r1, r8
 8006e1a:	1851      	adds	r1, r2, r1
 8006e1c:	6339      	str	r1, [r7, #48]	; 0x30
 8006e1e:	4649      	mov	r1, r9
 8006e20:	414b      	adcs	r3, r1
 8006e22:	637b      	str	r3, [r7, #52]	; 0x34
 8006e24:	f04f 0200 	mov.w	r2, #0
 8006e28:	f04f 0300 	mov.w	r3, #0
 8006e2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e30:	4659      	mov	r1, fp
 8006e32:	00cb      	lsls	r3, r1, #3
 8006e34:	4651      	mov	r1, sl
 8006e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e3a:	4651      	mov	r1, sl
 8006e3c:	00ca      	lsls	r2, r1, #3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	4619      	mov	r1, r3
 8006e42:	4603      	mov	r3, r0
 8006e44:	4642      	mov	r2, r8
 8006e46:	189b      	adds	r3, r3, r2
 8006e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e4c:	464b      	mov	r3, r9
 8006e4e:	460a      	mov	r2, r1
 8006e50:	eb42 0303 	adc.w	r3, r2, r3
 8006e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	18db      	adds	r3, r3, r3
 8006e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e72:	4613      	mov	r3, r2
 8006e74:	eb42 0303 	adc.w	r3, r2, r3
 8006e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e82:	f7f9 ff01 	bl	8000c88 <__aeabi_uldivmod>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <UART_SetConfig+0x2d4>)
 8006e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e90:	095b      	lsrs	r3, r3, #5
 8006e92:	2164      	movs	r1, #100	; 0x64
 8006e94:	fb01 f303 	mul.w	r3, r1, r3
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	3332      	adds	r3, #50	; 0x32
 8006e9e:	4a08      	ldr	r2, [pc, #32]	; (8006ec0 <UART_SetConfig+0x2d4>)
 8006ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea4:	095b      	lsrs	r3, r3, #5
 8006ea6:	f003 0207 	and.w	r2, r3, #7
 8006eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4422      	add	r2, r4
 8006eb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006eb4:	e105      	b.n	80070c2 <UART_SetConfig+0x4d6>
 8006eb6:	bf00      	nop
 8006eb8:	40011000 	.word	0x40011000
 8006ebc:	40011400 	.word	0x40011400
 8006ec0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ece:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ed2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ed6:	4642      	mov	r2, r8
 8006ed8:	464b      	mov	r3, r9
 8006eda:	1891      	adds	r1, r2, r2
 8006edc:	6239      	str	r1, [r7, #32]
 8006ede:	415b      	adcs	r3, r3
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ee6:	4641      	mov	r1, r8
 8006ee8:	1854      	adds	r4, r2, r1
 8006eea:	4649      	mov	r1, r9
 8006eec:	eb43 0501 	adc.w	r5, r3, r1
 8006ef0:	f04f 0200 	mov.w	r2, #0
 8006ef4:	f04f 0300 	mov.w	r3, #0
 8006ef8:	00eb      	lsls	r3, r5, #3
 8006efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006efe:	00e2      	lsls	r2, r4, #3
 8006f00:	4614      	mov	r4, r2
 8006f02:	461d      	mov	r5, r3
 8006f04:	4643      	mov	r3, r8
 8006f06:	18e3      	adds	r3, r4, r3
 8006f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f0c:	464b      	mov	r3, r9
 8006f0e:	eb45 0303 	adc.w	r3, r5, r3
 8006f12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f26:	f04f 0200 	mov.w	r2, #0
 8006f2a:	f04f 0300 	mov.w	r3, #0
 8006f2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f32:	4629      	mov	r1, r5
 8006f34:	008b      	lsls	r3, r1, #2
 8006f36:	4621      	mov	r1, r4
 8006f38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	008a      	lsls	r2, r1, #2
 8006f40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f44:	f7f9 fea0 	bl	8000c88 <__aeabi_uldivmod>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4b60      	ldr	r3, [pc, #384]	; (80070d0 <UART_SetConfig+0x4e4>)
 8006f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f52:	095b      	lsrs	r3, r3, #5
 8006f54:	011c      	lsls	r4, r3, #4
 8006f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f68:	4642      	mov	r2, r8
 8006f6a:	464b      	mov	r3, r9
 8006f6c:	1891      	adds	r1, r2, r2
 8006f6e:	61b9      	str	r1, [r7, #24]
 8006f70:	415b      	adcs	r3, r3
 8006f72:	61fb      	str	r3, [r7, #28]
 8006f74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f78:	4641      	mov	r1, r8
 8006f7a:	1851      	adds	r1, r2, r1
 8006f7c:	6139      	str	r1, [r7, #16]
 8006f7e:	4649      	mov	r1, r9
 8006f80:	414b      	adcs	r3, r1
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	f04f 0300 	mov.w	r3, #0
 8006f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f90:	4659      	mov	r1, fp
 8006f92:	00cb      	lsls	r3, r1, #3
 8006f94:	4651      	mov	r1, sl
 8006f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f9a:	4651      	mov	r1, sl
 8006f9c:	00ca      	lsls	r2, r1, #3
 8006f9e:	4610      	mov	r0, r2
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	4642      	mov	r2, r8
 8006fa6:	189b      	adds	r3, r3, r2
 8006fa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fac:	464b      	mov	r3, r9
 8006fae:	460a      	mov	r2, r1
 8006fb0:	eb42 0303 	adc.w	r3, r2, r3
 8006fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006fc4:	f04f 0200 	mov.w	r2, #0
 8006fc8:	f04f 0300 	mov.w	r3, #0
 8006fcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006fd0:	4649      	mov	r1, r9
 8006fd2:	008b      	lsls	r3, r1, #2
 8006fd4:	4641      	mov	r1, r8
 8006fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fda:	4641      	mov	r1, r8
 8006fdc:	008a      	lsls	r2, r1, #2
 8006fde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006fe2:	f7f9 fe51 	bl	8000c88 <__aeabi_uldivmod>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4b39      	ldr	r3, [pc, #228]	; (80070d0 <UART_SetConfig+0x4e4>)
 8006fec:	fba3 1302 	umull	r1, r3, r3, r2
 8006ff0:	095b      	lsrs	r3, r3, #5
 8006ff2:	2164      	movs	r1, #100	; 0x64
 8006ff4:	fb01 f303 	mul.w	r3, r1, r3
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	011b      	lsls	r3, r3, #4
 8006ffc:	3332      	adds	r3, #50	; 0x32
 8006ffe:	4a34      	ldr	r2, [pc, #208]	; (80070d0 <UART_SetConfig+0x4e4>)
 8007000:	fba2 2303 	umull	r2, r3, r2, r3
 8007004:	095b      	lsrs	r3, r3, #5
 8007006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800700a:	441c      	add	r4, r3
 800700c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007010:	2200      	movs	r2, #0
 8007012:	673b      	str	r3, [r7, #112]	; 0x70
 8007014:	677a      	str	r2, [r7, #116]	; 0x74
 8007016:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800701a:	4642      	mov	r2, r8
 800701c:	464b      	mov	r3, r9
 800701e:	1891      	adds	r1, r2, r2
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	415b      	adcs	r3, r3
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800702a:	4641      	mov	r1, r8
 800702c:	1851      	adds	r1, r2, r1
 800702e:	6039      	str	r1, [r7, #0]
 8007030:	4649      	mov	r1, r9
 8007032:	414b      	adcs	r3, r1
 8007034:	607b      	str	r3, [r7, #4]
 8007036:	f04f 0200 	mov.w	r2, #0
 800703a:	f04f 0300 	mov.w	r3, #0
 800703e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007042:	4659      	mov	r1, fp
 8007044:	00cb      	lsls	r3, r1, #3
 8007046:	4651      	mov	r1, sl
 8007048:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800704c:	4651      	mov	r1, sl
 800704e:	00ca      	lsls	r2, r1, #3
 8007050:	4610      	mov	r0, r2
 8007052:	4619      	mov	r1, r3
 8007054:	4603      	mov	r3, r0
 8007056:	4642      	mov	r2, r8
 8007058:	189b      	adds	r3, r3, r2
 800705a:	66bb      	str	r3, [r7, #104]	; 0x68
 800705c:	464b      	mov	r3, r9
 800705e:	460a      	mov	r2, r1
 8007060:	eb42 0303 	adc.w	r3, r2, r3
 8007064:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	663b      	str	r3, [r7, #96]	; 0x60
 8007070:	667a      	str	r2, [r7, #100]	; 0x64
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	f04f 0300 	mov.w	r3, #0
 800707a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800707e:	4649      	mov	r1, r9
 8007080:	008b      	lsls	r3, r1, #2
 8007082:	4641      	mov	r1, r8
 8007084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007088:	4641      	mov	r1, r8
 800708a:	008a      	lsls	r2, r1, #2
 800708c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007090:	f7f9 fdfa 	bl	8000c88 <__aeabi_uldivmod>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4b0d      	ldr	r3, [pc, #52]	; (80070d0 <UART_SetConfig+0x4e4>)
 800709a:	fba3 1302 	umull	r1, r3, r3, r2
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	2164      	movs	r1, #100	; 0x64
 80070a2:	fb01 f303 	mul.w	r3, r1, r3
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	3332      	adds	r3, #50	; 0x32
 80070ac:	4a08      	ldr	r2, [pc, #32]	; (80070d0 <UART_SetConfig+0x4e4>)
 80070ae:	fba2 2303 	umull	r2, r3, r2, r3
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	f003 020f 	and.w	r2, r3, #15
 80070b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4422      	add	r2, r4
 80070c0:	609a      	str	r2, [r3, #8]
}
 80070c2:	bf00      	nop
 80070c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80070c8:	46bd      	mov	sp, r7
 80070ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ce:	bf00      	nop
 80070d0:	51eb851f 	.word	0x51eb851f

080070d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070d4:	b084      	sub	sp, #16
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	f107 001c 	add.w	r0, r7, #28
 80070e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d122      	bne.n	8007132 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007116:	2b01      	cmp	r3, #1
 8007118:	d105      	bne.n	8007126 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 faa2 	bl	8007670 <USB_CoreReset>
 800712c:	4603      	mov	r3, r0
 800712e:	73fb      	strb	r3, [r7, #15]
 8007130:	e01a      	b.n	8007168 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fa96 	bl	8007670 <USB_CoreReset>
 8007144:	4603      	mov	r3, r0
 8007146:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007152:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	639a      	str	r2, [r3, #56]	; 0x38
 800715a:	e005      	b.n	8007168 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007160:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716a:	2b01      	cmp	r3, #1
 800716c:	d10b      	bne.n	8007186 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f043 0206 	orr.w	r2, r3, #6
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f043 0220 	orr.w	r2, r3, #32
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007186:	7bfb      	ldrb	r3, [r7, #15]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007192:	b004      	add	sp, #16
 8007194:	4770      	bx	lr

08007196 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f023 0201 	bic.w	r2, r3, #1
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	460b      	mov	r3, r1
 80071c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80071d4:	78fb      	ldrb	r3, [r7, #3]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d115      	bne.n	8007206 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80071e6:	2001      	movs	r0, #1
 80071e8:	f7fb f926 	bl	8002438 <HAL_Delay>
      ms++;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	3301      	adds	r3, #1
 80071f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fa2e 	bl	8007654 <USB_GetMode>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d01e      	beq.n	800723c <USB_SetCurrentMode+0x84>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b31      	cmp	r3, #49	; 0x31
 8007202:	d9f0      	bls.n	80071e6 <USB_SetCurrentMode+0x2e>
 8007204:	e01a      	b.n	800723c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007206:	78fb      	ldrb	r3, [r7, #3]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d115      	bne.n	8007238 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007218:	2001      	movs	r0, #1
 800721a:	f7fb f90d 	bl	8002438 <HAL_Delay>
      ms++;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	3301      	adds	r3, #1
 8007222:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fa15 	bl	8007654 <USB_GetMode>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d005      	beq.n	800723c <USB_SetCurrentMode+0x84>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2b31      	cmp	r3, #49	; 0x31
 8007234:	d9f0      	bls.n	8007218 <USB_SetCurrentMode+0x60>
 8007236:	e001      	b.n	800723c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e005      	b.n	8007248 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b32      	cmp	r3, #50	; 0x32
 8007240:	d101      	bne.n	8007246 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e000      	b.n	8007248 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007250:	b084      	sub	sp, #16
 8007252:	b580      	push	{r7, lr}
 8007254:	b086      	sub	sp, #24
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800725e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800726a:	2300      	movs	r3, #0
 800726c:	613b      	str	r3, [r7, #16]
 800726e:	e009      	b.n	8007284 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	3340      	adds	r3, #64	; 0x40
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	2200      	movs	r2, #0
 800727c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	3301      	adds	r3, #1
 8007282:	613b      	str	r3, [r7, #16]
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	2b0e      	cmp	r3, #14
 8007288:	d9f2      	bls.n	8007270 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800728a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800728c:	2b00      	cmp	r3, #0
 800728e:	d11c      	bne.n	80072ca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800729e:	f043 0302 	orr.w	r3, r3, #2
 80072a2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	639a      	str	r2, [r3, #56]	; 0x38
 80072c8:	e00b      	b.n	80072e2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072e8:	461a      	mov	r2, r3
 80072ea:	2300      	movs	r3, #0
 80072ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f4:	4619      	mov	r1, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072fc:	461a      	mov	r2, r3
 80072fe:	680b      	ldr	r3, [r1, #0]
 8007300:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007304:	2b01      	cmp	r3, #1
 8007306:	d10c      	bne.n	8007322 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730a:	2b00      	cmp	r3, #0
 800730c:	d104      	bne.n	8007318 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800730e:	2100      	movs	r1, #0
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f965 	bl	80075e0 <USB_SetDevSpeed>
 8007316:	e008      	b.n	800732a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007318:	2101      	movs	r1, #1
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f960 	bl	80075e0 <USB_SetDevSpeed>
 8007320:	e003      	b.n	800732a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007322:	2103      	movs	r1, #3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f95b 	bl	80075e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800732a:	2110      	movs	r1, #16
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f8f3 	bl	8007518 <USB_FlushTxFifo>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f91f 	bl	8007580 <USB_FlushRxFifo>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007352:	461a      	mov	r2, r3
 8007354:	2300      	movs	r3, #0
 8007356:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735e:	461a      	mov	r2, r3
 8007360:	2300      	movs	r3, #0
 8007362:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800736a:	461a      	mov	r2, r3
 800736c:	2300      	movs	r3, #0
 800736e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007370:	2300      	movs	r3, #0
 8007372:	613b      	str	r3, [r7, #16]
 8007374:	e043      	b.n	80073fe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007388:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800738c:	d118      	bne.n	80073c0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10a      	bne.n	80073aa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a0:	461a      	mov	r2, r3
 80073a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	e013      	b.n	80073d2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b6:	461a      	mov	r2, r3
 80073b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80073bc:	6013      	str	r3, [r2, #0]
 80073be:	e008      	b.n	80073d2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073cc:	461a      	mov	r2, r3
 80073ce:	2300      	movs	r3, #0
 80073d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073de:	461a      	mov	r2, r3
 80073e0:	2300      	movs	r3, #0
 80073e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f0:	461a      	mov	r2, r3
 80073f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	3301      	adds	r3, #1
 80073fc:	613b      	str	r3, [r7, #16]
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	429a      	cmp	r2, r3
 8007404:	d3b7      	bcc.n	8007376 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007406:	2300      	movs	r3, #0
 8007408:	613b      	str	r3, [r7, #16]
 800740a:	e043      	b.n	8007494 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800741e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007422:	d118      	bne.n	8007456 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007436:	461a      	mov	r2, r3
 8007438:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800743c:	6013      	str	r3, [r2, #0]
 800743e:	e013      	b.n	8007468 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744c:	461a      	mov	r2, r3
 800744e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007452:	6013      	str	r3, [r2, #0]
 8007454:	e008      	b.n	8007468 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	4413      	add	r3, r2
 800745e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007462:	461a      	mov	r2, r3
 8007464:	2300      	movs	r3, #0
 8007466:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007474:	461a      	mov	r2, r3
 8007476:	2300      	movs	r3, #0
 8007478:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	4413      	add	r3, r2
 8007482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007486:	461a      	mov	r2, r3
 8007488:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800748c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	3301      	adds	r3, #1
 8007492:	613b      	str	r3, [r7, #16]
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	429a      	cmp	r2, r3
 800749a:	d3b7      	bcc.n	800740c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80074bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d105      	bne.n	80074d0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	f043 0210 	orr.w	r2, r3, #16
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	699a      	ldr	r2, [r3, #24]
 80074d4:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <USB_DevInit+0x2c4>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80074dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d005      	beq.n	80074ee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	f043 0208 	orr.w	r2, r3, #8
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80074ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d107      	bne.n	8007504 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074fc:	f043 0304 	orr.w	r3, r3, #4
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007504:	7dfb      	ldrb	r3, [r7, #23]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007510:	b004      	add	sp, #16
 8007512:	4770      	bx	lr
 8007514:	803c3800 	.word	0x803c3800

08007518 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	3301      	adds	r3, #1
 800752a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4a13      	ldr	r2, [pc, #76]	; (800757c <USB_FlushTxFifo+0x64>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d901      	bls.n	8007538 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e01b      	b.n	8007570 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	daf2      	bge.n	8007526 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007540:	2300      	movs	r3, #0
 8007542:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	019b      	lsls	r3, r3, #6
 8007548:	f043 0220 	orr.w	r2, r3, #32
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	3301      	adds	r3, #1
 8007554:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4a08      	ldr	r2, [pc, #32]	; (800757c <USB_FlushTxFifo+0x64>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d901      	bls.n	8007562 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e006      	b.n	8007570 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f003 0320 	and.w	r3, r3, #32
 800756a:	2b20      	cmp	r3, #32
 800756c:	d0f0      	beq.n	8007550 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	00030d40 	.word	0x00030d40

08007580 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	3301      	adds	r3, #1
 8007590:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	4a11      	ldr	r2, [pc, #68]	; (80075dc <USB_FlushRxFifo+0x5c>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d901      	bls.n	800759e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e018      	b.n	80075d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	daf2      	bge.n	800758c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2210      	movs	r2, #16
 80075ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3301      	adds	r3, #1
 80075b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4a08      	ldr	r2, [pc, #32]	; (80075dc <USB_FlushRxFifo+0x5c>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d901      	bls.n	80075c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e006      	b.n	80075d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	f003 0310 	and.w	r3, r3, #16
 80075ca:	2b10      	cmp	r3, #16
 80075cc:	d0f0      	beq.n	80075b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3714      	adds	r7, #20
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	00030d40 	.word	0x00030d40

080075e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	78fb      	ldrb	r3, [r7, #3]
 80075fa:	68f9      	ldr	r1, [r7, #12]
 80075fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007600:	4313      	orrs	r3, r2
 8007602:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007612:	b480      	push	{r7}
 8007614:	b085      	sub	sp, #20
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800762c:	f023 0303 	bic.w	r3, r3, #3
 8007630:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007640:	f043 0302 	orr.w	r3, r3, #2
 8007644:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	f003 0301 	and.w	r3, r3, #1
}
 8007664:	4618      	mov	r0, r3
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	3301      	adds	r3, #1
 8007680:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	4a13      	ldr	r2, [pc, #76]	; (80076d4 <USB_CoreReset+0x64>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d901      	bls.n	800768e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e01b      	b.n	80076c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	daf2      	bge.n	800767c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	f043 0201 	orr.w	r2, r3, #1
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3301      	adds	r3, #1
 80076aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4a09      	ldr	r2, [pc, #36]	; (80076d4 <USB_CoreReset+0x64>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d901      	bls.n	80076b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e006      	b.n	80076c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d0f0      	beq.n	80076a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	00030d40 	.word	0x00030d40

080076d8 <__errno>:
 80076d8:	4b01      	ldr	r3, [pc, #4]	; (80076e0 <__errno+0x8>)
 80076da:	6818      	ldr	r0, [r3, #0]
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	2000000c 	.word	0x2000000c

080076e4 <__libc_init_array>:
 80076e4:	b570      	push	{r4, r5, r6, lr}
 80076e6:	4d0d      	ldr	r5, [pc, #52]	; (800771c <__libc_init_array+0x38>)
 80076e8:	4c0d      	ldr	r4, [pc, #52]	; (8007720 <__libc_init_array+0x3c>)
 80076ea:	1b64      	subs	r4, r4, r5
 80076ec:	10a4      	asrs	r4, r4, #2
 80076ee:	2600      	movs	r6, #0
 80076f0:	42a6      	cmp	r6, r4
 80076f2:	d109      	bne.n	8007708 <__libc_init_array+0x24>
 80076f4:	4d0b      	ldr	r5, [pc, #44]	; (8007724 <__libc_init_array+0x40>)
 80076f6:	4c0c      	ldr	r4, [pc, #48]	; (8007728 <__libc_init_array+0x44>)
 80076f8:	f003 fe38 	bl	800b36c <_init>
 80076fc:	1b64      	subs	r4, r4, r5
 80076fe:	10a4      	asrs	r4, r4, #2
 8007700:	2600      	movs	r6, #0
 8007702:	42a6      	cmp	r6, r4
 8007704:	d105      	bne.n	8007712 <__libc_init_array+0x2e>
 8007706:	bd70      	pop	{r4, r5, r6, pc}
 8007708:	f855 3b04 	ldr.w	r3, [r5], #4
 800770c:	4798      	blx	r3
 800770e:	3601      	adds	r6, #1
 8007710:	e7ee      	b.n	80076f0 <__libc_init_array+0xc>
 8007712:	f855 3b04 	ldr.w	r3, [r5], #4
 8007716:	4798      	blx	r3
 8007718:	3601      	adds	r6, #1
 800771a:	e7f2      	b.n	8007702 <__libc_init_array+0x1e>
 800771c:	0800b7e8 	.word	0x0800b7e8
 8007720:	0800b7e8 	.word	0x0800b7e8
 8007724:	0800b7e8 	.word	0x0800b7e8
 8007728:	0800b7ec 	.word	0x0800b7ec

0800772c <memset>:
 800772c:	4402      	add	r2, r0
 800772e:	4603      	mov	r3, r0
 8007730:	4293      	cmp	r3, r2
 8007732:	d100      	bne.n	8007736 <memset+0xa>
 8007734:	4770      	bx	lr
 8007736:	f803 1b01 	strb.w	r1, [r3], #1
 800773a:	e7f9      	b.n	8007730 <memset+0x4>

0800773c <__cvt>:
 800773c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007740:	ec55 4b10 	vmov	r4, r5, d0
 8007744:	2d00      	cmp	r5, #0
 8007746:	460e      	mov	r6, r1
 8007748:	4619      	mov	r1, r3
 800774a:	462b      	mov	r3, r5
 800774c:	bfbb      	ittet	lt
 800774e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007752:	461d      	movlt	r5, r3
 8007754:	2300      	movge	r3, #0
 8007756:	232d      	movlt	r3, #45	; 0x2d
 8007758:	700b      	strb	r3, [r1, #0]
 800775a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800775c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007760:	4691      	mov	r9, r2
 8007762:	f023 0820 	bic.w	r8, r3, #32
 8007766:	bfbc      	itt	lt
 8007768:	4622      	movlt	r2, r4
 800776a:	4614      	movlt	r4, r2
 800776c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007770:	d005      	beq.n	800777e <__cvt+0x42>
 8007772:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007776:	d100      	bne.n	800777a <__cvt+0x3e>
 8007778:	3601      	adds	r6, #1
 800777a:	2102      	movs	r1, #2
 800777c:	e000      	b.n	8007780 <__cvt+0x44>
 800777e:	2103      	movs	r1, #3
 8007780:	ab03      	add	r3, sp, #12
 8007782:	9301      	str	r3, [sp, #4]
 8007784:	ab02      	add	r3, sp, #8
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	ec45 4b10 	vmov	d0, r4, r5
 800778c:	4653      	mov	r3, sl
 800778e:	4632      	mov	r2, r6
 8007790:	f000 fd02 	bl	8008198 <_dtoa_r>
 8007794:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007798:	4607      	mov	r7, r0
 800779a:	d102      	bne.n	80077a2 <__cvt+0x66>
 800779c:	f019 0f01 	tst.w	r9, #1
 80077a0:	d022      	beq.n	80077e8 <__cvt+0xac>
 80077a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077a6:	eb07 0906 	add.w	r9, r7, r6
 80077aa:	d110      	bne.n	80077ce <__cvt+0x92>
 80077ac:	783b      	ldrb	r3, [r7, #0]
 80077ae:	2b30      	cmp	r3, #48	; 0x30
 80077b0:	d10a      	bne.n	80077c8 <__cvt+0x8c>
 80077b2:	2200      	movs	r2, #0
 80077b4:	2300      	movs	r3, #0
 80077b6:	4620      	mov	r0, r4
 80077b8:	4629      	mov	r1, r5
 80077ba:	f7f9 f9a5 	bl	8000b08 <__aeabi_dcmpeq>
 80077be:	b918      	cbnz	r0, 80077c8 <__cvt+0x8c>
 80077c0:	f1c6 0601 	rsb	r6, r6, #1
 80077c4:	f8ca 6000 	str.w	r6, [sl]
 80077c8:	f8da 3000 	ldr.w	r3, [sl]
 80077cc:	4499      	add	r9, r3
 80077ce:	2200      	movs	r2, #0
 80077d0:	2300      	movs	r3, #0
 80077d2:	4620      	mov	r0, r4
 80077d4:	4629      	mov	r1, r5
 80077d6:	f7f9 f997 	bl	8000b08 <__aeabi_dcmpeq>
 80077da:	b108      	cbz	r0, 80077e0 <__cvt+0xa4>
 80077dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80077e0:	2230      	movs	r2, #48	; 0x30
 80077e2:	9b03      	ldr	r3, [sp, #12]
 80077e4:	454b      	cmp	r3, r9
 80077e6:	d307      	bcc.n	80077f8 <__cvt+0xbc>
 80077e8:	9b03      	ldr	r3, [sp, #12]
 80077ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077ec:	1bdb      	subs	r3, r3, r7
 80077ee:	4638      	mov	r0, r7
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	b004      	add	sp, #16
 80077f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f8:	1c59      	adds	r1, r3, #1
 80077fa:	9103      	str	r1, [sp, #12]
 80077fc:	701a      	strb	r2, [r3, #0]
 80077fe:	e7f0      	b.n	80077e2 <__cvt+0xa6>

08007800 <__exponent>:
 8007800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007802:	4603      	mov	r3, r0
 8007804:	2900      	cmp	r1, #0
 8007806:	bfb8      	it	lt
 8007808:	4249      	neglt	r1, r1
 800780a:	f803 2b02 	strb.w	r2, [r3], #2
 800780e:	bfb4      	ite	lt
 8007810:	222d      	movlt	r2, #45	; 0x2d
 8007812:	222b      	movge	r2, #43	; 0x2b
 8007814:	2909      	cmp	r1, #9
 8007816:	7042      	strb	r2, [r0, #1]
 8007818:	dd2a      	ble.n	8007870 <__exponent+0x70>
 800781a:	f10d 0407 	add.w	r4, sp, #7
 800781e:	46a4      	mov	ip, r4
 8007820:	270a      	movs	r7, #10
 8007822:	46a6      	mov	lr, r4
 8007824:	460a      	mov	r2, r1
 8007826:	fb91 f6f7 	sdiv	r6, r1, r7
 800782a:	fb07 1516 	mls	r5, r7, r6, r1
 800782e:	3530      	adds	r5, #48	; 0x30
 8007830:	2a63      	cmp	r2, #99	; 0x63
 8007832:	f104 34ff 	add.w	r4, r4, #4294967295
 8007836:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800783a:	4631      	mov	r1, r6
 800783c:	dcf1      	bgt.n	8007822 <__exponent+0x22>
 800783e:	3130      	adds	r1, #48	; 0x30
 8007840:	f1ae 0502 	sub.w	r5, lr, #2
 8007844:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007848:	1c44      	adds	r4, r0, #1
 800784a:	4629      	mov	r1, r5
 800784c:	4561      	cmp	r1, ip
 800784e:	d30a      	bcc.n	8007866 <__exponent+0x66>
 8007850:	f10d 0209 	add.w	r2, sp, #9
 8007854:	eba2 020e 	sub.w	r2, r2, lr
 8007858:	4565      	cmp	r5, ip
 800785a:	bf88      	it	hi
 800785c:	2200      	movhi	r2, #0
 800785e:	4413      	add	r3, r2
 8007860:	1a18      	subs	r0, r3, r0
 8007862:	b003      	add	sp, #12
 8007864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800786a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800786e:	e7ed      	b.n	800784c <__exponent+0x4c>
 8007870:	2330      	movs	r3, #48	; 0x30
 8007872:	3130      	adds	r1, #48	; 0x30
 8007874:	7083      	strb	r3, [r0, #2]
 8007876:	70c1      	strb	r1, [r0, #3]
 8007878:	1d03      	adds	r3, r0, #4
 800787a:	e7f1      	b.n	8007860 <__exponent+0x60>

0800787c <_printf_float>:
 800787c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007880:	ed2d 8b02 	vpush	{d8}
 8007884:	b08d      	sub	sp, #52	; 0x34
 8007886:	460c      	mov	r4, r1
 8007888:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800788c:	4616      	mov	r6, r2
 800788e:	461f      	mov	r7, r3
 8007890:	4605      	mov	r5, r0
 8007892:	f001 fb65 	bl	8008f60 <_localeconv_r>
 8007896:	f8d0 a000 	ldr.w	sl, [r0]
 800789a:	4650      	mov	r0, sl
 800789c:	f7f8 fcb2 	bl	8000204 <strlen>
 80078a0:	2300      	movs	r3, #0
 80078a2:	930a      	str	r3, [sp, #40]	; 0x28
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	9305      	str	r3, [sp, #20]
 80078a8:	f8d8 3000 	ldr.w	r3, [r8]
 80078ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80078b0:	3307      	adds	r3, #7
 80078b2:	f023 0307 	bic.w	r3, r3, #7
 80078b6:	f103 0208 	add.w	r2, r3, #8
 80078ba:	f8c8 2000 	str.w	r2, [r8]
 80078be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80078c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80078ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078ce:	9307      	str	r3, [sp, #28]
 80078d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80078d4:	ee08 0a10 	vmov	s16, r0
 80078d8:	4b9f      	ldr	r3, [pc, #636]	; (8007b58 <_printf_float+0x2dc>)
 80078da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078de:	f04f 32ff 	mov.w	r2, #4294967295
 80078e2:	f7f9 f943 	bl	8000b6c <__aeabi_dcmpun>
 80078e6:	bb88      	cbnz	r0, 800794c <_printf_float+0xd0>
 80078e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078ec:	4b9a      	ldr	r3, [pc, #616]	; (8007b58 <_printf_float+0x2dc>)
 80078ee:	f04f 32ff 	mov.w	r2, #4294967295
 80078f2:	f7f9 f91d 	bl	8000b30 <__aeabi_dcmple>
 80078f6:	bb48      	cbnz	r0, 800794c <_printf_float+0xd0>
 80078f8:	2200      	movs	r2, #0
 80078fa:	2300      	movs	r3, #0
 80078fc:	4640      	mov	r0, r8
 80078fe:	4649      	mov	r1, r9
 8007900:	f7f9 f90c 	bl	8000b1c <__aeabi_dcmplt>
 8007904:	b110      	cbz	r0, 800790c <_printf_float+0x90>
 8007906:	232d      	movs	r3, #45	; 0x2d
 8007908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800790c:	4b93      	ldr	r3, [pc, #588]	; (8007b5c <_printf_float+0x2e0>)
 800790e:	4894      	ldr	r0, [pc, #592]	; (8007b60 <_printf_float+0x2e4>)
 8007910:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007914:	bf94      	ite	ls
 8007916:	4698      	movls	r8, r3
 8007918:	4680      	movhi	r8, r0
 800791a:	2303      	movs	r3, #3
 800791c:	6123      	str	r3, [r4, #16]
 800791e:	9b05      	ldr	r3, [sp, #20]
 8007920:	f023 0204 	bic.w	r2, r3, #4
 8007924:	6022      	str	r2, [r4, #0]
 8007926:	f04f 0900 	mov.w	r9, #0
 800792a:	9700      	str	r7, [sp, #0]
 800792c:	4633      	mov	r3, r6
 800792e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007930:	4621      	mov	r1, r4
 8007932:	4628      	mov	r0, r5
 8007934:	f000 f9d8 	bl	8007ce8 <_printf_common>
 8007938:	3001      	adds	r0, #1
 800793a:	f040 8090 	bne.w	8007a5e <_printf_float+0x1e2>
 800793e:	f04f 30ff 	mov.w	r0, #4294967295
 8007942:	b00d      	add	sp, #52	; 0x34
 8007944:	ecbd 8b02 	vpop	{d8}
 8007948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800794c:	4642      	mov	r2, r8
 800794e:	464b      	mov	r3, r9
 8007950:	4640      	mov	r0, r8
 8007952:	4649      	mov	r1, r9
 8007954:	f7f9 f90a 	bl	8000b6c <__aeabi_dcmpun>
 8007958:	b140      	cbz	r0, 800796c <_printf_float+0xf0>
 800795a:	464b      	mov	r3, r9
 800795c:	2b00      	cmp	r3, #0
 800795e:	bfbc      	itt	lt
 8007960:	232d      	movlt	r3, #45	; 0x2d
 8007962:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007966:	487f      	ldr	r0, [pc, #508]	; (8007b64 <_printf_float+0x2e8>)
 8007968:	4b7f      	ldr	r3, [pc, #508]	; (8007b68 <_printf_float+0x2ec>)
 800796a:	e7d1      	b.n	8007910 <_printf_float+0x94>
 800796c:	6863      	ldr	r3, [r4, #4]
 800796e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007972:	9206      	str	r2, [sp, #24]
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	d13f      	bne.n	80079f8 <_printf_float+0x17c>
 8007978:	2306      	movs	r3, #6
 800797a:	6063      	str	r3, [r4, #4]
 800797c:	9b05      	ldr	r3, [sp, #20]
 800797e:	6861      	ldr	r1, [r4, #4]
 8007980:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007984:	2300      	movs	r3, #0
 8007986:	9303      	str	r3, [sp, #12]
 8007988:	ab0a      	add	r3, sp, #40	; 0x28
 800798a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800798e:	ab09      	add	r3, sp, #36	; 0x24
 8007990:	ec49 8b10 	vmov	d0, r8, r9
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	6022      	str	r2, [r4, #0]
 8007998:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800799c:	4628      	mov	r0, r5
 800799e:	f7ff fecd 	bl	800773c <__cvt>
 80079a2:	9b06      	ldr	r3, [sp, #24]
 80079a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079a6:	2b47      	cmp	r3, #71	; 0x47
 80079a8:	4680      	mov	r8, r0
 80079aa:	d108      	bne.n	80079be <_printf_float+0x142>
 80079ac:	1cc8      	adds	r0, r1, #3
 80079ae:	db02      	blt.n	80079b6 <_printf_float+0x13a>
 80079b0:	6863      	ldr	r3, [r4, #4]
 80079b2:	4299      	cmp	r1, r3
 80079b4:	dd41      	ble.n	8007a3a <_printf_float+0x1be>
 80079b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80079ba:	fa5f fb8b 	uxtb.w	fp, fp
 80079be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079c2:	d820      	bhi.n	8007a06 <_printf_float+0x18a>
 80079c4:	3901      	subs	r1, #1
 80079c6:	465a      	mov	r2, fp
 80079c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80079cc:	9109      	str	r1, [sp, #36]	; 0x24
 80079ce:	f7ff ff17 	bl	8007800 <__exponent>
 80079d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079d4:	1813      	adds	r3, r2, r0
 80079d6:	2a01      	cmp	r2, #1
 80079d8:	4681      	mov	r9, r0
 80079da:	6123      	str	r3, [r4, #16]
 80079dc:	dc02      	bgt.n	80079e4 <_printf_float+0x168>
 80079de:	6822      	ldr	r2, [r4, #0]
 80079e0:	07d2      	lsls	r2, r2, #31
 80079e2:	d501      	bpl.n	80079e8 <_printf_float+0x16c>
 80079e4:	3301      	adds	r3, #1
 80079e6:	6123      	str	r3, [r4, #16]
 80079e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d09c      	beq.n	800792a <_printf_float+0xae>
 80079f0:	232d      	movs	r3, #45	; 0x2d
 80079f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079f6:	e798      	b.n	800792a <_printf_float+0xae>
 80079f8:	9a06      	ldr	r2, [sp, #24]
 80079fa:	2a47      	cmp	r2, #71	; 0x47
 80079fc:	d1be      	bne.n	800797c <_printf_float+0x100>
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1bc      	bne.n	800797c <_printf_float+0x100>
 8007a02:	2301      	movs	r3, #1
 8007a04:	e7b9      	b.n	800797a <_printf_float+0xfe>
 8007a06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a0a:	d118      	bne.n	8007a3e <_printf_float+0x1c2>
 8007a0c:	2900      	cmp	r1, #0
 8007a0e:	6863      	ldr	r3, [r4, #4]
 8007a10:	dd0b      	ble.n	8007a2a <_printf_float+0x1ae>
 8007a12:	6121      	str	r1, [r4, #16]
 8007a14:	b913      	cbnz	r3, 8007a1c <_printf_float+0x1a0>
 8007a16:	6822      	ldr	r2, [r4, #0]
 8007a18:	07d0      	lsls	r0, r2, #31
 8007a1a:	d502      	bpl.n	8007a22 <_printf_float+0x1a6>
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	440b      	add	r3, r1
 8007a20:	6123      	str	r3, [r4, #16]
 8007a22:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a24:	f04f 0900 	mov.w	r9, #0
 8007a28:	e7de      	b.n	80079e8 <_printf_float+0x16c>
 8007a2a:	b913      	cbnz	r3, 8007a32 <_printf_float+0x1b6>
 8007a2c:	6822      	ldr	r2, [r4, #0]
 8007a2e:	07d2      	lsls	r2, r2, #31
 8007a30:	d501      	bpl.n	8007a36 <_printf_float+0x1ba>
 8007a32:	3302      	adds	r3, #2
 8007a34:	e7f4      	b.n	8007a20 <_printf_float+0x1a4>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e7f2      	b.n	8007a20 <_printf_float+0x1a4>
 8007a3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a40:	4299      	cmp	r1, r3
 8007a42:	db05      	blt.n	8007a50 <_printf_float+0x1d4>
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	6121      	str	r1, [r4, #16]
 8007a48:	07d8      	lsls	r0, r3, #31
 8007a4a:	d5ea      	bpl.n	8007a22 <_printf_float+0x1a6>
 8007a4c:	1c4b      	adds	r3, r1, #1
 8007a4e:	e7e7      	b.n	8007a20 <_printf_float+0x1a4>
 8007a50:	2900      	cmp	r1, #0
 8007a52:	bfd4      	ite	le
 8007a54:	f1c1 0202 	rsble	r2, r1, #2
 8007a58:	2201      	movgt	r2, #1
 8007a5a:	4413      	add	r3, r2
 8007a5c:	e7e0      	b.n	8007a20 <_printf_float+0x1a4>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	055a      	lsls	r2, r3, #21
 8007a62:	d407      	bmi.n	8007a74 <_printf_float+0x1f8>
 8007a64:	6923      	ldr	r3, [r4, #16]
 8007a66:	4642      	mov	r2, r8
 8007a68:	4631      	mov	r1, r6
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	47b8      	blx	r7
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d12c      	bne.n	8007acc <_printf_float+0x250>
 8007a72:	e764      	b.n	800793e <_printf_float+0xc2>
 8007a74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a78:	f240 80e0 	bls.w	8007c3c <_printf_float+0x3c0>
 8007a7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a80:	2200      	movs	r2, #0
 8007a82:	2300      	movs	r3, #0
 8007a84:	f7f9 f840 	bl	8000b08 <__aeabi_dcmpeq>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	d034      	beq.n	8007af6 <_printf_float+0x27a>
 8007a8c:	4a37      	ldr	r2, [pc, #220]	; (8007b6c <_printf_float+0x2f0>)
 8007a8e:	2301      	movs	r3, #1
 8007a90:	4631      	mov	r1, r6
 8007a92:	4628      	mov	r0, r5
 8007a94:	47b8      	blx	r7
 8007a96:	3001      	adds	r0, #1
 8007a98:	f43f af51 	beq.w	800793e <_printf_float+0xc2>
 8007a9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	db02      	blt.n	8007aaa <_printf_float+0x22e>
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	07d8      	lsls	r0, r3, #31
 8007aa8:	d510      	bpl.n	8007acc <_printf_float+0x250>
 8007aaa:	ee18 3a10 	vmov	r3, s16
 8007aae:	4652      	mov	r2, sl
 8007ab0:	4631      	mov	r1, r6
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	47b8      	blx	r7
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	f43f af41 	beq.w	800793e <_printf_float+0xc2>
 8007abc:	f04f 0800 	mov.w	r8, #0
 8007ac0:	f104 091a 	add.w	r9, r4, #26
 8007ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	4543      	cmp	r3, r8
 8007aca:	dc09      	bgt.n	8007ae0 <_printf_float+0x264>
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	079b      	lsls	r3, r3, #30
 8007ad0:	f100 8105 	bmi.w	8007cde <_printf_float+0x462>
 8007ad4:	68e0      	ldr	r0, [r4, #12]
 8007ad6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ad8:	4298      	cmp	r0, r3
 8007ada:	bfb8      	it	lt
 8007adc:	4618      	movlt	r0, r3
 8007ade:	e730      	b.n	8007942 <_printf_float+0xc6>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	464a      	mov	r2, r9
 8007ae4:	4631      	mov	r1, r6
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	47b8      	blx	r7
 8007aea:	3001      	adds	r0, #1
 8007aec:	f43f af27 	beq.w	800793e <_printf_float+0xc2>
 8007af0:	f108 0801 	add.w	r8, r8, #1
 8007af4:	e7e6      	b.n	8007ac4 <_printf_float+0x248>
 8007af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	dc39      	bgt.n	8007b70 <_printf_float+0x2f4>
 8007afc:	4a1b      	ldr	r2, [pc, #108]	; (8007b6c <_printf_float+0x2f0>)
 8007afe:	2301      	movs	r3, #1
 8007b00:	4631      	mov	r1, r6
 8007b02:	4628      	mov	r0, r5
 8007b04:	47b8      	blx	r7
 8007b06:	3001      	adds	r0, #1
 8007b08:	f43f af19 	beq.w	800793e <_printf_float+0xc2>
 8007b0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b10:	4313      	orrs	r3, r2
 8007b12:	d102      	bne.n	8007b1a <_printf_float+0x29e>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	07d9      	lsls	r1, r3, #31
 8007b18:	d5d8      	bpl.n	8007acc <_printf_float+0x250>
 8007b1a:	ee18 3a10 	vmov	r3, s16
 8007b1e:	4652      	mov	r2, sl
 8007b20:	4631      	mov	r1, r6
 8007b22:	4628      	mov	r0, r5
 8007b24:	47b8      	blx	r7
 8007b26:	3001      	adds	r0, #1
 8007b28:	f43f af09 	beq.w	800793e <_printf_float+0xc2>
 8007b2c:	f04f 0900 	mov.w	r9, #0
 8007b30:	f104 0a1a 	add.w	sl, r4, #26
 8007b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b36:	425b      	negs	r3, r3
 8007b38:	454b      	cmp	r3, r9
 8007b3a:	dc01      	bgt.n	8007b40 <_printf_float+0x2c4>
 8007b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b3e:	e792      	b.n	8007a66 <_printf_float+0x1ea>
 8007b40:	2301      	movs	r3, #1
 8007b42:	4652      	mov	r2, sl
 8007b44:	4631      	mov	r1, r6
 8007b46:	4628      	mov	r0, r5
 8007b48:	47b8      	blx	r7
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	f43f aef7 	beq.w	800793e <_printf_float+0xc2>
 8007b50:	f109 0901 	add.w	r9, r9, #1
 8007b54:	e7ee      	b.n	8007b34 <_printf_float+0x2b8>
 8007b56:	bf00      	nop
 8007b58:	7fefffff 	.word	0x7fefffff
 8007b5c:	0800b3d4 	.word	0x0800b3d4
 8007b60:	0800b3d8 	.word	0x0800b3d8
 8007b64:	0800b3e0 	.word	0x0800b3e0
 8007b68:	0800b3dc 	.word	0x0800b3dc
 8007b6c:	0800b3e4 	.word	0x0800b3e4
 8007b70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b74:	429a      	cmp	r2, r3
 8007b76:	bfa8      	it	ge
 8007b78:	461a      	movge	r2, r3
 8007b7a:	2a00      	cmp	r2, #0
 8007b7c:	4691      	mov	r9, r2
 8007b7e:	dc37      	bgt.n	8007bf0 <_printf_float+0x374>
 8007b80:	f04f 0b00 	mov.w	fp, #0
 8007b84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b88:	f104 021a 	add.w	r2, r4, #26
 8007b8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b8e:	9305      	str	r3, [sp, #20]
 8007b90:	eba3 0309 	sub.w	r3, r3, r9
 8007b94:	455b      	cmp	r3, fp
 8007b96:	dc33      	bgt.n	8007c00 <_printf_float+0x384>
 8007b98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	db3b      	blt.n	8007c18 <_printf_float+0x39c>
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	07da      	lsls	r2, r3, #31
 8007ba4:	d438      	bmi.n	8007c18 <_printf_float+0x39c>
 8007ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba8:	9a05      	ldr	r2, [sp, #20]
 8007baa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bac:	1a9a      	subs	r2, r3, r2
 8007bae:	eba3 0901 	sub.w	r9, r3, r1
 8007bb2:	4591      	cmp	r9, r2
 8007bb4:	bfa8      	it	ge
 8007bb6:	4691      	movge	r9, r2
 8007bb8:	f1b9 0f00 	cmp.w	r9, #0
 8007bbc:	dc35      	bgt.n	8007c2a <_printf_float+0x3ae>
 8007bbe:	f04f 0800 	mov.w	r8, #0
 8007bc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bc6:	f104 0a1a 	add.w	sl, r4, #26
 8007bca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bce:	1a9b      	subs	r3, r3, r2
 8007bd0:	eba3 0309 	sub.w	r3, r3, r9
 8007bd4:	4543      	cmp	r3, r8
 8007bd6:	f77f af79 	ble.w	8007acc <_printf_float+0x250>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	4652      	mov	r2, sl
 8007bde:	4631      	mov	r1, r6
 8007be0:	4628      	mov	r0, r5
 8007be2:	47b8      	blx	r7
 8007be4:	3001      	adds	r0, #1
 8007be6:	f43f aeaa 	beq.w	800793e <_printf_float+0xc2>
 8007bea:	f108 0801 	add.w	r8, r8, #1
 8007bee:	e7ec      	b.n	8007bca <_printf_float+0x34e>
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	4631      	mov	r1, r6
 8007bf4:	4642      	mov	r2, r8
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	47b8      	blx	r7
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	d1c0      	bne.n	8007b80 <_printf_float+0x304>
 8007bfe:	e69e      	b.n	800793e <_printf_float+0xc2>
 8007c00:	2301      	movs	r3, #1
 8007c02:	4631      	mov	r1, r6
 8007c04:	4628      	mov	r0, r5
 8007c06:	9205      	str	r2, [sp, #20]
 8007c08:	47b8      	blx	r7
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	f43f ae97 	beq.w	800793e <_printf_float+0xc2>
 8007c10:	9a05      	ldr	r2, [sp, #20]
 8007c12:	f10b 0b01 	add.w	fp, fp, #1
 8007c16:	e7b9      	b.n	8007b8c <_printf_float+0x310>
 8007c18:	ee18 3a10 	vmov	r3, s16
 8007c1c:	4652      	mov	r2, sl
 8007c1e:	4631      	mov	r1, r6
 8007c20:	4628      	mov	r0, r5
 8007c22:	47b8      	blx	r7
 8007c24:	3001      	adds	r0, #1
 8007c26:	d1be      	bne.n	8007ba6 <_printf_float+0x32a>
 8007c28:	e689      	b.n	800793e <_printf_float+0xc2>
 8007c2a:	9a05      	ldr	r2, [sp, #20]
 8007c2c:	464b      	mov	r3, r9
 8007c2e:	4442      	add	r2, r8
 8007c30:	4631      	mov	r1, r6
 8007c32:	4628      	mov	r0, r5
 8007c34:	47b8      	blx	r7
 8007c36:	3001      	adds	r0, #1
 8007c38:	d1c1      	bne.n	8007bbe <_printf_float+0x342>
 8007c3a:	e680      	b.n	800793e <_printf_float+0xc2>
 8007c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c3e:	2a01      	cmp	r2, #1
 8007c40:	dc01      	bgt.n	8007c46 <_printf_float+0x3ca>
 8007c42:	07db      	lsls	r3, r3, #31
 8007c44:	d538      	bpl.n	8007cb8 <_printf_float+0x43c>
 8007c46:	2301      	movs	r3, #1
 8007c48:	4642      	mov	r2, r8
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	47b8      	blx	r7
 8007c50:	3001      	adds	r0, #1
 8007c52:	f43f ae74 	beq.w	800793e <_printf_float+0xc2>
 8007c56:	ee18 3a10 	vmov	r3, s16
 8007c5a:	4652      	mov	r2, sl
 8007c5c:	4631      	mov	r1, r6
 8007c5e:	4628      	mov	r0, r5
 8007c60:	47b8      	blx	r7
 8007c62:	3001      	adds	r0, #1
 8007c64:	f43f ae6b 	beq.w	800793e <_printf_float+0xc2>
 8007c68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f7f8 ff4a 	bl	8000b08 <__aeabi_dcmpeq>
 8007c74:	b9d8      	cbnz	r0, 8007cae <_printf_float+0x432>
 8007c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c78:	f108 0201 	add.w	r2, r8, #1
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	4631      	mov	r1, r6
 8007c80:	4628      	mov	r0, r5
 8007c82:	47b8      	blx	r7
 8007c84:	3001      	adds	r0, #1
 8007c86:	d10e      	bne.n	8007ca6 <_printf_float+0x42a>
 8007c88:	e659      	b.n	800793e <_printf_float+0xc2>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	4652      	mov	r2, sl
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4628      	mov	r0, r5
 8007c92:	47b8      	blx	r7
 8007c94:	3001      	adds	r0, #1
 8007c96:	f43f ae52 	beq.w	800793e <_printf_float+0xc2>
 8007c9a:	f108 0801 	add.w	r8, r8, #1
 8007c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	4543      	cmp	r3, r8
 8007ca4:	dcf1      	bgt.n	8007c8a <_printf_float+0x40e>
 8007ca6:	464b      	mov	r3, r9
 8007ca8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007cac:	e6dc      	b.n	8007a68 <_printf_float+0x1ec>
 8007cae:	f04f 0800 	mov.w	r8, #0
 8007cb2:	f104 0a1a 	add.w	sl, r4, #26
 8007cb6:	e7f2      	b.n	8007c9e <_printf_float+0x422>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	4642      	mov	r2, r8
 8007cbc:	e7df      	b.n	8007c7e <_printf_float+0x402>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	464a      	mov	r2, r9
 8007cc2:	4631      	mov	r1, r6
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	47b8      	blx	r7
 8007cc8:	3001      	adds	r0, #1
 8007cca:	f43f ae38 	beq.w	800793e <_printf_float+0xc2>
 8007cce:	f108 0801 	add.w	r8, r8, #1
 8007cd2:	68e3      	ldr	r3, [r4, #12]
 8007cd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007cd6:	1a5b      	subs	r3, r3, r1
 8007cd8:	4543      	cmp	r3, r8
 8007cda:	dcf0      	bgt.n	8007cbe <_printf_float+0x442>
 8007cdc:	e6fa      	b.n	8007ad4 <_printf_float+0x258>
 8007cde:	f04f 0800 	mov.w	r8, #0
 8007ce2:	f104 0919 	add.w	r9, r4, #25
 8007ce6:	e7f4      	b.n	8007cd2 <_printf_float+0x456>

08007ce8 <_printf_common>:
 8007ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cec:	4616      	mov	r6, r2
 8007cee:	4699      	mov	r9, r3
 8007cf0:	688a      	ldr	r2, [r1, #8]
 8007cf2:	690b      	ldr	r3, [r1, #16]
 8007cf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	bfb8      	it	lt
 8007cfc:	4613      	movlt	r3, r2
 8007cfe:	6033      	str	r3, [r6, #0]
 8007d00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d04:	4607      	mov	r7, r0
 8007d06:	460c      	mov	r4, r1
 8007d08:	b10a      	cbz	r2, 8007d0e <_printf_common+0x26>
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	6033      	str	r3, [r6, #0]
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	0699      	lsls	r1, r3, #26
 8007d12:	bf42      	ittt	mi
 8007d14:	6833      	ldrmi	r3, [r6, #0]
 8007d16:	3302      	addmi	r3, #2
 8007d18:	6033      	strmi	r3, [r6, #0]
 8007d1a:	6825      	ldr	r5, [r4, #0]
 8007d1c:	f015 0506 	ands.w	r5, r5, #6
 8007d20:	d106      	bne.n	8007d30 <_printf_common+0x48>
 8007d22:	f104 0a19 	add.w	sl, r4, #25
 8007d26:	68e3      	ldr	r3, [r4, #12]
 8007d28:	6832      	ldr	r2, [r6, #0]
 8007d2a:	1a9b      	subs	r3, r3, r2
 8007d2c:	42ab      	cmp	r3, r5
 8007d2e:	dc26      	bgt.n	8007d7e <_printf_common+0x96>
 8007d30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d34:	1e13      	subs	r3, r2, #0
 8007d36:	6822      	ldr	r2, [r4, #0]
 8007d38:	bf18      	it	ne
 8007d3a:	2301      	movne	r3, #1
 8007d3c:	0692      	lsls	r2, r2, #26
 8007d3e:	d42b      	bmi.n	8007d98 <_printf_common+0xb0>
 8007d40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d44:	4649      	mov	r1, r9
 8007d46:	4638      	mov	r0, r7
 8007d48:	47c0      	blx	r8
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	d01e      	beq.n	8007d8c <_printf_common+0xa4>
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	68e5      	ldr	r5, [r4, #12]
 8007d52:	6832      	ldr	r2, [r6, #0]
 8007d54:	f003 0306 	and.w	r3, r3, #6
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	bf08      	it	eq
 8007d5c:	1aad      	subeq	r5, r5, r2
 8007d5e:	68a3      	ldr	r3, [r4, #8]
 8007d60:	6922      	ldr	r2, [r4, #16]
 8007d62:	bf0c      	ite	eq
 8007d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d68:	2500      	movne	r5, #0
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	bfc4      	itt	gt
 8007d6e:	1a9b      	subgt	r3, r3, r2
 8007d70:	18ed      	addgt	r5, r5, r3
 8007d72:	2600      	movs	r6, #0
 8007d74:	341a      	adds	r4, #26
 8007d76:	42b5      	cmp	r5, r6
 8007d78:	d11a      	bne.n	8007db0 <_printf_common+0xc8>
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	e008      	b.n	8007d90 <_printf_common+0xa8>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	4652      	mov	r2, sl
 8007d82:	4649      	mov	r1, r9
 8007d84:	4638      	mov	r0, r7
 8007d86:	47c0      	blx	r8
 8007d88:	3001      	adds	r0, #1
 8007d8a:	d103      	bne.n	8007d94 <_printf_common+0xac>
 8007d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d94:	3501      	adds	r5, #1
 8007d96:	e7c6      	b.n	8007d26 <_printf_common+0x3e>
 8007d98:	18e1      	adds	r1, r4, r3
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	2030      	movs	r0, #48	; 0x30
 8007d9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007da2:	4422      	add	r2, r4
 8007da4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007da8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007dac:	3302      	adds	r3, #2
 8007dae:	e7c7      	b.n	8007d40 <_printf_common+0x58>
 8007db0:	2301      	movs	r3, #1
 8007db2:	4622      	mov	r2, r4
 8007db4:	4649      	mov	r1, r9
 8007db6:	4638      	mov	r0, r7
 8007db8:	47c0      	blx	r8
 8007dba:	3001      	adds	r0, #1
 8007dbc:	d0e6      	beq.n	8007d8c <_printf_common+0xa4>
 8007dbe:	3601      	adds	r6, #1
 8007dc0:	e7d9      	b.n	8007d76 <_printf_common+0x8e>
	...

08007dc4 <_printf_i>:
 8007dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc8:	7e0f      	ldrb	r7, [r1, #24]
 8007dca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007dcc:	2f78      	cmp	r7, #120	; 0x78
 8007dce:	4691      	mov	r9, r2
 8007dd0:	4680      	mov	r8, r0
 8007dd2:	460c      	mov	r4, r1
 8007dd4:	469a      	mov	sl, r3
 8007dd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dda:	d807      	bhi.n	8007dec <_printf_i+0x28>
 8007ddc:	2f62      	cmp	r7, #98	; 0x62
 8007dde:	d80a      	bhi.n	8007df6 <_printf_i+0x32>
 8007de0:	2f00      	cmp	r7, #0
 8007de2:	f000 80d8 	beq.w	8007f96 <_printf_i+0x1d2>
 8007de6:	2f58      	cmp	r7, #88	; 0x58
 8007de8:	f000 80a3 	beq.w	8007f32 <_printf_i+0x16e>
 8007dec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007df0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007df4:	e03a      	b.n	8007e6c <_printf_i+0xa8>
 8007df6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007dfa:	2b15      	cmp	r3, #21
 8007dfc:	d8f6      	bhi.n	8007dec <_printf_i+0x28>
 8007dfe:	a101      	add	r1, pc, #4	; (adr r1, 8007e04 <_printf_i+0x40>)
 8007e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e04:	08007e5d 	.word	0x08007e5d
 8007e08:	08007e71 	.word	0x08007e71
 8007e0c:	08007ded 	.word	0x08007ded
 8007e10:	08007ded 	.word	0x08007ded
 8007e14:	08007ded 	.word	0x08007ded
 8007e18:	08007ded 	.word	0x08007ded
 8007e1c:	08007e71 	.word	0x08007e71
 8007e20:	08007ded 	.word	0x08007ded
 8007e24:	08007ded 	.word	0x08007ded
 8007e28:	08007ded 	.word	0x08007ded
 8007e2c:	08007ded 	.word	0x08007ded
 8007e30:	08007f7d 	.word	0x08007f7d
 8007e34:	08007ea1 	.word	0x08007ea1
 8007e38:	08007f5f 	.word	0x08007f5f
 8007e3c:	08007ded 	.word	0x08007ded
 8007e40:	08007ded 	.word	0x08007ded
 8007e44:	08007f9f 	.word	0x08007f9f
 8007e48:	08007ded 	.word	0x08007ded
 8007e4c:	08007ea1 	.word	0x08007ea1
 8007e50:	08007ded 	.word	0x08007ded
 8007e54:	08007ded 	.word	0x08007ded
 8007e58:	08007f67 	.word	0x08007f67
 8007e5c:	682b      	ldr	r3, [r5, #0]
 8007e5e:	1d1a      	adds	r2, r3, #4
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	602a      	str	r2, [r5, #0]
 8007e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e0a3      	b.n	8007fb8 <_printf_i+0x1f4>
 8007e70:	6820      	ldr	r0, [r4, #0]
 8007e72:	6829      	ldr	r1, [r5, #0]
 8007e74:	0606      	lsls	r6, r0, #24
 8007e76:	f101 0304 	add.w	r3, r1, #4
 8007e7a:	d50a      	bpl.n	8007e92 <_printf_i+0xce>
 8007e7c:	680e      	ldr	r6, [r1, #0]
 8007e7e:	602b      	str	r3, [r5, #0]
 8007e80:	2e00      	cmp	r6, #0
 8007e82:	da03      	bge.n	8007e8c <_printf_i+0xc8>
 8007e84:	232d      	movs	r3, #45	; 0x2d
 8007e86:	4276      	negs	r6, r6
 8007e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e8c:	485e      	ldr	r0, [pc, #376]	; (8008008 <_printf_i+0x244>)
 8007e8e:	230a      	movs	r3, #10
 8007e90:	e019      	b.n	8007ec6 <_printf_i+0x102>
 8007e92:	680e      	ldr	r6, [r1, #0]
 8007e94:	602b      	str	r3, [r5, #0]
 8007e96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e9a:	bf18      	it	ne
 8007e9c:	b236      	sxthne	r6, r6
 8007e9e:	e7ef      	b.n	8007e80 <_printf_i+0xbc>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	6820      	ldr	r0, [r4, #0]
 8007ea4:	1d19      	adds	r1, r3, #4
 8007ea6:	6029      	str	r1, [r5, #0]
 8007ea8:	0601      	lsls	r1, r0, #24
 8007eaa:	d501      	bpl.n	8007eb0 <_printf_i+0xec>
 8007eac:	681e      	ldr	r6, [r3, #0]
 8007eae:	e002      	b.n	8007eb6 <_printf_i+0xf2>
 8007eb0:	0646      	lsls	r6, r0, #25
 8007eb2:	d5fb      	bpl.n	8007eac <_printf_i+0xe8>
 8007eb4:	881e      	ldrh	r6, [r3, #0]
 8007eb6:	4854      	ldr	r0, [pc, #336]	; (8008008 <_printf_i+0x244>)
 8007eb8:	2f6f      	cmp	r7, #111	; 0x6f
 8007eba:	bf0c      	ite	eq
 8007ebc:	2308      	moveq	r3, #8
 8007ebe:	230a      	movne	r3, #10
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ec6:	6865      	ldr	r5, [r4, #4]
 8007ec8:	60a5      	str	r5, [r4, #8]
 8007eca:	2d00      	cmp	r5, #0
 8007ecc:	bfa2      	ittt	ge
 8007ece:	6821      	ldrge	r1, [r4, #0]
 8007ed0:	f021 0104 	bicge.w	r1, r1, #4
 8007ed4:	6021      	strge	r1, [r4, #0]
 8007ed6:	b90e      	cbnz	r6, 8007edc <_printf_i+0x118>
 8007ed8:	2d00      	cmp	r5, #0
 8007eda:	d04d      	beq.n	8007f78 <_printf_i+0x1b4>
 8007edc:	4615      	mov	r5, r2
 8007ede:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ee2:	fb03 6711 	mls	r7, r3, r1, r6
 8007ee6:	5dc7      	ldrb	r7, [r0, r7]
 8007ee8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007eec:	4637      	mov	r7, r6
 8007eee:	42bb      	cmp	r3, r7
 8007ef0:	460e      	mov	r6, r1
 8007ef2:	d9f4      	bls.n	8007ede <_printf_i+0x11a>
 8007ef4:	2b08      	cmp	r3, #8
 8007ef6:	d10b      	bne.n	8007f10 <_printf_i+0x14c>
 8007ef8:	6823      	ldr	r3, [r4, #0]
 8007efa:	07de      	lsls	r6, r3, #31
 8007efc:	d508      	bpl.n	8007f10 <_printf_i+0x14c>
 8007efe:	6923      	ldr	r3, [r4, #16]
 8007f00:	6861      	ldr	r1, [r4, #4]
 8007f02:	4299      	cmp	r1, r3
 8007f04:	bfde      	ittt	le
 8007f06:	2330      	movle	r3, #48	; 0x30
 8007f08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f10:	1b52      	subs	r2, r2, r5
 8007f12:	6122      	str	r2, [r4, #16]
 8007f14:	f8cd a000 	str.w	sl, [sp]
 8007f18:	464b      	mov	r3, r9
 8007f1a:	aa03      	add	r2, sp, #12
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	4640      	mov	r0, r8
 8007f20:	f7ff fee2 	bl	8007ce8 <_printf_common>
 8007f24:	3001      	adds	r0, #1
 8007f26:	d14c      	bne.n	8007fc2 <_printf_i+0x1fe>
 8007f28:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2c:	b004      	add	sp, #16
 8007f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f32:	4835      	ldr	r0, [pc, #212]	; (8008008 <_printf_i+0x244>)
 8007f34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f38:	6829      	ldr	r1, [r5, #0]
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f40:	6029      	str	r1, [r5, #0]
 8007f42:	061d      	lsls	r5, r3, #24
 8007f44:	d514      	bpl.n	8007f70 <_printf_i+0x1ac>
 8007f46:	07df      	lsls	r7, r3, #31
 8007f48:	bf44      	itt	mi
 8007f4a:	f043 0320 	orrmi.w	r3, r3, #32
 8007f4e:	6023      	strmi	r3, [r4, #0]
 8007f50:	b91e      	cbnz	r6, 8007f5a <_printf_i+0x196>
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	f023 0320 	bic.w	r3, r3, #32
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	2310      	movs	r3, #16
 8007f5c:	e7b0      	b.n	8007ec0 <_printf_i+0xfc>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	f043 0320 	orr.w	r3, r3, #32
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	2378      	movs	r3, #120	; 0x78
 8007f68:	4828      	ldr	r0, [pc, #160]	; (800800c <_printf_i+0x248>)
 8007f6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f6e:	e7e3      	b.n	8007f38 <_printf_i+0x174>
 8007f70:	0659      	lsls	r1, r3, #25
 8007f72:	bf48      	it	mi
 8007f74:	b2b6      	uxthmi	r6, r6
 8007f76:	e7e6      	b.n	8007f46 <_printf_i+0x182>
 8007f78:	4615      	mov	r5, r2
 8007f7a:	e7bb      	b.n	8007ef4 <_printf_i+0x130>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	6826      	ldr	r6, [r4, #0]
 8007f80:	6961      	ldr	r1, [r4, #20]
 8007f82:	1d18      	adds	r0, r3, #4
 8007f84:	6028      	str	r0, [r5, #0]
 8007f86:	0635      	lsls	r5, r6, #24
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	d501      	bpl.n	8007f90 <_printf_i+0x1cc>
 8007f8c:	6019      	str	r1, [r3, #0]
 8007f8e:	e002      	b.n	8007f96 <_printf_i+0x1d2>
 8007f90:	0670      	lsls	r0, r6, #25
 8007f92:	d5fb      	bpl.n	8007f8c <_printf_i+0x1c8>
 8007f94:	8019      	strh	r1, [r3, #0]
 8007f96:	2300      	movs	r3, #0
 8007f98:	6123      	str	r3, [r4, #16]
 8007f9a:	4615      	mov	r5, r2
 8007f9c:	e7ba      	b.n	8007f14 <_printf_i+0x150>
 8007f9e:	682b      	ldr	r3, [r5, #0]
 8007fa0:	1d1a      	adds	r2, r3, #4
 8007fa2:	602a      	str	r2, [r5, #0]
 8007fa4:	681d      	ldr	r5, [r3, #0]
 8007fa6:	6862      	ldr	r2, [r4, #4]
 8007fa8:	2100      	movs	r1, #0
 8007faa:	4628      	mov	r0, r5
 8007fac:	f7f8 f938 	bl	8000220 <memchr>
 8007fb0:	b108      	cbz	r0, 8007fb6 <_printf_i+0x1f2>
 8007fb2:	1b40      	subs	r0, r0, r5
 8007fb4:	6060      	str	r0, [r4, #4]
 8007fb6:	6863      	ldr	r3, [r4, #4]
 8007fb8:	6123      	str	r3, [r4, #16]
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fc0:	e7a8      	b.n	8007f14 <_printf_i+0x150>
 8007fc2:	6923      	ldr	r3, [r4, #16]
 8007fc4:	462a      	mov	r2, r5
 8007fc6:	4649      	mov	r1, r9
 8007fc8:	4640      	mov	r0, r8
 8007fca:	47d0      	blx	sl
 8007fcc:	3001      	adds	r0, #1
 8007fce:	d0ab      	beq.n	8007f28 <_printf_i+0x164>
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	079b      	lsls	r3, r3, #30
 8007fd4:	d413      	bmi.n	8007ffe <_printf_i+0x23a>
 8007fd6:	68e0      	ldr	r0, [r4, #12]
 8007fd8:	9b03      	ldr	r3, [sp, #12]
 8007fda:	4298      	cmp	r0, r3
 8007fdc:	bfb8      	it	lt
 8007fde:	4618      	movlt	r0, r3
 8007fe0:	e7a4      	b.n	8007f2c <_printf_i+0x168>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	4649      	mov	r1, r9
 8007fe8:	4640      	mov	r0, r8
 8007fea:	47d0      	blx	sl
 8007fec:	3001      	adds	r0, #1
 8007fee:	d09b      	beq.n	8007f28 <_printf_i+0x164>
 8007ff0:	3501      	adds	r5, #1
 8007ff2:	68e3      	ldr	r3, [r4, #12]
 8007ff4:	9903      	ldr	r1, [sp, #12]
 8007ff6:	1a5b      	subs	r3, r3, r1
 8007ff8:	42ab      	cmp	r3, r5
 8007ffa:	dcf2      	bgt.n	8007fe2 <_printf_i+0x21e>
 8007ffc:	e7eb      	b.n	8007fd6 <_printf_i+0x212>
 8007ffe:	2500      	movs	r5, #0
 8008000:	f104 0619 	add.w	r6, r4, #25
 8008004:	e7f5      	b.n	8007ff2 <_printf_i+0x22e>
 8008006:	bf00      	nop
 8008008:	0800b3e6 	.word	0x0800b3e6
 800800c:	0800b3f7 	.word	0x0800b3f7

08008010 <iprintf>:
 8008010:	b40f      	push	{r0, r1, r2, r3}
 8008012:	4b0a      	ldr	r3, [pc, #40]	; (800803c <iprintf+0x2c>)
 8008014:	b513      	push	{r0, r1, r4, lr}
 8008016:	681c      	ldr	r4, [r3, #0]
 8008018:	b124      	cbz	r4, 8008024 <iprintf+0x14>
 800801a:	69a3      	ldr	r3, [r4, #24]
 800801c:	b913      	cbnz	r3, 8008024 <iprintf+0x14>
 800801e:	4620      	mov	r0, r4
 8008020:	f000 ff00 	bl	8008e24 <__sinit>
 8008024:	ab05      	add	r3, sp, #20
 8008026:	9a04      	ldr	r2, [sp, #16]
 8008028:	68a1      	ldr	r1, [r4, #8]
 800802a:	9301      	str	r3, [sp, #4]
 800802c:	4620      	mov	r0, r4
 800802e:	f001 fdb5 	bl	8009b9c <_vfiprintf_r>
 8008032:	b002      	add	sp, #8
 8008034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008038:	b004      	add	sp, #16
 800803a:	4770      	bx	lr
 800803c:	2000000c 	.word	0x2000000c

08008040 <siprintf>:
 8008040:	b40e      	push	{r1, r2, r3}
 8008042:	b500      	push	{lr}
 8008044:	b09c      	sub	sp, #112	; 0x70
 8008046:	ab1d      	add	r3, sp, #116	; 0x74
 8008048:	9002      	str	r0, [sp, #8]
 800804a:	9006      	str	r0, [sp, #24]
 800804c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008050:	4809      	ldr	r0, [pc, #36]	; (8008078 <siprintf+0x38>)
 8008052:	9107      	str	r1, [sp, #28]
 8008054:	9104      	str	r1, [sp, #16]
 8008056:	4909      	ldr	r1, [pc, #36]	; (800807c <siprintf+0x3c>)
 8008058:	f853 2b04 	ldr.w	r2, [r3], #4
 800805c:	9105      	str	r1, [sp, #20]
 800805e:	6800      	ldr	r0, [r0, #0]
 8008060:	9301      	str	r3, [sp, #4]
 8008062:	a902      	add	r1, sp, #8
 8008064:	f001 fc70 	bl	8009948 <_svfiprintf_r>
 8008068:	9b02      	ldr	r3, [sp, #8]
 800806a:	2200      	movs	r2, #0
 800806c:	701a      	strb	r2, [r3, #0]
 800806e:	b01c      	add	sp, #112	; 0x70
 8008070:	f85d eb04 	ldr.w	lr, [sp], #4
 8008074:	b003      	add	sp, #12
 8008076:	4770      	bx	lr
 8008078:	2000000c 	.word	0x2000000c
 800807c:	ffff0208 	.word	0xffff0208

08008080 <quorem>:
 8008080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008084:	6903      	ldr	r3, [r0, #16]
 8008086:	690c      	ldr	r4, [r1, #16]
 8008088:	42a3      	cmp	r3, r4
 800808a:	4607      	mov	r7, r0
 800808c:	f2c0 8081 	blt.w	8008192 <quorem+0x112>
 8008090:	3c01      	subs	r4, #1
 8008092:	f101 0814 	add.w	r8, r1, #20
 8008096:	f100 0514 	add.w	r5, r0, #20
 800809a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800809e:	9301      	str	r3, [sp, #4]
 80080a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080a8:	3301      	adds	r3, #1
 80080aa:	429a      	cmp	r2, r3
 80080ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80080b8:	d331      	bcc.n	800811e <quorem+0x9e>
 80080ba:	f04f 0e00 	mov.w	lr, #0
 80080be:	4640      	mov	r0, r8
 80080c0:	46ac      	mov	ip, r5
 80080c2:	46f2      	mov	sl, lr
 80080c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80080c8:	b293      	uxth	r3, r2
 80080ca:	fb06 e303 	mla	r3, r6, r3, lr
 80080ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	ebaa 0303 	sub.w	r3, sl, r3
 80080d8:	f8dc a000 	ldr.w	sl, [ip]
 80080dc:	0c12      	lsrs	r2, r2, #16
 80080de:	fa13 f38a 	uxtah	r3, r3, sl
 80080e2:	fb06 e202 	mla	r2, r6, r2, lr
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	9b00      	ldr	r3, [sp, #0]
 80080ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080ee:	b292      	uxth	r2, r2
 80080f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80080f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80080fc:	4581      	cmp	r9, r0
 80080fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008102:	f84c 3b04 	str.w	r3, [ip], #4
 8008106:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800810a:	d2db      	bcs.n	80080c4 <quorem+0x44>
 800810c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008110:	b92b      	cbnz	r3, 800811e <quorem+0x9e>
 8008112:	9b01      	ldr	r3, [sp, #4]
 8008114:	3b04      	subs	r3, #4
 8008116:	429d      	cmp	r5, r3
 8008118:	461a      	mov	r2, r3
 800811a:	d32e      	bcc.n	800817a <quorem+0xfa>
 800811c:	613c      	str	r4, [r7, #16]
 800811e:	4638      	mov	r0, r7
 8008120:	f001 f9be 	bl	80094a0 <__mcmp>
 8008124:	2800      	cmp	r0, #0
 8008126:	db24      	blt.n	8008172 <quorem+0xf2>
 8008128:	3601      	adds	r6, #1
 800812a:	4628      	mov	r0, r5
 800812c:	f04f 0c00 	mov.w	ip, #0
 8008130:	f858 2b04 	ldr.w	r2, [r8], #4
 8008134:	f8d0 e000 	ldr.w	lr, [r0]
 8008138:	b293      	uxth	r3, r2
 800813a:	ebac 0303 	sub.w	r3, ip, r3
 800813e:	0c12      	lsrs	r2, r2, #16
 8008140:	fa13 f38e 	uxtah	r3, r3, lr
 8008144:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008148:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800814c:	b29b      	uxth	r3, r3
 800814e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008152:	45c1      	cmp	r9, r8
 8008154:	f840 3b04 	str.w	r3, [r0], #4
 8008158:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800815c:	d2e8      	bcs.n	8008130 <quorem+0xb0>
 800815e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008166:	b922      	cbnz	r2, 8008172 <quorem+0xf2>
 8008168:	3b04      	subs	r3, #4
 800816a:	429d      	cmp	r5, r3
 800816c:	461a      	mov	r2, r3
 800816e:	d30a      	bcc.n	8008186 <quorem+0x106>
 8008170:	613c      	str	r4, [r7, #16]
 8008172:	4630      	mov	r0, r6
 8008174:	b003      	add	sp, #12
 8008176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817a:	6812      	ldr	r2, [r2, #0]
 800817c:	3b04      	subs	r3, #4
 800817e:	2a00      	cmp	r2, #0
 8008180:	d1cc      	bne.n	800811c <quorem+0x9c>
 8008182:	3c01      	subs	r4, #1
 8008184:	e7c7      	b.n	8008116 <quorem+0x96>
 8008186:	6812      	ldr	r2, [r2, #0]
 8008188:	3b04      	subs	r3, #4
 800818a:	2a00      	cmp	r2, #0
 800818c:	d1f0      	bne.n	8008170 <quorem+0xf0>
 800818e:	3c01      	subs	r4, #1
 8008190:	e7eb      	b.n	800816a <quorem+0xea>
 8008192:	2000      	movs	r0, #0
 8008194:	e7ee      	b.n	8008174 <quorem+0xf4>
	...

08008198 <_dtoa_r>:
 8008198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819c:	ed2d 8b04 	vpush	{d8-d9}
 80081a0:	ec57 6b10 	vmov	r6, r7, d0
 80081a4:	b093      	sub	sp, #76	; 0x4c
 80081a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80081ac:	9106      	str	r1, [sp, #24]
 80081ae:	ee10 aa10 	vmov	sl, s0
 80081b2:	4604      	mov	r4, r0
 80081b4:	9209      	str	r2, [sp, #36]	; 0x24
 80081b6:	930c      	str	r3, [sp, #48]	; 0x30
 80081b8:	46bb      	mov	fp, r7
 80081ba:	b975      	cbnz	r5, 80081da <_dtoa_r+0x42>
 80081bc:	2010      	movs	r0, #16
 80081be:	f000 fed7 	bl	8008f70 <malloc>
 80081c2:	4602      	mov	r2, r0
 80081c4:	6260      	str	r0, [r4, #36]	; 0x24
 80081c6:	b920      	cbnz	r0, 80081d2 <_dtoa_r+0x3a>
 80081c8:	4ba7      	ldr	r3, [pc, #668]	; (8008468 <_dtoa_r+0x2d0>)
 80081ca:	21ea      	movs	r1, #234	; 0xea
 80081cc:	48a7      	ldr	r0, [pc, #668]	; (800846c <_dtoa_r+0x2d4>)
 80081ce:	f001 ff3b 	bl	800a048 <__assert_func>
 80081d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081d6:	6005      	str	r5, [r0, #0]
 80081d8:	60c5      	str	r5, [r0, #12]
 80081da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081dc:	6819      	ldr	r1, [r3, #0]
 80081de:	b151      	cbz	r1, 80081f6 <_dtoa_r+0x5e>
 80081e0:	685a      	ldr	r2, [r3, #4]
 80081e2:	604a      	str	r2, [r1, #4]
 80081e4:	2301      	movs	r3, #1
 80081e6:	4093      	lsls	r3, r2
 80081e8:	608b      	str	r3, [r1, #8]
 80081ea:	4620      	mov	r0, r4
 80081ec:	f000 ff16 	bl	800901c <_Bfree>
 80081f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]
 80081f6:	1e3b      	subs	r3, r7, #0
 80081f8:	bfaa      	itet	ge
 80081fa:	2300      	movge	r3, #0
 80081fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008200:	f8c8 3000 	strge.w	r3, [r8]
 8008204:	4b9a      	ldr	r3, [pc, #616]	; (8008470 <_dtoa_r+0x2d8>)
 8008206:	bfbc      	itt	lt
 8008208:	2201      	movlt	r2, #1
 800820a:	f8c8 2000 	strlt.w	r2, [r8]
 800820e:	ea33 030b 	bics.w	r3, r3, fp
 8008212:	d11b      	bne.n	800824c <_dtoa_r+0xb4>
 8008214:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008216:	f242 730f 	movw	r3, #9999	; 0x270f
 800821a:	6013      	str	r3, [r2, #0]
 800821c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008220:	4333      	orrs	r3, r6
 8008222:	f000 8592 	beq.w	8008d4a <_dtoa_r+0xbb2>
 8008226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008228:	b963      	cbnz	r3, 8008244 <_dtoa_r+0xac>
 800822a:	4b92      	ldr	r3, [pc, #584]	; (8008474 <_dtoa_r+0x2dc>)
 800822c:	e022      	b.n	8008274 <_dtoa_r+0xdc>
 800822e:	4b92      	ldr	r3, [pc, #584]	; (8008478 <_dtoa_r+0x2e0>)
 8008230:	9301      	str	r3, [sp, #4]
 8008232:	3308      	adds	r3, #8
 8008234:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008236:	6013      	str	r3, [r2, #0]
 8008238:	9801      	ldr	r0, [sp, #4]
 800823a:	b013      	add	sp, #76	; 0x4c
 800823c:	ecbd 8b04 	vpop	{d8-d9}
 8008240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008244:	4b8b      	ldr	r3, [pc, #556]	; (8008474 <_dtoa_r+0x2dc>)
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	3303      	adds	r3, #3
 800824a:	e7f3      	b.n	8008234 <_dtoa_r+0x9c>
 800824c:	2200      	movs	r2, #0
 800824e:	2300      	movs	r3, #0
 8008250:	4650      	mov	r0, sl
 8008252:	4659      	mov	r1, fp
 8008254:	f7f8 fc58 	bl	8000b08 <__aeabi_dcmpeq>
 8008258:	ec4b ab19 	vmov	d9, sl, fp
 800825c:	4680      	mov	r8, r0
 800825e:	b158      	cbz	r0, 8008278 <_dtoa_r+0xe0>
 8008260:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008262:	2301      	movs	r3, #1
 8008264:	6013      	str	r3, [r2, #0]
 8008266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 856b 	beq.w	8008d44 <_dtoa_r+0xbac>
 800826e:	4883      	ldr	r0, [pc, #524]	; (800847c <_dtoa_r+0x2e4>)
 8008270:	6018      	str	r0, [r3, #0]
 8008272:	1e43      	subs	r3, r0, #1
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	e7df      	b.n	8008238 <_dtoa_r+0xa0>
 8008278:	ec4b ab10 	vmov	d0, sl, fp
 800827c:	aa10      	add	r2, sp, #64	; 0x40
 800827e:	a911      	add	r1, sp, #68	; 0x44
 8008280:	4620      	mov	r0, r4
 8008282:	f001 f9b3 	bl	80095ec <__d2b>
 8008286:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800828a:	ee08 0a10 	vmov	s16, r0
 800828e:	2d00      	cmp	r5, #0
 8008290:	f000 8084 	beq.w	800839c <_dtoa_r+0x204>
 8008294:	ee19 3a90 	vmov	r3, s19
 8008298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800829c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80082a0:	4656      	mov	r6, sl
 80082a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80082a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80082ae:	4b74      	ldr	r3, [pc, #464]	; (8008480 <_dtoa_r+0x2e8>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	4630      	mov	r0, r6
 80082b4:	4639      	mov	r1, r7
 80082b6:	f7f8 f807 	bl	80002c8 <__aeabi_dsub>
 80082ba:	a365      	add	r3, pc, #404	; (adr r3, 8008450 <_dtoa_r+0x2b8>)
 80082bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c0:	f7f8 f9ba 	bl	8000638 <__aeabi_dmul>
 80082c4:	a364      	add	r3, pc, #400	; (adr r3, 8008458 <_dtoa_r+0x2c0>)
 80082c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ca:	f7f7 ffff 	bl	80002cc <__adddf3>
 80082ce:	4606      	mov	r6, r0
 80082d0:	4628      	mov	r0, r5
 80082d2:	460f      	mov	r7, r1
 80082d4:	f7f8 f946 	bl	8000564 <__aeabi_i2d>
 80082d8:	a361      	add	r3, pc, #388	; (adr r3, 8008460 <_dtoa_r+0x2c8>)
 80082da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082de:	f7f8 f9ab 	bl	8000638 <__aeabi_dmul>
 80082e2:	4602      	mov	r2, r0
 80082e4:	460b      	mov	r3, r1
 80082e6:	4630      	mov	r0, r6
 80082e8:	4639      	mov	r1, r7
 80082ea:	f7f7 ffef 	bl	80002cc <__adddf3>
 80082ee:	4606      	mov	r6, r0
 80082f0:	460f      	mov	r7, r1
 80082f2:	f7f8 fc51 	bl	8000b98 <__aeabi_d2iz>
 80082f6:	2200      	movs	r2, #0
 80082f8:	9000      	str	r0, [sp, #0]
 80082fa:	2300      	movs	r3, #0
 80082fc:	4630      	mov	r0, r6
 80082fe:	4639      	mov	r1, r7
 8008300:	f7f8 fc0c 	bl	8000b1c <__aeabi_dcmplt>
 8008304:	b150      	cbz	r0, 800831c <_dtoa_r+0x184>
 8008306:	9800      	ldr	r0, [sp, #0]
 8008308:	f7f8 f92c 	bl	8000564 <__aeabi_i2d>
 800830c:	4632      	mov	r2, r6
 800830e:	463b      	mov	r3, r7
 8008310:	f7f8 fbfa 	bl	8000b08 <__aeabi_dcmpeq>
 8008314:	b910      	cbnz	r0, 800831c <_dtoa_r+0x184>
 8008316:	9b00      	ldr	r3, [sp, #0]
 8008318:	3b01      	subs	r3, #1
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	9b00      	ldr	r3, [sp, #0]
 800831e:	2b16      	cmp	r3, #22
 8008320:	d85a      	bhi.n	80083d8 <_dtoa_r+0x240>
 8008322:	9a00      	ldr	r2, [sp, #0]
 8008324:	4b57      	ldr	r3, [pc, #348]	; (8008484 <_dtoa_r+0x2ec>)
 8008326:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	ec51 0b19 	vmov	r0, r1, d9
 8008332:	f7f8 fbf3 	bl	8000b1c <__aeabi_dcmplt>
 8008336:	2800      	cmp	r0, #0
 8008338:	d050      	beq.n	80083dc <_dtoa_r+0x244>
 800833a:	9b00      	ldr	r3, [sp, #0]
 800833c:	3b01      	subs	r3, #1
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	2300      	movs	r3, #0
 8008342:	930b      	str	r3, [sp, #44]	; 0x2c
 8008344:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008346:	1b5d      	subs	r5, r3, r5
 8008348:	1e6b      	subs	r3, r5, #1
 800834a:	9305      	str	r3, [sp, #20]
 800834c:	bf45      	ittet	mi
 800834e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008352:	9304      	strmi	r3, [sp, #16]
 8008354:	2300      	movpl	r3, #0
 8008356:	2300      	movmi	r3, #0
 8008358:	bf4c      	ite	mi
 800835a:	9305      	strmi	r3, [sp, #20]
 800835c:	9304      	strpl	r3, [sp, #16]
 800835e:	9b00      	ldr	r3, [sp, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	db3d      	blt.n	80083e0 <_dtoa_r+0x248>
 8008364:	9b05      	ldr	r3, [sp, #20]
 8008366:	9a00      	ldr	r2, [sp, #0]
 8008368:	920a      	str	r2, [sp, #40]	; 0x28
 800836a:	4413      	add	r3, r2
 800836c:	9305      	str	r3, [sp, #20]
 800836e:	2300      	movs	r3, #0
 8008370:	9307      	str	r3, [sp, #28]
 8008372:	9b06      	ldr	r3, [sp, #24]
 8008374:	2b09      	cmp	r3, #9
 8008376:	f200 8089 	bhi.w	800848c <_dtoa_r+0x2f4>
 800837a:	2b05      	cmp	r3, #5
 800837c:	bfc4      	itt	gt
 800837e:	3b04      	subgt	r3, #4
 8008380:	9306      	strgt	r3, [sp, #24]
 8008382:	9b06      	ldr	r3, [sp, #24]
 8008384:	f1a3 0302 	sub.w	r3, r3, #2
 8008388:	bfcc      	ite	gt
 800838a:	2500      	movgt	r5, #0
 800838c:	2501      	movle	r5, #1
 800838e:	2b03      	cmp	r3, #3
 8008390:	f200 8087 	bhi.w	80084a2 <_dtoa_r+0x30a>
 8008394:	e8df f003 	tbb	[pc, r3]
 8008398:	59383a2d 	.word	0x59383a2d
 800839c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80083a0:	441d      	add	r5, r3
 80083a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80083a6:	2b20      	cmp	r3, #32
 80083a8:	bfc1      	itttt	gt
 80083aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80083b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80083b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80083ba:	bfda      	itte	le
 80083bc:	f1c3 0320 	rsble	r3, r3, #32
 80083c0:	fa06 f003 	lslle.w	r0, r6, r3
 80083c4:	4318      	orrgt	r0, r3
 80083c6:	f7f8 f8bd 	bl	8000544 <__aeabi_ui2d>
 80083ca:	2301      	movs	r3, #1
 80083cc:	4606      	mov	r6, r0
 80083ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80083d2:	3d01      	subs	r5, #1
 80083d4:	930e      	str	r3, [sp, #56]	; 0x38
 80083d6:	e76a      	b.n	80082ae <_dtoa_r+0x116>
 80083d8:	2301      	movs	r3, #1
 80083da:	e7b2      	b.n	8008342 <_dtoa_r+0x1aa>
 80083dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80083de:	e7b1      	b.n	8008344 <_dtoa_r+0x1ac>
 80083e0:	9b04      	ldr	r3, [sp, #16]
 80083e2:	9a00      	ldr	r2, [sp, #0]
 80083e4:	1a9b      	subs	r3, r3, r2
 80083e6:	9304      	str	r3, [sp, #16]
 80083e8:	4253      	negs	r3, r2
 80083ea:	9307      	str	r3, [sp, #28]
 80083ec:	2300      	movs	r3, #0
 80083ee:	930a      	str	r3, [sp, #40]	; 0x28
 80083f0:	e7bf      	b.n	8008372 <_dtoa_r+0x1da>
 80083f2:	2300      	movs	r3, #0
 80083f4:	9308      	str	r3, [sp, #32]
 80083f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	dc55      	bgt.n	80084a8 <_dtoa_r+0x310>
 80083fc:	2301      	movs	r3, #1
 80083fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008402:	461a      	mov	r2, r3
 8008404:	9209      	str	r2, [sp, #36]	; 0x24
 8008406:	e00c      	b.n	8008422 <_dtoa_r+0x28a>
 8008408:	2301      	movs	r3, #1
 800840a:	e7f3      	b.n	80083f4 <_dtoa_r+0x25c>
 800840c:	2300      	movs	r3, #0
 800840e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008410:	9308      	str	r3, [sp, #32]
 8008412:	9b00      	ldr	r3, [sp, #0]
 8008414:	4413      	add	r3, r2
 8008416:	9302      	str	r3, [sp, #8]
 8008418:	3301      	adds	r3, #1
 800841a:	2b01      	cmp	r3, #1
 800841c:	9303      	str	r3, [sp, #12]
 800841e:	bfb8      	it	lt
 8008420:	2301      	movlt	r3, #1
 8008422:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008424:	2200      	movs	r2, #0
 8008426:	6042      	str	r2, [r0, #4]
 8008428:	2204      	movs	r2, #4
 800842a:	f102 0614 	add.w	r6, r2, #20
 800842e:	429e      	cmp	r6, r3
 8008430:	6841      	ldr	r1, [r0, #4]
 8008432:	d93d      	bls.n	80084b0 <_dtoa_r+0x318>
 8008434:	4620      	mov	r0, r4
 8008436:	f000 fdb1 	bl	8008f9c <_Balloc>
 800843a:	9001      	str	r0, [sp, #4]
 800843c:	2800      	cmp	r0, #0
 800843e:	d13b      	bne.n	80084b8 <_dtoa_r+0x320>
 8008440:	4b11      	ldr	r3, [pc, #68]	; (8008488 <_dtoa_r+0x2f0>)
 8008442:	4602      	mov	r2, r0
 8008444:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008448:	e6c0      	b.n	80081cc <_dtoa_r+0x34>
 800844a:	2301      	movs	r3, #1
 800844c:	e7df      	b.n	800840e <_dtoa_r+0x276>
 800844e:	bf00      	nop
 8008450:	636f4361 	.word	0x636f4361
 8008454:	3fd287a7 	.word	0x3fd287a7
 8008458:	8b60c8b3 	.word	0x8b60c8b3
 800845c:	3fc68a28 	.word	0x3fc68a28
 8008460:	509f79fb 	.word	0x509f79fb
 8008464:	3fd34413 	.word	0x3fd34413
 8008468:	0800b415 	.word	0x0800b415
 800846c:	0800b42c 	.word	0x0800b42c
 8008470:	7ff00000 	.word	0x7ff00000
 8008474:	0800b411 	.word	0x0800b411
 8008478:	0800b408 	.word	0x0800b408
 800847c:	0800b3e5 	.word	0x0800b3e5
 8008480:	3ff80000 	.word	0x3ff80000
 8008484:	0800b580 	.word	0x0800b580
 8008488:	0800b487 	.word	0x0800b487
 800848c:	2501      	movs	r5, #1
 800848e:	2300      	movs	r3, #0
 8008490:	9306      	str	r3, [sp, #24]
 8008492:	9508      	str	r5, [sp, #32]
 8008494:	f04f 33ff 	mov.w	r3, #4294967295
 8008498:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800849c:	2200      	movs	r2, #0
 800849e:	2312      	movs	r3, #18
 80084a0:	e7b0      	b.n	8008404 <_dtoa_r+0x26c>
 80084a2:	2301      	movs	r3, #1
 80084a4:	9308      	str	r3, [sp, #32]
 80084a6:	e7f5      	b.n	8008494 <_dtoa_r+0x2fc>
 80084a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80084ae:	e7b8      	b.n	8008422 <_dtoa_r+0x28a>
 80084b0:	3101      	adds	r1, #1
 80084b2:	6041      	str	r1, [r0, #4]
 80084b4:	0052      	lsls	r2, r2, #1
 80084b6:	e7b8      	b.n	800842a <_dtoa_r+0x292>
 80084b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084ba:	9a01      	ldr	r2, [sp, #4]
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	9b03      	ldr	r3, [sp, #12]
 80084c0:	2b0e      	cmp	r3, #14
 80084c2:	f200 809d 	bhi.w	8008600 <_dtoa_r+0x468>
 80084c6:	2d00      	cmp	r5, #0
 80084c8:	f000 809a 	beq.w	8008600 <_dtoa_r+0x468>
 80084cc:	9b00      	ldr	r3, [sp, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	dd32      	ble.n	8008538 <_dtoa_r+0x3a0>
 80084d2:	4ab7      	ldr	r2, [pc, #732]	; (80087b0 <_dtoa_r+0x618>)
 80084d4:	f003 030f 	and.w	r3, r3, #15
 80084d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80084dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084e0:	9b00      	ldr	r3, [sp, #0]
 80084e2:	05d8      	lsls	r0, r3, #23
 80084e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80084e8:	d516      	bpl.n	8008518 <_dtoa_r+0x380>
 80084ea:	4bb2      	ldr	r3, [pc, #712]	; (80087b4 <_dtoa_r+0x61c>)
 80084ec:	ec51 0b19 	vmov	r0, r1, d9
 80084f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084f4:	f7f8 f9ca 	bl	800088c <__aeabi_ddiv>
 80084f8:	f007 070f 	and.w	r7, r7, #15
 80084fc:	4682      	mov	sl, r0
 80084fe:	468b      	mov	fp, r1
 8008500:	2503      	movs	r5, #3
 8008502:	4eac      	ldr	r6, [pc, #688]	; (80087b4 <_dtoa_r+0x61c>)
 8008504:	b957      	cbnz	r7, 800851c <_dtoa_r+0x384>
 8008506:	4642      	mov	r2, r8
 8008508:	464b      	mov	r3, r9
 800850a:	4650      	mov	r0, sl
 800850c:	4659      	mov	r1, fp
 800850e:	f7f8 f9bd 	bl	800088c <__aeabi_ddiv>
 8008512:	4682      	mov	sl, r0
 8008514:	468b      	mov	fp, r1
 8008516:	e028      	b.n	800856a <_dtoa_r+0x3d2>
 8008518:	2502      	movs	r5, #2
 800851a:	e7f2      	b.n	8008502 <_dtoa_r+0x36a>
 800851c:	07f9      	lsls	r1, r7, #31
 800851e:	d508      	bpl.n	8008532 <_dtoa_r+0x39a>
 8008520:	4640      	mov	r0, r8
 8008522:	4649      	mov	r1, r9
 8008524:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008528:	f7f8 f886 	bl	8000638 <__aeabi_dmul>
 800852c:	3501      	adds	r5, #1
 800852e:	4680      	mov	r8, r0
 8008530:	4689      	mov	r9, r1
 8008532:	107f      	asrs	r7, r7, #1
 8008534:	3608      	adds	r6, #8
 8008536:	e7e5      	b.n	8008504 <_dtoa_r+0x36c>
 8008538:	f000 809b 	beq.w	8008672 <_dtoa_r+0x4da>
 800853c:	9b00      	ldr	r3, [sp, #0]
 800853e:	4f9d      	ldr	r7, [pc, #628]	; (80087b4 <_dtoa_r+0x61c>)
 8008540:	425e      	negs	r6, r3
 8008542:	4b9b      	ldr	r3, [pc, #620]	; (80087b0 <_dtoa_r+0x618>)
 8008544:	f006 020f 	and.w	r2, r6, #15
 8008548:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008550:	ec51 0b19 	vmov	r0, r1, d9
 8008554:	f7f8 f870 	bl	8000638 <__aeabi_dmul>
 8008558:	1136      	asrs	r6, r6, #4
 800855a:	4682      	mov	sl, r0
 800855c:	468b      	mov	fp, r1
 800855e:	2300      	movs	r3, #0
 8008560:	2502      	movs	r5, #2
 8008562:	2e00      	cmp	r6, #0
 8008564:	d17a      	bne.n	800865c <_dtoa_r+0x4c4>
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1d3      	bne.n	8008512 <_dtoa_r+0x37a>
 800856a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 8082 	beq.w	8008676 <_dtoa_r+0x4de>
 8008572:	4b91      	ldr	r3, [pc, #580]	; (80087b8 <_dtoa_r+0x620>)
 8008574:	2200      	movs	r2, #0
 8008576:	4650      	mov	r0, sl
 8008578:	4659      	mov	r1, fp
 800857a:	f7f8 facf 	bl	8000b1c <__aeabi_dcmplt>
 800857e:	2800      	cmp	r0, #0
 8008580:	d079      	beq.n	8008676 <_dtoa_r+0x4de>
 8008582:	9b03      	ldr	r3, [sp, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d076      	beq.n	8008676 <_dtoa_r+0x4de>
 8008588:	9b02      	ldr	r3, [sp, #8]
 800858a:	2b00      	cmp	r3, #0
 800858c:	dd36      	ble.n	80085fc <_dtoa_r+0x464>
 800858e:	9b00      	ldr	r3, [sp, #0]
 8008590:	4650      	mov	r0, sl
 8008592:	4659      	mov	r1, fp
 8008594:	1e5f      	subs	r7, r3, #1
 8008596:	2200      	movs	r2, #0
 8008598:	4b88      	ldr	r3, [pc, #544]	; (80087bc <_dtoa_r+0x624>)
 800859a:	f7f8 f84d 	bl	8000638 <__aeabi_dmul>
 800859e:	9e02      	ldr	r6, [sp, #8]
 80085a0:	4682      	mov	sl, r0
 80085a2:	468b      	mov	fp, r1
 80085a4:	3501      	adds	r5, #1
 80085a6:	4628      	mov	r0, r5
 80085a8:	f7f7 ffdc 	bl	8000564 <__aeabi_i2d>
 80085ac:	4652      	mov	r2, sl
 80085ae:	465b      	mov	r3, fp
 80085b0:	f7f8 f842 	bl	8000638 <__aeabi_dmul>
 80085b4:	4b82      	ldr	r3, [pc, #520]	; (80087c0 <_dtoa_r+0x628>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	f7f7 fe88 	bl	80002cc <__adddf3>
 80085bc:	46d0      	mov	r8, sl
 80085be:	46d9      	mov	r9, fp
 80085c0:	4682      	mov	sl, r0
 80085c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80085c6:	2e00      	cmp	r6, #0
 80085c8:	d158      	bne.n	800867c <_dtoa_r+0x4e4>
 80085ca:	4b7e      	ldr	r3, [pc, #504]	; (80087c4 <_dtoa_r+0x62c>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	4640      	mov	r0, r8
 80085d0:	4649      	mov	r1, r9
 80085d2:	f7f7 fe79 	bl	80002c8 <__aeabi_dsub>
 80085d6:	4652      	mov	r2, sl
 80085d8:	465b      	mov	r3, fp
 80085da:	4680      	mov	r8, r0
 80085dc:	4689      	mov	r9, r1
 80085de:	f7f8 fabb 	bl	8000b58 <__aeabi_dcmpgt>
 80085e2:	2800      	cmp	r0, #0
 80085e4:	f040 8295 	bne.w	8008b12 <_dtoa_r+0x97a>
 80085e8:	4652      	mov	r2, sl
 80085ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80085ee:	4640      	mov	r0, r8
 80085f0:	4649      	mov	r1, r9
 80085f2:	f7f8 fa93 	bl	8000b1c <__aeabi_dcmplt>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	f040 8289 	bne.w	8008b0e <_dtoa_r+0x976>
 80085fc:	ec5b ab19 	vmov	sl, fp, d9
 8008600:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008602:	2b00      	cmp	r3, #0
 8008604:	f2c0 8148 	blt.w	8008898 <_dtoa_r+0x700>
 8008608:	9a00      	ldr	r2, [sp, #0]
 800860a:	2a0e      	cmp	r2, #14
 800860c:	f300 8144 	bgt.w	8008898 <_dtoa_r+0x700>
 8008610:	4b67      	ldr	r3, [pc, #412]	; (80087b0 <_dtoa_r+0x618>)
 8008612:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008616:	e9d3 8900 	ldrd	r8, r9, [r3]
 800861a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800861c:	2b00      	cmp	r3, #0
 800861e:	f280 80d5 	bge.w	80087cc <_dtoa_r+0x634>
 8008622:	9b03      	ldr	r3, [sp, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	f300 80d1 	bgt.w	80087cc <_dtoa_r+0x634>
 800862a:	f040 826f 	bne.w	8008b0c <_dtoa_r+0x974>
 800862e:	4b65      	ldr	r3, [pc, #404]	; (80087c4 <_dtoa_r+0x62c>)
 8008630:	2200      	movs	r2, #0
 8008632:	4640      	mov	r0, r8
 8008634:	4649      	mov	r1, r9
 8008636:	f7f7 ffff 	bl	8000638 <__aeabi_dmul>
 800863a:	4652      	mov	r2, sl
 800863c:	465b      	mov	r3, fp
 800863e:	f7f8 fa81 	bl	8000b44 <__aeabi_dcmpge>
 8008642:	9e03      	ldr	r6, [sp, #12]
 8008644:	4637      	mov	r7, r6
 8008646:	2800      	cmp	r0, #0
 8008648:	f040 8245 	bne.w	8008ad6 <_dtoa_r+0x93e>
 800864c:	9d01      	ldr	r5, [sp, #4]
 800864e:	2331      	movs	r3, #49	; 0x31
 8008650:	f805 3b01 	strb.w	r3, [r5], #1
 8008654:	9b00      	ldr	r3, [sp, #0]
 8008656:	3301      	adds	r3, #1
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	e240      	b.n	8008ade <_dtoa_r+0x946>
 800865c:	07f2      	lsls	r2, r6, #31
 800865e:	d505      	bpl.n	800866c <_dtoa_r+0x4d4>
 8008660:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008664:	f7f7 ffe8 	bl	8000638 <__aeabi_dmul>
 8008668:	3501      	adds	r5, #1
 800866a:	2301      	movs	r3, #1
 800866c:	1076      	asrs	r6, r6, #1
 800866e:	3708      	adds	r7, #8
 8008670:	e777      	b.n	8008562 <_dtoa_r+0x3ca>
 8008672:	2502      	movs	r5, #2
 8008674:	e779      	b.n	800856a <_dtoa_r+0x3d2>
 8008676:	9f00      	ldr	r7, [sp, #0]
 8008678:	9e03      	ldr	r6, [sp, #12]
 800867a:	e794      	b.n	80085a6 <_dtoa_r+0x40e>
 800867c:	9901      	ldr	r1, [sp, #4]
 800867e:	4b4c      	ldr	r3, [pc, #304]	; (80087b0 <_dtoa_r+0x618>)
 8008680:	4431      	add	r1, r6
 8008682:	910d      	str	r1, [sp, #52]	; 0x34
 8008684:	9908      	ldr	r1, [sp, #32]
 8008686:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800868a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800868e:	2900      	cmp	r1, #0
 8008690:	d043      	beq.n	800871a <_dtoa_r+0x582>
 8008692:	494d      	ldr	r1, [pc, #308]	; (80087c8 <_dtoa_r+0x630>)
 8008694:	2000      	movs	r0, #0
 8008696:	f7f8 f8f9 	bl	800088c <__aeabi_ddiv>
 800869a:	4652      	mov	r2, sl
 800869c:	465b      	mov	r3, fp
 800869e:	f7f7 fe13 	bl	80002c8 <__aeabi_dsub>
 80086a2:	9d01      	ldr	r5, [sp, #4]
 80086a4:	4682      	mov	sl, r0
 80086a6:	468b      	mov	fp, r1
 80086a8:	4649      	mov	r1, r9
 80086aa:	4640      	mov	r0, r8
 80086ac:	f7f8 fa74 	bl	8000b98 <__aeabi_d2iz>
 80086b0:	4606      	mov	r6, r0
 80086b2:	f7f7 ff57 	bl	8000564 <__aeabi_i2d>
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	4640      	mov	r0, r8
 80086bc:	4649      	mov	r1, r9
 80086be:	f7f7 fe03 	bl	80002c8 <__aeabi_dsub>
 80086c2:	3630      	adds	r6, #48	; 0x30
 80086c4:	f805 6b01 	strb.w	r6, [r5], #1
 80086c8:	4652      	mov	r2, sl
 80086ca:	465b      	mov	r3, fp
 80086cc:	4680      	mov	r8, r0
 80086ce:	4689      	mov	r9, r1
 80086d0:	f7f8 fa24 	bl	8000b1c <__aeabi_dcmplt>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d163      	bne.n	80087a0 <_dtoa_r+0x608>
 80086d8:	4642      	mov	r2, r8
 80086da:	464b      	mov	r3, r9
 80086dc:	4936      	ldr	r1, [pc, #216]	; (80087b8 <_dtoa_r+0x620>)
 80086de:	2000      	movs	r0, #0
 80086e0:	f7f7 fdf2 	bl	80002c8 <__aeabi_dsub>
 80086e4:	4652      	mov	r2, sl
 80086e6:	465b      	mov	r3, fp
 80086e8:	f7f8 fa18 	bl	8000b1c <__aeabi_dcmplt>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	f040 80b5 	bne.w	800885c <_dtoa_r+0x6c4>
 80086f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086f4:	429d      	cmp	r5, r3
 80086f6:	d081      	beq.n	80085fc <_dtoa_r+0x464>
 80086f8:	4b30      	ldr	r3, [pc, #192]	; (80087bc <_dtoa_r+0x624>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	4650      	mov	r0, sl
 80086fe:	4659      	mov	r1, fp
 8008700:	f7f7 ff9a 	bl	8000638 <__aeabi_dmul>
 8008704:	4b2d      	ldr	r3, [pc, #180]	; (80087bc <_dtoa_r+0x624>)
 8008706:	4682      	mov	sl, r0
 8008708:	468b      	mov	fp, r1
 800870a:	4640      	mov	r0, r8
 800870c:	4649      	mov	r1, r9
 800870e:	2200      	movs	r2, #0
 8008710:	f7f7 ff92 	bl	8000638 <__aeabi_dmul>
 8008714:	4680      	mov	r8, r0
 8008716:	4689      	mov	r9, r1
 8008718:	e7c6      	b.n	80086a8 <_dtoa_r+0x510>
 800871a:	4650      	mov	r0, sl
 800871c:	4659      	mov	r1, fp
 800871e:	f7f7 ff8b 	bl	8000638 <__aeabi_dmul>
 8008722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008724:	9d01      	ldr	r5, [sp, #4]
 8008726:	930f      	str	r3, [sp, #60]	; 0x3c
 8008728:	4682      	mov	sl, r0
 800872a:	468b      	mov	fp, r1
 800872c:	4649      	mov	r1, r9
 800872e:	4640      	mov	r0, r8
 8008730:	f7f8 fa32 	bl	8000b98 <__aeabi_d2iz>
 8008734:	4606      	mov	r6, r0
 8008736:	f7f7 ff15 	bl	8000564 <__aeabi_i2d>
 800873a:	3630      	adds	r6, #48	; 0x30
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4640      	mov	r0, r8
 8008742:	4649      	mov	r1, r9
 8008744:	f7f7 fdc0 	bl	80002c8 <__aeabi_dsub>
 8008748:	f805 6b01 	strb.w	r6, [r5], #1
 800874c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800874e:	429d      	cmp	r5, r3
 8008750:	4680      	mov	r8, r0
 8008752:	4689      	mov	r9, r1
 8008754:	f04f 0200 	mov.w	r2, #0
 8008758:	d124      	bne.n	80087a4 <_dtoa_r+0x60c>
 800875a:	4b1b      	ldr	r3, [pc, #108]	; (80087c8 <_dtoa_r+0x630>)
 800875c:	4650      	mov	r0, sl
 800875e:	4659      	mov	r1, fp
 8008760:	f7f7 fdb4 	bl	80002cc <__adddf3>
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	4640      	mov	r0, r8
 800876a:	4649      	mov	r1, r9
 800876c:	f7f8 f9f4 	bl	8000b58 <__aeabi_dcmpgt>
 8008770:	2800      	cmp	r0, #0
 8008772:	d173      	bne.n	800885c <_dtoa_r+0x6c4>
 8008774:	4652      	mov	r2, sl
 8008776:	465b      	mov	r3, fp
 8008778:	4913      	ldr	r1, [pc, #76]	; (80087c8 <_dtoa_r+0x630>)
 800877a:	2000      	movs	r0, #0
 800877c:	f7f7 fda4 	bl	80002c8 <__aeabi_dsub>
 8008780:	4602      	mov	r2, r0
 8008782:	460b      	mov	r3, r1
 8008784:	4640      	mov	r0, r8
 8008786:	4649      	mov	r1, r9
 8008788:	f7f8 f9c8 	bl	8000b1c <__aeabi_dcmplt>
 800878c:	2800      	cmp	r0, #0
 800878e:	f43f af35 	beq.w	80085fc <_dtoa_r+0x464>
 8008792:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008794:	1e6b      	subs	r3, r5, #1
 8008796:	930f      	str	r3, [sp, #60]	; 0x3c
 8008798:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800879c:	2b30      	cmp	r3, #48	; 0x30
 800879e:	d0f8      	beq.n	8008792 <_dtoa_r+0x5fa>
 80087a0:	9700      	str	r7, [sp, #0]
 80087a2:	e049      	b.n	8008838 <_dtoa_r+0x6a0>
 80087a4:	4b05      	ldr	r3, [pc, #20]	; (80087bc <_dtoa_r+0x624>)
 80087a6:	f7f7 ff47 	bl	8000638 <__aeabi_dmul>
 80087aa:	4680      	mov	r8, r0
 80087ac:	4689      	mov	r9, r1
 80087ae:	e7bd      	b.n	800872c <_dtoa_r+0x594>
 80087b0:	0800b580 	.word	0x0800b580
 80087b4:	0800b558 	.word	0x0800b558
 80087b8:	3ff00000 	.word	0x3ff00000
 80087bc:	40240000 	.word	0x40240000
 80087c0:	401c0000 	.word	0x401c0000
 80087c4:	40140000 	.word	0x40140000
 80087c8:	3fe00000 	.word	0x3fe00000
 80087cc:	9d01      	ldr	r5, [sp, #4]
 80087ce:	4656      	mov	r6, sl
 80087d0:	465f      	mov	r7, fp
 80087d2:	4642      	mov	r2, r8
 80087d4:	464b      	mov	r3, r9
 80087d6:	4630      	mov	r0, r6
 80087d8:	4639      	mov	r1, r7
 80087da:	f7f8 f857 	bl	800088c <__aeabi_ddiv>
 80087de:	f7f8 f9db 	bl	8000b98 <__aeabi_d2iz>
 80087e2:	4682      	mov	sl, r0
 80087e4:	f7f7 febe 	bl	8000564 <__aeabi_i2d>
 80087e8:	4642      	mov	r2, r8
 80087ea:	464b      	mov	r3, r9
 80087ec:	f7f7 ff24 	bl	8000638 <__aeabi_dmul>
 80087f0:	4602      	mov	r2, r0
 80087f2:	460b      	mov	r3, r1
 80087f4:	4630      	mov	r0, r6
 80087f6:	4639      	mov	r1, r7
 80087f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80087fc:	f7f7 fd64 	bl	80002c8 <__aeabi_dsub>
 8008800:	f805 6b01 	strb.w	r6, [r5], #1
 8008804:	9e01      	ldr	r6, [sp, #4]
 8008806:	9f03      	ldr	r7, [sp, #12]
 8008808:	1bae      	subs	r6, r5, r6
 800880a:	42b7      	cmp	r7, r6
 800880c:	4602      	mov	r2, r0
 800880e:	460b      	mov	r3, r1
 8008810:	d135      	bne.n	800887e <_dtoa_r+0x6e6>
 8008812:	f7f7 fd5b 	bl	80002cc <__adddf3>
 8008816:	4642      	mov	r2, r8
 8008818:	464b      	mov	r3, r9
 800881a:	4606      	mov	r6, r0
 800881c:	460f      	mov	r7, r1
 800881e:	f7f8 f99b 	bl	8000b58 <__aeabi_dcmpgt>
 8008822:	b9d0      	cbnz	r0, 800885a <_dtoa_r+0x6c2>
 8008824:	4642      	mov	r2, r8
 8008826:	464b      	mov	r3, r9
 8008828:	4630      	mov	r0, r6
 800882a:	4639      	mov	r1, r7
 800882c:	f7f8 f96c 	bl	8000b08 <__aeabi_dcmpeq>
 8008830:	b110      	cbz	r0, 8008838 <_dtoa_r+0x6a0>
 8008832:	f01a 0f01 	tst.w	sl, #1
 8008836:	d110      	bne.n	800885a <_dtoa_r+0x6c2>
 8008838:	4620      	mov	r0, r4
 800883a:	ee18 1a10 	vmov	r1, s16
 800883e:	f000 fbed 	bl	800901c <_Bfree>
 8008842:	2300      	movs	r3, #0
 8008844:	9800      	ldr	r0, [sp, #0]
 8008846:	702b      	strb	r3, [r5, #0]
 8008848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800884a:	3001      	adds	r0, #1
 800884c:	6018      	str	r0, [r3, #0]
 800884e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008850:	2b00      	cmp	r3, #0
 8008852:	f43f acf1 	beq.w	8008238 <_dtoa_r+0xa0>
 8008856:	601d      	str	r5, [r3, #0]
 8008858:	e4ee      	b.n	8008238 <_dtoa_r+0xa0>
 800885a:	9f00      	ldr	r7, [sp, #0]
 800885c:	462b      	mov	r3, r5
 800885e:	461d      	mov	r5, r3
 8008860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008864:	2a39      	cmp	r2, #57	; 0x39
 8008866:	d106      	bne.n	8008876 <_dtoa_r+0x6de>
 8008868:	9a01      	ldr	r2, [sp, #4]
 800886a:	429a      	cmp	r2, r3
 800886c:	d1f7      	bne.n	800885e <_dtoa_r+0x6c6>
 800886e:	9901      	ldr	r1, [sp, #4]
 8008870:	2230      	movs	r2, #48	; 0x30
 8008872:	3701      	adds	r7, #1
 8008874:	700a      	strb	r2, [r1, #0]
 8008876:	781a      	ldrb	r2, [r3, #0]
 8008878:	3201      	adds	r2, #1
 800887a:	701a      	strb	r2, [r3, #0]
 800887c:	e790      	b.n	80087a0 <_dtoa_r+0x608>
 800887e:	4ba6      	ldr	r3, [pc, #664]	; (8008b18 <_dtoa_r+0x980>)
 8008880:	2200      	movs	r2, #0
 8008882:	f7f7 fed9 	bl	8000638 <__aeabi_dmul>
 8008886:	2200      	movs	r2, #0
 8008888:	2300      	movs	r3, #0
 800888a:	4606      	mov	r6, r0
 800888c:	460f      	mov	r7, r1
 800888e:	f7f8 f93b 	bl	8000b08 <__aeabi_dcmpeq>
 8008892:	2800      	cmp	r0, #0
 8008894:	d09d      	beq.n	80087d2 <_dtoa_r+0x63a>
 8008896:	e7cf      	b.n	8008838 <_dtoa_r+0x6a0>
 8008898:	9a08      	ldr	r2, [sp, #32]
 800889a:	2a00      	cmp	r2, #0
 800889c:	f000 80d7 	beq.w	8008a4e <_dtoa_r+0x8b6>
 80088a0:	9a06      	ldr	r2, [sp, #24]
 80088a2:	2a01      	cmp	r2, #1
 80088a4:	f300 80ba 	bgt.w	8008a1c <_dtoa_r+0x884>
 80088a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088aa:	2a00      	cmp	r2, #0
 80088ac:	f000 80b2 	beq.w	8008a14 <_dtoa_r+0x87c>
 80088b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088b4:	9e07      	ldr	r6, [sp, #28]
 80088b6:	9d04      	ldr	r5, [sp, #16]
 80088b8:	9a04      	ldr	r2, [sp, #16]
 80088ba:	441a      	add	r2, r3
 80088bc:	9204      	str	r2, [sp, #16]
 80088be:	9a05      	ldr	r2, [sp, #20]
 80088c0:	2101      	movs	r1, #1
 80088c2:	441a      	add	r2, r3
 80088c4:	4620      	mov	r0, r4
 80088c6:	9205      	str	r2, [sp, #20]
 80088c8:	f000 fc60 	bl	800918c <__i2b>
 80088cc:	4607      	mov	r7, r0
 80088ce:	2d00      	cmp	r5, #0
 80088d0:	dd0c      	ble.n	80088ec <_dtoa_r+0x754>
 80088d2:	9b05      	ldr	r3, [sp, #20]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	dd09      	ble.n	80088ec <_dtoa_r+0x754>
 80088d8:	42ab      	cmp	r3, r5
 80088da:	9a04      	ldr	r2, [sp, #16]
 80088dc:	bfa8      	it	ge
 80088de:	462b      	movge	r3, r5
 80088e0:	1ad2      	subs	r2, r2, r3
 80088e2:	9204      	str	r2, [sp, #16]
 80088e4:	9a05      	ldr	r2, [sp, #20]
 80088e6:	1aed      	subs	r5, r5, r3
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	9305      	str	r3, [sp, #20]
 80088ec:	9b07      	ldr	r3, [sp, #28]
 80088ee:	b31b      	cbz	r3, 8008938 <_dtoa_r+0x7a0>
 80088f0:	9b08      	ldr	r3, [sp, #32]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f000 80af 	beq.w	8008a56 <_dtoa_r+0x8be>
 80088f8:	2e00      	cmp	r6, #0
 80088fa:	dd13      	ble.n	8008924 <_dtoa_r+0x78c>
 80088fc:	4639      	mov	r1, r7
 80088fe:	4632      	mov	r2, r6
 8008900:	4620      	mov	r0, r4
 8008902:	f000 fd03 	bl	800930c <__pow5mult>
 8008906:	ee18 2a10 	vmov	r2, s16
 800890a:	4601      	mov	r1, r0
 800890c:	4607      	mov	r7, r0
 800890e:	4620      	mov	r0, r4
 8008910:	f000 fc52 	bl	80091b8 <__multiply>
 8008914:	ee18 1a10 	vmov	r1, s16
 8008918:	4680      	mov	r8, r0
 800891a:	4620      	mov	r0, r4
 800891c:	f000 fb7e 	bl	800901c <_Bfree>
 8008920:	ee08 8a10 	vmov	s16, r8
 8008924:	9b07      	ldr	r3, [sp, #28]
 8008926:	1b9a      	subs	r2, r3, r6
 8008928:	d006      	beq.n	8008938 <_dtoa_r+0x7a0>
 800892a:	ee18 1a10 	vmov	r1, s16
 800892e:	4620      	mov	r0, r4
 8008930:	f000 fcec 	bl	800930c <__pow5mult>
 8008934:	ee08 0a10 	vmov	s16, r0
 8008938:	2101      	movs	r1, #1
 800893a:	4620      	mov	r0, r4
 800893c:	f000 fc26 	bl	800918c <__i2b>
 8008940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008942:	2b00      	cmp	r3, #0
 8008944:	4606      	mov	r6, r0
 8008946:	f340 8088 	ble.w	8008a5a <_dtoa_r+0x8c2>
 800894a:	461a      	mov	r2, r3
 800894c:	4601      	mov	r1, r0
 800894e:	4620      	mov	r0, r4
 8008950:	f000 fcdc 	bl	800930c <__pow5mult>
 8008954:	9b06      	ldr	r3, [sp, #24]
 8008956:	2b01      	cmp	r3, #1
 8008958:	4606      	mov	r6, r0
 800895a:	f340 8081 	ble.w	8008a60 <_dtoa_r+0x8c8>
 800895e:	f04f 0800 	mov.w	r8, #0
 8008962:	6933      	ldr	r3, [r6, #16]
 8008964:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008968:	6918      	ldr	r0, [r3, #16]
 800896a:	f000 fbbf 	bl	80090ec <__hi0bits>
 800896e:	f1c0 0020 	rsb	r0, r0, #32
 8008972:	9b05      	ldr	r3, [sp, #20]
 8008974:	4418      	add	r0, r3
 8008976:	f010 001f 	ands.w	r0, r0, #31
 800897a:	f000 8092 	beq.w	8008aa2 <_dtoa_r+0x90a>
 800897e:	f1c0 0320 	rsb	r3, r0, #32
 8008982:	2b04      	cmp	r3, #4
 8008984:	f340 808a 	ble.w	8008a9c <_dtoa_r+0x904>
 8008988:	f1c0 001c 	rsb	r0, r0, #28
 800898c:	9b04      	ldr	r3, [sp, #16]
 800898e:	4403      	add	r3, r0
 8008990:	9304      	str	r3, [sp, #16]
 8008992:	9b05      	ldr	r3, [sp, #20]
 8008994:	4403      	add	r3, r0
 8008996:	4405      	add	r5, r0
 8008998:	9305      	str	r3, [sp, #20]
 800899a:	9b04      	ldr	r3, [sp, #16]
 800899c:	2b00      	cmp	r3, #0
 800899e:	dd07      	ble.n	80089b0 <_dtoa_r+0x818>
 80089a0:	ee18 1a10 	vmov	r1, s16
 80089a4:	461a      	mov	r2, r3
 80089a6:	4620      	mov	r0, r4
 80089a8:	f000 fd0a 	bl	80093c0 <__lshift>
 80089ac:	ee08 0a10 	vmov	s16, r0
 80089b0:	9b05      	ldr	r3, [sp, #20]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	dd05      	ble.n	80089c2 <_dtoa_r+0x82a>
 80089b6:	4631      	mov	r1, r6
 80089b8:	461a      	mov	r2, r3
 80089ba:	4620      	mov	r0, r4
 80089bc:	f000 fd00 	bl	80093c0 <__lshift>
 80089c0:	4606      	mov	r6, r0
 80089c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d06e      	beq.n	8008aa6 <_dtoa_r+0x90e>
 80089c8:	ee18 0a10 	vmov	r0, s16
 80089cc:	4631      	mov	r1, r6
 80089ce:	f000 fd67 	bl	80094a0 <__mcmp>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	da67      	bge.n	8008aa6 <_dtoa_r+0x90e>
 80089d6:	9b00      	ldr	r3, [sp, #0]
 80089d8:	3b01      	subs	r3, #1
 80089da:	ee18 1a10 	vmov	r1, s16
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	220a      	movs	r2, #10
 80089e2:	2300      	movs	r3, #0
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 fb3b 	bl	8009060 <__multadd>
 80089ea:	9b08      	ldr	r3, [sp, #32]
 80089ec:	ee08 0a10 	vmov	s16, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 81b1 	beq.w	8008d58 <_dtoa_r+0xbc0>
 80089f6:	2300      	movs	r3, #0
 80089f8:	4639      	mov	r1, r7
 80089fa:	220a      	movs	r2, #10
 80089fc:	4620      	mov	r0, r4
 80089fe:	f000 fb2f 	bl	8009060 <__multadd>
 8008a02:	9b02      	ldr	r3, [sp, #8]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	4607      	mov	r7, r0
 8008a08:	f300 808e 	bgt.w	8008b28 <_dtoa_r+0x990>
 8008a0c:	9b06      	ldr	r3, [sp, #24]
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	dc51      	bgt.n	8008ab6 <_dtoa_r+0x91e>
 8008a12:	e089      	b.n	8008b28 <_dtoa_r+0x990>
 8008a14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a1a:	e74b      	b.n	80088b4 <_dtoa_r+0x71c>
 8008a1c:	9b03      	ldr	r3, [sp, #12]
 8008a1e:	1e5e      	subs	r6, r3, #1
 8008a20:	9b07      	ldr	r3, [sp, #28]
 8008a22:	42b3      	cmp	r3, r6
 8008a24:	bfbf      	itttt	lt
 8008a26:	9b07      	ldrlt	r3, [sp, #28]
 8008a28:	9607      	strlt	r6, [sp, #28]
 8008a2a:	1af2      	sublt	r2, r6, r3
 8008a2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a2e:	bfb6      	itet	lt
 8008a30:	189b      	addlt	r3, r3, r2
 8008a32:	1b9e      	subge	r6, r3, r6
 8008a34:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008a36:	9b03      	ldr	r3, [sp, #12]
 8008a38:	bfb8      	it	lt
 8008a3a:	2600      	movlt	r6, #0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	bfb7      	itett	lt
 8008a40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008a44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008a48:	1a9d      	sublt	r5, r3, r2
 8008a4a:	2300      	movlt	r3, #0
 8008a4c:	e734      	b.n	80088b8 <_dtoa_r+0x720>
 8008a4e:	9e07      	ldr	r6, [sp, #28]
 8008a50:	9d04      	ldr	r5, [sp, #16]
 8008a52:	9f08      	ldr	r7, [sp, #32]
 8008a54:	e73b      	b.n	80088ce <_dtoa_r+0x736>
 8008a56:	9a07      	ldr	r2, [sp, #28]
 8008a58:	e767      	b.n	800892a <_dtoa_r+0x792>
 8008a5a:	9b06      	ldr	r3, [sp, #24]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	dc18      	bgt.n	8008a92 <_dtoa_r+0x8fa>
 8008a60:	f1ba 0f00 	cmp.w	sl, #0
 8008a64:	d115      	bne.n	8008a92 <_dtoa_r+0x8fa>
 8008a66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a6a:	b993      	cbnz	r3, 8008a92 <_dtoa_r+0x8fa>
 8008a6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a70:	0d1b      	lsrs	r3, r3, #20
 8008a72:	051b      	lsls	r3, r3, #20
 8008a74:	b183      	cbz	r3, 8008a98 <_dtoa_r+0x900>
 8008a76:	9b04      	ldr	r3, [sp, #16]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	9304      	str	r3, [sp, #16]
 8008a7c:	9b05      	ldr	r3, [sp, #20]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	9305      	str	r3, [sp, #20]
 8008a82:	f04f 0801 	mov.w	r8, #1
 8008a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f47f af6a 	bne.w	8008962 <_dtoa_r+0x7ca>
 8008a8e:	2001      	movs	r0, #1
 8008a90:	e76f      	b.n	8008972 <_dtoa_r+0x7da>
 8008a92:	f04f 0800 	mov.w	r8, #0
 8008a96:	e7f6      	b.n	8008a86 <_dtoa_r+0x8ee>
 8008a98:	4698      	mov	r8, r3
 8008a9a:	e7f4      	b.n	8008a86 <_dtoa_r+0x8ee>
 8008a9c:	f43f af7d 	beq.w	800899a <_dtoa_r+0x802>
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	301c      	adds	r0, #28
 8008aa4:	e772      	b.n	800898c <_dtoa_r+0x7f4>
 8008aa6:	9b03      	ldr	r3, [sp, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	dc37      	bgt.n	8008b1c <_dtoa_r+0x984>
 8008aac:	9b06      	ldr	r3, [sp, #24]
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	dd34      	ble.n	8008b1c <_dtoa_r+0x984>
 8008ab2:	9b03      	ldr	r3, [sp, #12]
 8008ab4:	9302      	str	r3, [sp, #8]
 8008ab6:	9b02      	ldr	r3, [sp, #8]
 8008ab8:	b96b      	cbnz	r3, 8008ad6 <_dtoa_r+0x93e>
 8008aba:	4631      	mov	r1, r6
 8008abc:	2205      	movs	r2, #5
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 face 	bl	8009060 <__multadd>
 8008ac4:	4601      	mov	r1, r0
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	ee18 0a10 	vmov	r0, s16
 8008acc:	f000 fce8 	bl	80094a0 <__mcmp>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	f73f adbb 	bgt.w	800864c <_dtoa_r+0x4b4>
 8008ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad8:	9d01      	ldr	r5, [sp, #4]
 8008ada:	43db      	mvns	r3, r3
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	f04f 0800 	mov.w	r8, #0
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f000 fa99 	bl	800901c <_Bfree>
 8008aea:	2f00      	cmp	r7, #0
 8008aec:	f43f aea4 	beq.w	8008838 <_dtoa_r+0x6a0>
 8008af0:	f1b8 0f00 	cmp.w	r8, #0
 8008af4:	d005      	beq.n	8008b02 <_dtoa_r+0x96a>
 8008af6:	45b8      	cmp	r8, r7
 8008af8:	d003      	beq.n	8008b02 <_dtoa_r+0x96a>
 8008afa:	4641      	mov	r1, r8
 8008afc:	4620      	mov	r0, r4
 8008afe:	f000 fa8d 	bl	800901c <_Bfree>
 8008b02:	4639      	mov	r1, r7
 8008b04:	4620      	mov	r0, r4
 8008b06:	f000 fa89 	bl	800901c <_Bfree>
 8008b0a:	e695      	b.n	8008838 <_dtoa_r+0x6a0>
 8008b0c:	2600      	movs	r6, #0
 8008b0e:	4637      	mov	r7, r6
 8008b10:	e7e1      	b.n	8008ad6 <_dtoa_r+0x93e>
 8008b12:	9700      	str	r7, [sp, #0]
 8008b14:	4637      	mov	r7, r6
 8008b16:	e599      	b.n	800864c <_dtoa_r+0x4b4>
 8008b18:	40240000 	.word	0x40240000
 8008b1c:	9b08      	ldr	r3, [sp, #32]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 80ca 	beq.w	8008cb8 <_dtoa_r+0xb20>
 8008b24:	9b03      	ldr	r3, [sp, #12]
 8008b26:	9302      	str	r3, [sp, #8]
 8008b28:	2d00      	cmp	r5, #0
 8008b2a:	dd05      	ble.n	8008b38 <_dtoa_r+0x9a0>
 8008b2c:	4639      	mov	r1, r7
 8008b2e:	462a      	mov	r2, r5
 8008b30:	4620      	mov	r0, r4
 8008b32:	f000 fc45 	bl	80093c0 <__lshift>
 8008b36:	4607      	mov	r7, r0
 8008b38:	f1b8 0f00 	cmp.w	r8, #0
 8008b3c:	d05b      	beq.n	8008bf6 <_dtoa_r+0xa5e>
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	4620      	mov	r0, r4
 8008b42:	f000 fa2b 	bl	8008f9c <_Balloc>
 8008b46:	4605      	mov	r5, r0
 8008b48:	b928      	cbnz	r0, 8008b56 <_dtoa_r+0x9be>
 8008b4a:	4b87      	ldr	r3, [pc, #540]	; (8008d68 <_dtoa_r+0xbd0>)
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b52:	f7ff bb3b 	b.w	80081cc <_dtoa_r+0x34>
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	3202      	adds	r2, #2
 8008b5a:	0092      	lsls	r2, r2, #2
 8008b5c:	f107 010c 	add.w	r1, r7, #12
 8008b60:	300c      	adds	r0, #12
 8008b62:	f000 fa0d 	bl	8008f80 <memcpy>
 8008b66:	2201      	movs	r2, #1
 8008b68:	4629      	mov	r1, r5
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f000 fc28 	bl	80093c0 <__lshift>
 8008b70:	9b01      	ldr	r3, [sp, #4]
 8008b72:	f103 0901 	add.w	r9, r3, #1
 8008b76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	9305      	str	r3, [sp, #20]
 8008b7e:	f00a 0301 	and.w	r3, sl, #1
 8008b82:	46b8      	mov	r8, r7
 8008b84:	9304      	str	r3, [sp, #16]
 8008b86:	4607      	mov	r7, r0
 8008b88:	4631      	mov	r1, r6
 8008b8a:	ee18 0a10 	vmov	r0, s16
 8008b8e:	f7ff fa77 	bl	8008080 <quorem>
 8008b92:	4641      	mov	r1, r8
 8008b94:	9002      	str	r0, [sp, #8]
 8008b96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b9a:	ee18 0a10 	vmov	r0, s16
 8008b9e:	f000 fc7f 	bl	80094a0 <__mcmp>
 8008ba2:	463a      	mov	r2, r7
 8008ba4:	9003      	str	r0, [sp, #12]
 8008ba6:	4631      	mov	r1, r6
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f000 fc95 	bl	80094d8 <__mdiff>
 8008bae:	68c2      	ldr	r2, [r0, #12]
 8008bb0:	f109 3bff 	add.w	fp, r9, #4294967295
 8008bb4:	4605      	mov	r5, r0
 8008bb6:	bb02      	cbnz	r2, 8008bfa <_dtoa_r+0xa62>
 8008bb8:	4601      	mov	r1, r0
 8008bba:	ee18 0a10 	vmov	r0, s16
 8008bbe:	f000 fc6f 	bl	80094a0 <__mcmp>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	9207      	str	r2, [sp, #28]
 8008bca:	f000 fa27 	bl	800901c <_Bfree>
 8008bce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008bd2:	ea43 0102 	orr.w	r1, r3, r2
 8008bd6:	9b04      	ldr	r3, [sp, #16]
 8008bd8:	430b      	orrs	r3, r1
 8008bda:	464d      	mov	r5, r9
 8008bdc:	d10f      	bne.n	8008bfe <_dtoa_r+0xa66>
 8008bde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008be2:	d02a      	beq.n	8008c3a <_dtoa_r+0xaa2>
 8008be4:	9b03      	ldr	r3, [sp, #12]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	dd02      	ble.n	8008bf0 <_dtoa_r+0xa58>
 8008bea:	9b02      	ldr	r3, [sp, #8]
 8008bec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008bf0:	f88b a000 	strb.w	sl, [fp]
 8008bf4:	e775      	b.n	8008ae2 <_dtoa_r+0x94a>
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	e7ba      	b.n	8008b70 <_dtoa_r+0x9d8>
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	e7e2      	b.n	8008bc4 <_dtoa_r+0xa2c>
 8008bfe:	9b03      	ldr	r3, [sp, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	db04      	blt.n	8008c0e <_dtoa_r+0xa76>
 8008c04:	9906      	ldr	r1, [sp, #24]
 8008c06:	430b      	orrs	r3, r1
 8008c08:	9904      	ldr	r1, [sp, #16]
 8008c0a:	430b      	orrs	r3, r1
 8008c0c:	d122      	bne.n	8008c54 <_dtoa_r+0xabc>
 8008c0e:	2a00      	cmp	r2, #0
 8008c10:	ddee      	ble.n	8008bf0 <_dtoa_r+0xa58>
 8008c12:	ee18 1a10 	vmov	r1, s16
 8008c16:	2201      	movs	r2, #1
 8008c18:	4620      	mov	r0, r4
 8008c1a:	f000 fbd1 	bl	80093c0 <__lshift>
 8008c1e:	4631      	mov	r1, r6
 8008c20:	ee08 0a10 	vmov	s16, r0
 8008c24:	f000 fc3c 	bl	80094a0 <__mcmp>
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	dc03      	bgt.n	8008c34 <_dtoa_r+0xa9c>
 8008c2c:	d1e0      	bne.n	8008bf0 <_dtoa_r+0xa58>
 8008c2e:	f01a 0f01 	tst.w	sl, #1
 8008c32:	d0dd      	beq.n	8008bf0 <_dtoa_r+0xa58>
 8008c34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c38:	d1d7      	bne.n	8008bea <_dtoa_r+0xa52>
 8008c3a:	2339      	movs	r3, #57	; 0x39
 8008c3c:	f88b 3000 	strb.w	r3, [fp]
 8008c40:	462b      	mov	r3, r5
 8008c42:	461d      	mov	r5, r3
 8008c44:	3b01      	subs	r3, #1
 8008c46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c4a:	2a39      	cmp	r2, #57	; 0x39
 8008c4c:	d071      	beq.n	8008d32 <_dtoa_r+0xb9a>
 8008c4e:	3201      	adds	r2, #1
 8008c50:	701a      	strb	r2, [r3, #0]
 8008c52:	e746      	b.n	8008ae2 <_dtoa_r+0x94a>
 8008c54:	2a00      	cmp	r2, #0
 8008c56:	dd07      	ble.n	8008c68 <_dtoa_r+0xad0>
 8008c58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c5c:	d0ed      	beq.n	8008c3a <_dtoa_r+0xaa2>
 8008c5e:	f10a 0301 	add.w	r3, sl, #1
 8008c62:	f88b 3000 	strb.w	r3, [fp]
 8008c66:	e73c      	b.n	8008ae2 <_dtoa_r+0x94a>
 8008c68:	9b05      	ldr	r3, [sp, #20]
 8008c6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008c6e:	4599      	cmp	r9, r3
 8008c70:	d047      	beq.n	8008d02 <_dtoa_r+0xb6a>
 8008c72:	ee18 1a10 	vmov	r1, s16
 8008c76:	2300      	movs	r3, #0
 8008c78:	220a      	movs	r2, #10
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f000 f9f0 	bl	8009060 <__multadd>
 8008c80:	45b8      	cmp	r8, r7
 8008c82:	ee08 0a10 	vmov	s16, r0
 8008c86:	f04f 0300 	mov.w	r3, #0
 8008c8a:	f04f 020a 	mov.w	r2, #10
 8008c8e:	4641      	mov	r1, r8
 8008c90:	4620      	mov	r0, r4
 8008c92:	d106      	bne.n	8008ca2 <_dtoa_r+0xb0a>
 8008c94:	f000 f9e4 	bl	8009060 <__multadd>
 8008c98:	4680      	mov	r8, r0
 8008c9a:	4607      	mov	r7, r0
 8008c9c:	f109 0901 	add.w	r9, r9, #1
 8008ca0:	e772      	b.n	8008b88 <_dtoa_r+0x9f0>
 8008ca2:	f000 f9dd 	bl	8009060 <__multadd>
 8008ca6:	4639      	mov	r1, r7
 8008ca8:	4680      	mov	r8, r0
 8008caa:	2300      	movs	r3, #0
 8008cac:	220a      	movs	r2, #10
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f000 f9d6 	bl	8009060 <__multadd>
 8008cb4:	4607      	mov	r7, r0
 8008cb6:	e7f1      	b.n	8008c9c <_dtoa_r+0xb04>
 8008cb8:	9b03      	ldr	r3, [sp, #12]
 8008cba:	9302      	str	r3, [sp, #8]
 8008cbc:	9d01      	ldr	r5, [sp, #4]
 8008cbe:	ee18 0a10 	vmov	r0, s16
 8008cc2:	4631      	mov	r1, r6
 8008cc4:	f7ff f9dc 	bl	8008080 <quorem>
 8008cc8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008ccc:	9b01      	ldr	r3, [sp, #4]
 8008cce:	f805 ab01 	strb.w	sl, [r5], #1
 8008cd2:	1aea      	subs	r2, r5, r3
 8008cd4:	9b02      	ldr	r3, [sp, #8]
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	dd09      	ble.n	8008cee <_dtoa_r+0xb56>
 8008cda:	ee18 1a10 	vmov	r1, s16
 8008cde:	2300      	movs	r3, #0
 8008ce0:	220a      	movs	r2, #10
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f000 f9bc 	bl	8009060 <__multadd>
 8008ce8:	ee08 0a10 	vmov	s16, r0
 8008cec:	e7e7      	b.n	8008cbe <_dtoa_r+0xb26>
 8008cee:	9b02      	ldr	r3, [sp, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	bfc8      	it	gt
 8008cf4:	461d      	movgt	r5, r3
 8008cf6:	9b01      	ldr	r3, [sp, #4]
 8008cf8:	bfd8      	it	le
 8008cfa:	2501      	movle	r5, #1
 8008cfc:	441d      	add	r5, r3
 8008cfe:	f04f 0800 	mov.w	r8, #0
 8008d02:	ee18 1a10 	vmov	r1, s16
 8008d06:	2201      	movs	r2, #1
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f000 fb59 	bl	80093c0 <__lshift>
 8008d0e:	4631      	mov	r1, r6
 8008d10:	ee08 0a10 	vmov	s16, r0
 8008d14:	f000 fbc4 	bl	80094a0 <__mcmp>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	dc91      	bgt.n	8008c40 <_dtoa_r+0xaa8>
 8008d1c:	d102      	bne.n	8008d24 <_dtoa_r+0xb8c>
 8008d1e:	f01a 0f01 	tst.w	sl, #1
 8008d22:	d18d      	bne.n	8008c40 <_dtoa_r+0xaa8>
 8008d24:	462b      	mov	r3, r5
 8008d26:	461d      	mov	r5, r3
 8008d28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d2c:	2a30      	cmp	r2, #48	; 0x30
 8008d2e:	d0fa      	beq.n	8008d26 <_dtoa_r+0xb8e>
 8008d30:	e6d7      	b.n	8008ae2 <_dtoa_r+0x94a>
 8008d32:	9a01      	ldr	r2, [sp, #4]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d184      	bne.n	8008c42 <_dtoa_r+0xaaa>
 8008d38:	9b00      	ldr	r3, [sp, #0]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	2331      	movs	r3, #49	; 0x31
 8008d40:	7013      	strb	r3, [r2, #0]
 8008d42:	e6ce      	b.n	8008ae2 <_dtoa_r+0x94a>
 8008d44:	4b09      	ldr	r3, [pc, #36]	; (8008d6c <_dtoa_r+0xbd4>)
 8008d46:	f7ff ba95 	b.w	8008274 <_dtoa_r+0xdc>
 8008d4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f47f aa6e 	bne.w	800822e <_dtoa_r+0x96>
 8008d52:	4b07      	ldr	r3, [pc, #28]	; (8008d70 <_dtoa_r+0xbd8>)
 8008d54:	f7ff ba8e 	b.w	8008274 <_dtoa_r+0xdc>
 8008d58:	9b02      	ldr	r3, [sp, #8]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	dcae      	bgt.n	8008cbc <_dtoa_r+0xb24>
 8008d5e:	9b06      	ldr	r3, [sp, #24]
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	f73f aea8 	bgt.w	8008ab6 <_dtoa_r+0x91e>
 8008d66:	e7a9      	b.n	8008cbc <_dtoa_r+0xb24>
 8008d68:	0800b487 	.word	0x0800b487
 8008d6c:	0800b3e4 	.word	0x0800b3e4
 8008d70:	0800b408 	.word	0x0800b408

08008d74 <std>:
 8008d74:	2300      	movs	r3, #0
 8008d76:	b510      	push	{r4, lr}
 8008d78:	4604      	mov	r4, r0
 8008d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8008d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d82:	6083      	str	r3, [r0, #8]
 8008d84:	8181      	strh	r1, [r0, #12]
 8008d86:	6643      	str	r3, [r0, #100]	; 0x64
 8008d88:	81c2      	strh	r2, [r0, #14]
 8008d8a:	6183      	str	r3, [r0, #24]
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	2208      	movs	r2, #8
 8008d90:	305c      	adds	r0, #92	; 0x5c
 8008d92:	f7fe fccb 	bl	800772c <memset>
 8008d96:	4b05      	ldr	r3, [pc, #20]	; (8008dac <std+0x38>)
 8008d98:	6263      	str	r3, [r4, #36]	; 0x24
 8008d9a:	4b05      	ldr	r3, [pc, #20]	; (8008db0 <std+0x3c>)
 8008d9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d9e:	4b05      	ldr	r3, [pc, #20]	; (8008db4 <std+0x40>)
 8008da0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008da2:	4b05      	ldr	r3, [pc, #20]	; (8008db8 <std+0x44>)
 8008da4:	6224      	str	r4, [r4, #32]
 8008da6:	6323      	str	r3, [r4, #48]	; 0x30
 8008da8:	bd10      	pop	{r4, pc}
 8008daa:	bf00      	nop
 8008dac:	08009e1d 	.word	0x08009e1d
 8008db0:	08009e3f 	.word	0x08009e3f
 8008db4:	08009e77 	.word	0x08009e77
 8008db8:	08009e9b 	.word	0x08009e9b

08008dbc <_cleanup_r>:
 8008dbc:	4901      	ldr	r1, [pc, #4]	; (8008dc4 <_cleanup_r+0x8>)
 8008dbe:	f000 b8af 	b.w	8008f20 <_fwalk_reent>
 8008dc2:	bf00      	nop
 8008dc4:	0800a1b1 	.word	0x0800a1b1

08008dc8 <__sfmoreglue>:
 8008dc8:	b570      	push	{r4, r5, r6, lr}
 8008dca:	2268      	movs	r2, #104	; 0x68
 8008dcc:	1e4d      	subs	r5, r1, #1
 8008dce:	4355      	muls	r5, r2
 8008dd0:	460e      	mov	r6, r1
 8008dd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008dd6:	f000 fce7 	bl	80097a8 <_malloc_r>
 8008dda:	4604      	mov	r4, r0
 8008ddc:	b140      	cbz	r0, 8008df0 <__sfmoreglue+0x28>
 8008dde:	2100      	movs	r1, #0
 8008de0:	e9c0 1600 	strd	r1, r6, [r0]
 8008de4:	300c      	adds	r0, #12
 8008de6:	60a0      	str	r0, [r4, #8]
 8008de8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008dec:	f7fe fc9e 	bl	800772c <memset>
 8008df0:	4620      	mov	r0, r4
 8008df2:	bd70      	pop	{r4, r5, r6, pc}

08008df4 <__sfp_lock_acquire>:
 8008df4:	4801      	ldr	r0, [pc, #4]	; (8008dfc <__sfp_lock_acquire+0x8>)
 8008df6:	f000 b8b8 	b.w	8008f6a <__retarget_lock_acquire_recursive>
 8008dfa:	bf00      	nop
 8008dfc:	20000ae5 	.word	0x20000ae5

08008e00 <__sfp_lock_release>:
 8008e00:	4801      	ldr	r0, [pc, #4]	; (8008e08 <__sfp_lock_release+0x8>)
 8008e02:	f000 b8b3 	b.w	8008f6c <__retarget_lock_release_recursive>
 8008e06:	bf00      	nop
 8008e08:	20000ae5 	.word	0x20000ae5

08008e0c <__sinit_lock_acquire>:
 8008e0c:	4801      	ldr	r0, [pc, #4]	; (8008e14 <__sinit_lock_acquire+0x8>)
 8008e0e:	f000 b8ac 	b.w	8008f6a <__retarget_lock_acquire_recursive>
 8008e12:	bf00      	nop
 8008e14:	20000ae6 	.word	0x20000ae6

08008e18 <__sinit_lock_release>:
 8008e18:	4801      	ldr	r0, [pc, #4]	; (8008e20 <__sinit_lock_release+0x8>)
 8008e1a:	f000 b8a7 	b.w	8008f6c <__retarget_lock_release_recursive>
 8008e1e:	bf00      	nop
 8008e20:	20000ae6 	.word	0x20000ae6

08008e24 <__sinit>:
 8008e24:	b510      	push	{r4, lr}
 8008e26:	4604      	mov	r4, r0
 8008e28:	f7ff fff0 	bl	8008e0c <__sinit_lock_acquire>
 8008e2c:	69a3      	ldr	r3, [r4, #24]
 8008e2e:	b11b      	cbz	r3, 8008e38 <__sinit+0x14>
 8008e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e34:	f7ff bff0 	b.w	8008e18 <__sinit_lock_release>
 8008e38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e3c:	6523      	str	r3, [r4, #80]	; 0x50
 8008e3e:	4b13      	ldr	r3, [pc, #76]	; (8008e8c <__sinit+0x68>)
 8008e40:	4a13      	ldr	r2, [pc, #76]	; (8008e90 <__sinit+0x6c>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e46:	42a3      	cmp	r3, r4
 8008e48:	bf04      	itt	eq
 8008e4a:	2301      	moveq	r3, #1
 8008e4c:	61a3      	streq	r3, [r4, #24]
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f000 f820 	bl	8008e94 <__sfp>
 8008e54:	6060      	str	r0, [r4, #4]
 8008e56:	4620      	mov	r0, r4
 8008e58:	f000 f81c 	bl	8008e94 <__sfp>
 8008e5c:	60a0      	str	r0, [r4, #8]
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f000 f818 	bl	8008e94 <__sfp>
 8008e64:	2200      	movs	r2, #0
 8008e66:	60e0      	str	r0, [r4, #12]
 8008e68:	2104      	movs	r1, #4
 8008e6a:	6860      	ldr	r0, [r4, #4]
 8008e6c:	f7ff ff82 	bl	8008d74 <std>
 8008e70:	68a0      	ldr	r0, [r4, #8]
 8008e72:	2201      	movs	r2, #1
 8008e74:	2109      	movs	r1, #9
 8008e76:	f7ff ff7d 	bl	8008d74 <std>
 8008e7a:	68e0      	ldr	r0, [r4, #12]
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	2112      	movs	r1, #18
 8008e80:	f7ff ff78 	bl	8008d74 <std>
 8008e84:	2301      	movs	r3, #1
 8008e86:	61a3      	str	r3, [r4, #24]
 8008e88:	e7d2      	b.n	8008e30 <__sinit+0xc>
 8008e8a:	bf00      	nop
 8008e8c:	0800b3d0 	.word	0x0800b3d0
 8008e90:	08008dbd 	.word	0x08008dbd

08008e94 <__sfp>:
 8008e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e96:	4607      	mov	r7, r0
 8008e98:	f7ff ffac 	bl	8008df4 <__sfp_lock_acquire>
 8008e9c:	4b1e      	ldr	r3, [pc, #120]	; (8008f18 <__sfp+0x84>)
 8008e9e:	681e      	ldr	r6, [r3, #0]
 8008ea0:	69b3      	ldr	r3, [r6, #24]
 8008ea2:	b913      	cbnz	r3, 8008eaa <__sfp+0x16>
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f7ff ffbd 	bl	8008e24 <__sinit>
 8008eaa:	3648      	adds	r6, #72	; 0x48
 8008eac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	d503      	bpl.n	8008ebc <__sfp+0x28>
 8008eb4:	6833      	ldr	r3, [r6, #0]
 8008eb6:	b30b      	cbz	r3, 8008efc <__sfp+0x68>
 8008eb8:	6836      	ldr	r6, [r6, #0]
 8008eba:	e7f7      	b.n	8008eac <__sfp+0x18>
 8008ebc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ec0:	b9d5      	cbnz	r5, 8008ef8 <__sfp+0x64>
 8008ec2:	4b16      	ldr	r3, [pc, #88]	; (8008f1c <__sfp+0x88>)
 8008ec4:	60e3      	str	r3, [r4, #12]
 8008ec6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008eca:	6665      	str	r5, [r4, #100]	; 0x64
 8008ecc:	f000 f84c 	bl	8008f68 <__retarget_lock_init_recursive>
 8008ed0:	f7ff ff96 	bl	8008e00 <__sfp_lock_release>
 8008ed4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ed8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008edc:	6025      	str	r5, [r4, #0]
 8008ede:	61a5      	str	r5, [r4, #24]
 8008ee0:	2208      	movs	r2, #8
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ee8:	f7fe fc20 	bl	800772c <memset>
 8008eec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ef0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef8:	3468      	adds	r4, #104	; 0x68
 8008efa:	e7d9      	b.n	8008eb0 <__sfp+0x1c>
 8008efc:	2104      	movs	r1, #4
 8008efe:	4638      	mov	r0, r7
 8008f00:	f7ff ff62 	bl	8008dc8 <__sfmoreglue>
 8008f04:	4604      	mov	r4, r0
 8008f06:	6030      	str	r0, [r6, #0]
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d1d5      	bne.n	8008eb8 <__sfp+0x24>
 8008f0c:	f7ff ff78 	bl	8008e00 <__sfp_lock_release>
 8008f10:	230c      	movs	r3, #12
 8008f12:	603b      	str	r3, [r7, #0]
 8008f14:	e7ee      	b.n	8008ef4 <__sfp+0x60>
 8008f16:	bf00      	nop
 8008f18:	0800b3d0 	.word	0x0800b3d0
 8008f1c:	ffff0001 	.word	0xffff0001

08008f20 <_fwalk_reent>:
 8008f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f24:	4606      	mov	r6, r0
 8008f26:	4688      	mov	r8, r1
 8008f28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f2c:	2700      	movs	r7, #0
 8008f2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f32:	f1b9 0901 	subs.w	r9, r9, #1
 8008f36:	d505      	bpl.n	8008f44 <_fwalk_reent+0x24>
 8008f38:	6824      	ldr	r4, [r4, #0]
 8008f3a:	2c00      	cmp	r4, #0
 8008f3c:	d1f7      	bne.n	8008f2e <_fwalk_reent+0xe>
 8008f3e:	4638      	mov	r0, r7
 8008f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f44:	89ab      	ldrh	r3, [r5, #12]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d907      	bls.n	8008f5a <_fwalk_reent+0x3a>
 8008f4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	d003      	beq.n	8008f5a <_fwalk_reent+0x3a>
 8008f52:	4629      	mov	r1, r5
 8008f54:	4630      	mov	r0, r6
 8008f56:	47c0      	blx	r8
 8008f58:	4307      	orrs	r7, r0
 8008f5a:	3568      	adds	r5, #104	; 0x68
 8008f5c:	e7e9      	b.n	8008f32 <_fwalk_reent+0x12>
	...

08008f60 <_localeconv_r>:
 8008f60:	4800      	ldr	r0, [pc, #0]	; (8008f64 <_localeconv_r+0x4>)
 8008f62:	4770      	bx	lr
 8008f64:	20000160 	.word	0x20000160

08008f68 <__retarget_lock_init_recursive>:
 8008f68:	4770      	bx	lr

08008f6a <__retarget_lock_acquire_recursive>:
 8008f6a:	4770      	bx	lr

08008f6c <__retarget_lock_release_recursive>:
 8008f6c:	4770      	bx	lr
	...

08008f70 <malloc>:
 8008f70:	4b02      	ldr	r3, [pc, #8]	; (8008f7c <malloc+0xc>)
 8008f72:	4601      	mov	r1, r0
 8008f74:	6818      	ldr	r0, [r3, #0]
 8008f76:	f000 bc17 	b.w	80097a8 <_malloc_r>
 8008f7a:	bf00      	nop
 8008f7c:	2000000c 	.word	0x2000000c

08008f80 <memcpy>:
 8008f80:	440a      	add	r2, r1
 8008f82:	4291      	cmp	r1, r2
 8008f84:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f88:	d100      	bne.n	8008f8c <memcpy+0xc>
 8008f8a:	4770      	bx	lr
 8008f8c:	b510      	push	{r4, lr}
 8008f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f96:	4291      	cmp	r1, r2
 8008f98:	d1f9      	bne.n	8008f8e <memcpy+0xe>
 8008f9a:	bd10      	pop	{r4, pc}

08008f9c <_Balloc>:
 8008f9c:	b570      	push	{r4, r5, r6, lr}
 8008f9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fa0:	4604      	mov	r4, r0
 8008fa2:	460d      	mov	r5, r1
 8008fa4:	b976      	cbnz	r6, 8008fc4 <_Balloc+0x28>
 8008fa6:	2010      	movs	r0, #16
 8008fa8:	f7ff ffe2 	bl	8008f70 <malloc>
 8008fac:	4602      	mov	r2, r0
 8008fae:	6260      	str	r0, [r4, #36]	; 0x24
 8008fb0:	b920      	cbnz	r0, 8008fbc <_Balloc+0x20>
 8008fb2:	4b18      	ldr	r3, [pc, #96]	; (8009014 <_Balloc+0x78>)
 8008fb4:	4818      	ldr	r0, [pc, #96]	; (8009018 <_Balloc+0x7c>)
 8008fb6:	2166      	movs	r1, #102	; 0x66
 8008fb8:	f001 f846 	bl	800a048 <__assert_func>
 8008fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fc0:	6006      	str	r6, [r0, #0]
 8008fc2:	60c6      	str	r6, [r0, #12]
 8008fc4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008fc6:	68f3      	ldr	r3, [r6, #12]
 8008fc8:	b183      	cbz	r3, 8008fec <_Balloc+0x50>
 8008fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fd2:	b9b8      	cbnz	r0, 8009004 <_Balloc+0x68>
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	fa01 f605 	lsl.w	r6, r1, r5
 8008fda:	1d72      	adds	r2, r6, #5
 8008fdc:	0092      	lsls	r2, r2, #2
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f000 fb60 	bl	80096a4 <_calloc_r>
 8008fe4:	b160      	cbz	r0, 8009000 <_Balloc+0x64>
 8008fe6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008fea:	e00e      	b.n	800900a <_Balloc+0x6e>
 8008fec:	2221      	movs	r2, #33	; 0x21
 8008fee:	2104      	movs	r1, #4
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f000 fb57 	bl	80096a4 <_calloc_r>
 8008ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ff8:	60f0      	str	r0, [r6, #12]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1e4      	bne.n	8008fca <_Balloc+0x2e>
 8009000:	2000      	movs	r0, #0
 8009002:	bd70      	pop	{r4, r5, r6, pc}
 8009004:	6802      	ldr	r2, [r0, #0]
 8009006:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800900a:	2300      	movs	r3, #0
 800900c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009010:	e7f7      	b.n	8009002 <_Balloc+0x66>
 8009012:	bf00      	nop
 8009014:	0800b415 	.word	0x0800b415
 8009018:	0800b4f8 	.word	0x0800b4f8

0800901c <_Bfree>:
 800901c:	b570      	push	{r4, r5, r6, lr}
 800901e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009020:	4605      	mov	r5, r0
 8009022:	460c      	mov	r4, r1
 8009024:	b976      	cbnz	r6, 8009044 <_Bfree+0x28>
 8009026:	2010      	movs	r0, #16
 8009028:	f7ff ffa2 	bl	8008f70 <malloc>
 800902c:	4602      	mov	r2, r0
 800902e:	6268      	str	r0, [r5, #36]	; 0x24
 8009030:	b920      	cbnz	r0, 800903c <_Bfree+0x20>
 8009032:	4b09      	ldr	r3, [pc, #36]	; (8009058 <_Bfree+0x3c>)
 8009034:	4809      	ldr	r0, [pc, #36]	; (800905c <_Bfree+0x40>)
 8009036:	218a      	movs	r1, #138	; 0x8a
 8009038:	f001 f806 	bl	800a048 <__assert_func>
 800903c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009040:	6006      	str	r6, [r0, #0]
 8009042:	60c6      	str	r6, [r0, #12]
 8009044:	b13c      	cbz	r4, 8009056 <_Bfree+0x3a>
 8009046:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009048:	6862      	ldr	r2, [r4, #4]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009050:	6021      	str	r1, [r4, #0]
 8009052:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009056:	bd70      	pop	{r4, r5, r6, pc}
 8009058:	0800b415 	.word	0x0800b415
 800905c:	0800b4f8 	.word	0x0800b4f8

08009060 <__multadd>:
 8009060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009064:	690d      	ldr	r5, [r1, #16]
 8009066:	4607      	mov	r7, r0
 8009068:	460c      	mov	r4, r1
 800906a:	461e      	mov	r6, r3
 800906c:	f101 0c14 	add.w	ip, r1, #20
 8009070:	2000      	movs	r0, #0
 8009072:	f8dc 3000 	ldr.w	r3, [ip]
 8009076:	b299      	uxth	r1, r3
 8009078:	fb02 6101 	mla	r1, r2, r1, r6
 800907c:	0c1e      	lsrs	r6, r3, #16
 800907e:	0c0b      	lsrs	r3, r1, #16
 8009080:	fb02 3306 	mla	r3, r2, r6, r3
 8009084:	b289      	uxth	r1, r1
 8009086:	3001      	adds	r0, #1
 8009088:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800908c:	4285      	cmp	r5, r0
 800908e:	f84c 1b04 	str.w	r1, [ip], #4
 8009092:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009096:	dcec      	bgt.n	8009072 <__multadd+0x12>
 8009098:	b30e      	cbz	r6, 80090de <__multadd+0x7e>
 800909a:	68a3      	ldr	r3, [r4, #8]
 800909c:	42ab      	cmp	r3, r5
 800909e:	dc19      	bgt.n	80090d4 <__multadd+0x74>
 80090a0:	6861      	ldr	r1, [r4, #4]
 80090a2:	4638      	mov	r0, r7
 80090a4:	3101      	adds	r1, #1
 80090a6:	f7ff ff79 	bl	8008f9c <_Balloc>
 80090aa:	4680      	mov	r8, r0
 80090ac:	b928      	cbnz	r0, 80090ba <__multadd+0x5a>
 80090ae:	4602      	mov	r2, r0
 80090b0:	4b0c      	ldr	r3, [pc, #48]	; (80090e4 <__multadd+0x84>)
 80090b2:	480d      	ldr	r0, [pc, #52]	; (80090e8 <__multadd+0x88>)
 80090b4:	21b5      	movs	r1, #181	; 0xb5
 80090b6:	f000 ffc7 	bl	800a048 <__assert_func>
 80090ba:	6922      	ldr	r2, [r4, #16]
 80090bc:	3202      	adds	r2, #2
 80090be:	f104 010c 	add.w	r1, r4, #12
 80090c2:	0092      	lsls	r2, r2, #2
 80090c4:	300c      	adds	r0, #12
 80090c6:	f7ff ff5b 	bl	8008f80 <memcpy>
 80090ca:	4621      	mov	r1, r4
 80090cc:	4638      	mov	r0, r7
 80090ce:	f7ff ffa5 	bl	800901c <_Bfree>
 80090d2:	4644      	mov	r4, r8
 80090d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090d8:	3501      	adds	r5, #1
 80090da:	615e      	str	r6, [r3, #20]
 80090dc:	6125      	str	r5, [r4, #16]
 80090de:	4620      	mov	r0, r4
 80090e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090e4:	0800b487 	.word	0x0800b487
 80090e8:	0800b4f8 	.word	0x0800b4f8

080090ec <__hi0bits>:
 80090ec:	0c03      	lsrs	r3, r0, #16
 80090ee:	041b      	lsls	r3, r3, #16
 80090f0:	b9d3      	cbnz	r3, 8009128 <__hi0bits+0x3c>
 80090f2:	0400      	lsls	r0, r0, #16
 80090f4:	2310      	movs	r3, #16
 80090f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80090fa:	bf04      	itt	eq
 80090fc:	0200      	lsleq	r0, r0, #8
 80090fe:	3308      	addeq	r3, #8
 8009100:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009104:	bf04      	itt	eq
 8009106:	0100      	lsleq	r0, r0, #4
 8009108:	3304      	addeq	r3, #4
 800910a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800910e:	bf04      	itt	eq
 8009110:	0080      	lsleq	r0, r0, #2
 8009112:	3302      	addeq	r3, #2
 8009114:	2800      	cmp	r0, #0
 8009116:	db05      	blt.n	8009124 <__hi0bits+0x38>
 8009118:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800911c:	f103 0301 	add.w	r3, r3, #1
 8009120:	bf08      	it	eq
 8009122:	2320      	moveq	r3, #32
 8009124:	4618      	mov	r0, r3
 8009126:	4770      	bx	lr
 8009128:	2300      	movs	r3, #0
 800912a:	e7e4      	b.n	80090f6 <__hi0bits+0xa>

0800912c <__lo0bits>:
 800912c:	6803      	ldr	r3, [r0, #0]
 800912e:	f013 0207 	ands.w	r2, r3, #7
 8009132:	4601      	mov	r1, r0
 8009134:	d00b      	beq.n	800914e <__lo0bits+0x22>
 8009136:	07da      	lsls	r2, r3, #31
 8009138:	d423      	bmi.n	8009182 <__lo0bits+0x56>
 800913a:	0798      	lsls	r0, r3, #30
 800913c:	bf49      	itett	mi
 800913e:	085b      	lsrmi	r3, r3, #1
 8009140:	089b      	lsrpl	r3, r3, #2
 8009142:	2001      	movmi	r0, #1
 8009144:	600b      	strmi	r3, [r1, #0]
 8009146:	bf5c      	itt	pl
 8009148:	600b      	strpl	r3, [r1, #0]
 800914a:	2002      	movpl	r0, #2
 800914c:	4770      	bx	lr
 800914e:	b298      	uxth	r0, r3
 8009150:	b9a8      	cbnz	r0, 800917e <__lo0bits+0x52>
 8009152:	0c1b      	lsrs	r3, r3, #16
 8009154:	2010      	movs	r0, #16
 8009156:	b2da      	uxtb	r2, r3
 8009158:	b90a      	cbnz	r2, 800915e <__lo0bits+0x32>
 800915a:	3008      	adds	r0, #8
 800915c:	0a1b      	lsrs	r3, r3, #8
 800915e:	071a      	lsls	r2, r3, #28
 8009160:	bf04      	itt	eq
 8009162:	091b      	lsreq	r3, r3, #4
 8009164:	3004      	addeq	r0, #4
 8009166:	079a      	lsls	r2, r3, #30
 8009168:	bf04      	itt	eq
 800916a:	089b      	lsreq	r3, r3, #2
 800916c:	3002      	addeq	r0, #2
 800916e:	07da      	lsls	r2, r3, #31
 8009170:	d403      	bmi.n	800917a <__lo0bits+0x4e>
 8009172:	085b      	lsrs	r3, r3, #1
 8009174:	f100 0001 	add.w	r0, r0, #1
 8009178:	d005      	beq.n	8009186 <__lo0bits+0x5a>
 800917a:	600b      	str	r3, [r1, #0]
 800917c:	4770      	bx	lr
 800917e:	4610      	mov	r0, r2
 8009180:	e7e9      	b.n	8009156 <__lo0bits+0x2a>
 8009182:	2000      	movs	r0, #0
 8009184:	4770      	bx	lr
 8009186:	2020      	movs	r0, #32
 8009188:	4770      	bx	lr
	...

0800918c <__i2b>:
 800918c:	b510      	push	{r4, lr}
 800918e:	460c      	mov	r4, r1
 8009190:	2101      	movs	r1, #1
 8009192:	f7ff ff03 	bl	8008f9c <_Balloc>
 8009196:	4602      	mov	r2, r0
 8009198:	b928      	cbnz	r0, 80091a6 <__i2b+0x1a>
 800919a:	4b05      	ldr	r3, [pc, #20]	; (80091b0 <__i2b+0x24>)
 800919c:	4805      	ldr	r0, [pc, #20]	; (80091b4 <__i2b+0x28>)
 800919e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80091a2:	f000 ff51 	bl	800a048 <__assert_func>
 80091a6:	2301      	movs	r3, #1
 80091a8:	6144      	str	r4, [r0, #20]
 80091aa:	6103      	str	r3, [r0, #16]
 80091ac:	bd10      	pop	{r4, pc}
 80091ae:	bf00      	nop
 80091b0:	0800b487 	.word	0x0800b487
 80091b4:	0800b4f8 	.word	0x0800b4f8

080091b8 <__multiply>:
 80091b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091bc:	4691      	mov	r9, r2
 80091be:	690a      	ldr	r2, [r1, #16]
 80091c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	bfb8      	it	lt
 80091c8:	460b      	movlt	r3, r1
 80091ca:	460c      	mov	r4, r1
 80091cc:	bfbc      	itt	lt
 80091ce:	464c      	movlt	r4, r9
 80091d0:	4699      	movlt	r9, r3
 80091d2:	6927      	ldr	r7, [r4, #16]
 80091d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80091d8:	68a3      	ldr	r3, [r4, #8]
 80091da:	6861      	ldr	r1, [r4, #4]
 80091dc:	eb07 060a 	add.w	r6, r7, sl
 80091e0:	42b3      	cmp	r3, r6
 80091e2:	b085      	sub	sp, #20
 80091e4:	bfb8      	it	lt
 80091e6:	3101      	addlt	r1, #1
 80091e8:	f7ff fed8 	bl	8008f9c <_Balloc>
 80091ec:	b930      	cbnz	r0, 80091fc <__multiply+0x44>
 80091ee:	4602      	mov	r2, r0
 80091f0:	4b44      	ldr	r3, [pc, #272]	; (8009304 <__multiply+0x14c>)
 80091f2:	4845      	ldr	r0, [pc, #276]	; (8009308 <__multiply+0x150>)
 80091f4:	f240 115d 	movw	r1, #349	; 0x15d
 80091f8:	f000 ff26 	bl	800a048 <__assert_func>
 80091fc:	f100 0514 	add.w	r5, r0, #20
 8009200:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009204:	462b      	mov	r3, r5
 8009206:	2200      	movs	r2, #0
 8009208:	4543      	cmp	r3, r8
 800920a:	d321      	bcc.n	8009250 <__multiply+0x98>
 800920c:	f104 0314 	add.w	r3, r4, #20
 8009210:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009214:	f109 0314 	add.w	r3, r9, #20
 8009218:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800921c:	9202      	str	r2, [sp, #8]
 800921e:	1b3a      	subs	r2, r7, r4
 8009220:	3a15      	subs	r2, #21
 8009222:	f022 0203 	bic.w	r2, r2, #3
 8009226:	3204      	adds	r2, #4
 8009228:	f104 0115 	add.w	r1, r4, #21
 800922c:	428f      	cmp	r7, r1
 800922e:	bf38      	it	cc
 8009230:	2204      	movcc	r2, #4
 8009232:	9201      	str	r2, [sp, #4]
 8009234:	9a02      	ldr	r2, [sp, #8]
 8009236:	9303      	str	r3, [sp, #12]
 8009238:	429a      	cmp	r2, r3
 800923a:	d80c      	bhi.n	8009256 <__multiply+0x9e>
 800923c:	2e00      	cmp	r6, #0
 800923e:	dd03      	ble.n	8009248 <__multiply+0x90>
 8009240:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009244:	2b00      	cmp	r3, #0
 8009246:	d05a      	beq.n	80092fe <__multiply+0x146>
 8009248:	6106      	str	r6, [r0, #16]
 800924a:	b005      	add	sp, #20
 800924c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009250:	f843 2b04 	str.w	r2, [r3], #4
 8009254:	e7d8      	b.n	8009208 <__multiply+0x50>
 8009256:	f8b3 a000 	ldrh.w	sl, [r3]
 800925a:	f1ba 0f00 	cmp.w	sl, #0
 800925e:	d024      	beq.n	80092aa <__multiply+0xf2>
 8009260:	f104 0e14 	add.w	lr, r4, #20
 8009264:	46a9      	mov	r9, r5
 8009266:	f04f 0c00 	mov.w	ip, #0
 800926a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800926e:	f8d9 1000 	ldr.w	r1, [r9]
 8009272:	fa1f fb82 	uxth.w	fp, r2
 8009276:	b289      	uxth	r1, r1
 8009278:	fb0a 110b 	mla	r1, sl, fp, r1
 800927c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009280:	f8d9 2000 	ldr.w	r2, [r9]
 8009284:	4461      	add	r1, ip
 8009286:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800928a:	fb0a c20b 	mla	r2, sl, fp, ip
 800928e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009292:	b289      	uxth	r1, r1
 8009294:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009298:	4577      	cmp	r7, lr
 800929a:	f849 1b04 	str.w	r1, [r9], #4
 800929e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092a2:	d8e2      	bhi.n	800926a <__multiply+0xb2>
 80092a4:	9a01      	ldr	r2, [sp, #4]
 80092a6:	f845 c002 	str.w	ip, [r5, r2]
 80092aa:	9a03      	ldr	r2, [sp, #12]
 80092ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092b0:	3304      	adds	r3, #4
 80092b2:	f1b9 0f00 	cmp.w	r9, #0
 80092b6:	d020      	beq.n	80092fa <__multiply+0x142>
 80092b8:	6829      	ldr	r1, [r5, #0]
 80092ba:	f104 0c14 	add.w	ip, r4, #20
 80092be:	46ae      	mov	lr, r5
 80092c0:	f04f 0a00 	mov.w	sl, #0
 80092c4:	f8bc b000 	ldrh.w	fp, [ip]
 80092c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80092cc:	fb09 220b 	mla	r2, r9, fp, r2
 80092d0:	4492      	add	sl, r2
 80092d2:	b289      	uxth	r1, r1
 80092d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80092d8:	f84e 1b04 	str.w	r1, [lr], #4
 80092dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80092e0:	f8be 1000 	ldrh.w	r1, [lr]
 80092e4:	0c12      	lsrs	r2, r2, #16
 80092e6:	fb09 1102 	mla	r1, r9, r2, r1
 80092ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80092ee:	4567      	cmp	r7, ip
 80092f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80092f4:	d8e6      	bhi.n	80092c4 <__multiply+0x10c>
 80092f6:	9a01      	ldr	r2, [sp, #4]
 80092f8:	50a9      	str	r1, [r5, r2]
 80092fa:	3504      	adds	r5, #4
 80092fc:	e79a      	b.n	8009234 <__multiply+0x7c>
 80092fe:	3e01      	subs	r6, #1
 8009300:	e79c      	b.n	800923c <__multiply+0x84>
 8009302:	bf00      	nop
 8009304:	0800b487 	.word	0x0800b487
 8009308:	0800b4f8 	.word	0x0800b4f8

0800930c <__pow5mult>:
 800930c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009310:	4615      	mov	r5, r2
 8009312:	f012 0203 	ands.w	r2, r2, #3
 8009316:	4606      	mov	r6, r0
 8009318:	460f      	mov	r7, r1
 800931a:	d007      	beq.n	800932c <__pow5mult+0x20>
 800931c:	4c25      	ldr	r4, [pc, #148]	; (80093b4 <__pow5mult+0xa8>)
 800931e:	3a01      	subs	r2, #1
 8009320:	2300      	movs	r3, #0
 8009322:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009326:	f7ff fe9b 	bl	8009060 <__multadd>
 800932a:	4607      	mov	r7, r0
 800932c:	10ad      	asrs	r5, r5, #2
 800932e:	d03d      	beq.n	80093ac <__pow5mult+0xa0>
 8009330:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009332:	b97c      	cbnz	r4, 8009354 <__pow5mult+0x48>
 8009334:	2010      	movs	r0, #16
 8009336:	f7ff fe1b 	bl	8008f70 <malloc>
 800933a:	4602      	mov	r2, r0
 800933c:	6270      	str	r0, [r6, #36]	; 0x24
 800933e:	b928      	cbnz	r0, 800934c <__pow5mult+0x40>
 8009340:	4b1d      	ldr	r3, [pc, #116]	; (80093b8 <__pow5mult+0xac>)
 8009342:	481e      	ldr	r0, [pc, #120]	; (80093bc <__pow5mult+0xb0>)
 8009344:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009348:	f000 fe7e 	bl	800a048 <__assert_func>
 800934c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009350:	6004      	str	r4, [r0, #0]
 8009352:	60c4      	str	r4, [r0, #12]
 8009354:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009358:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800935c:	b94c      	cbnz	r4, 8009372 <__pow5mult+0x66>
 800935e:	f240 2171 	movw	r1, #625	; 0x271
 8009362:	4630      	mov	r0, r6
 8009364:	f7ff ff12 	bl	800918c <__i2b>
 8009368:	2300      	movs	r3, #0
 800936a:	f8c8 0008 	str.w	r0, [r8, #8]
 800936e:	4604      	mov	r4, r0
 8009370:	6003      	str	r3, [r0, #0]
 8009372:	f04f 0900 	mov.w	r9, #0
 8009376:	07eb      	lsls	r3, r5, #31
 8009378:	d50a      	bpl.n	8009390 <__pow5mult+0x84>
 800937a:	4639      	mov	r1, r7
 800937c:	4622      	mov	r2, r4
 800937e:	4630      	mov	r0, r6
 8009380:	f7ff ff1a 	bl	80091b8 <__multiply>
 8009384:	4639      	mov	r1, r7
 8009386:	4680      	mov	r8, r0
 8009388:	4630      	mov	r0, r6
 800938a:	f7ff fe47 	bl	800901c <_Bfree>
 800938e:	4647      	mov	r7, r8
 8009390:	106d      	asrs	r5, r5, #1
 8009392:	d00b      	beq.n	80093ac <__pow5mult+0xa0>
 8009394:	6820      	ldr	r0, [r4, #0]
 8009396:	b938      	cbnz	r0, 80093a8 <__pow5mult+0x9c>
 8009398:	4622      	mov	r2, r4
 800939a:	4621      	mov	r1, r4
 800939c:	4630      	mov	r0, r6
 800939e:	f7ff ff0b 	bl	80091b8 <__multiply>
 80093a2:	6020      	str	r0, [r4, #0]
 80093a4:	f8c0 9000 	str.w	r9, [r0]
 80093a8:	4604      	mov	r4, r0
 80093aa:	e7e4      	b.n	8009376 <__pow5mult+0x6a>
 80093ac:	4638      	mov	r0, r7
 80093ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093b2:	bf00      	nop
 80093b4:	0800b648 	.word	0x0800b648
 80093b8:	0800b415 	.word	0x0800b415
 80093bc:	0800b4f8 	.word	0x0800b4f8

080093c0 <__lshift>:
 80093c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093c4:	460c      	mov	r4, r1
 80093c6:	6849      	ldr	r1, [r1, #4]
 80093c8:	6923      	ldr	r3, [r4, #16]
 80093ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093ce:	68a3      	ldr	r3, [r4, #8]
 80093d0:	4607      	mov	r7, r0
 80093d2:	4691      	mov	r9, r2
 80093d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093d8:	f108 0601 	add.w	r6, r8, #1
 80093dc:	42b3      	cmp	r3, r6
 80093de:	db0b      	blt.n	80093f8 <__lshift+0x38>
 80093e0:	4638      	mov	r0, r7
 80093e2:	f7ff fddb 	bl	8008f9c <_Balloc>
 80093e6:	4605      	mov	r5, r0
 80093e8:	b948      	cbnz	r0, 80093fe <__lshift+0x3e>
 80093ea:	4602      	mov	r2, r0
 80093ec:	4b2a      	ldr	r3, [pc, #168]	; (8009498 <__lshift+0xd8>)
 80093ee:	482b      	ldr	r0, [pc, #172]	; (800949c <__lshift+0xdc>)
 80093f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80093f4:	f000 fe28 	bl	800a048 <__assert_func>
 80093f8:	3101      	adds	r1, #1
 80093fa:	005b      	lsls	r3, r3, #1
 80093fc:	e7ee      	b.n	80093dc <__lshift+0x1c>
 80093fe:	2300      	movs	r3, #0
 8009400:	f100 0114 	add.w	r1, r0, #20
 8009404:	f100 0210 	add.w	r2, r0, #16
 8009408:	4618      	mov	r0, r3
 800940a:	4553      	cmp	r3, sl
 800940c:	db37      	blt.n	800947e <__lshift+0xbe>
 800940e:	6920      	ldr	r0, [r4, #16]
 8009410:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009414:	f104 0314 	add.w	r3, r4, #20
 8009418:	f019 091f 	ands.w	r9, r9, #31
 800941c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009420:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009424:	d02f      	beq.n	8009486 <__lshift+0xc6>
 8009426:	f1c9 0e20 	rsb	lr, r9, #32
 800942a:	468a      	mov	sl, r1
 800942c:	f04f 0c00 	mov.w	ip, #0
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	fa02 f209 	lsl.w	r2, r2, r9
 8009436:	ea42 020c 	orr.w	r2, r2, ip
 800943a:	f84a 2b04 	str.w	r2, [sl], #4
 800943e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009442:	4298      	cmp	r0, r3
 8009444:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009448:	d8f2      	bhi.n	8009430 <__lshift+0x70>
 800944a:	1b03      	subs	r3, r0, r4
 800944c:	3b15      	subs	r3, #21
 800944e:	f023 0303 	bic.w	r3, r3, #3
 8009452:	3304      	adds	r3, #4
 8009454:	f104 0215 	add.w	r2, r4, #21
 8009458:	4290      	cmp	r0, r2
 800945a:	bf38      	it	cc
 800945c:	2304      	movcc	r3, #4
 800945e:	f841 c003 	str.w	ip, [r1, r3]
 8009462:	f1bc 0f00 	cmp.w	ip, #0
 8009466:	d001      	beq.n	800946c <__lshift+0xac>
 8009468:	f108 0602 	add.w	r6, r8, #2
 800946c:	3e01      	subs	r6, #1
 800946e:	4638      	mov	r0, r7
 8009470:	612e      	str	r6, [r5, #16]
 8009472:	4621      	mov	r1, r4
 8009474:	f7ff fdd2 	bl	800901c <_Bfree>
 8009478:	4628      	mov	r0, r5
 800947a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800947e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009482:	3301      	adds	r3, #1
 8009484:	e7c1      	b.n	800940a <__lshift+0x4a>
 8009486:	3904      	subs	r1, #4
 8009488:	f853 2b04 	ldr.w	r2, [r3], #4
 800948c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009490:	4298      	cmp	r0, r3
 8009492:	d8f9      	bhi.n	8009488 <__lshift+0xc8>
 8009494:	e7ea      	b.n	800946c <__lshift+0xac>
 8009496:	bf00      	nop
 8009498:	0800b487 	.word	0x0800b487
 800949c:	0800b4f8 	.word	0x0800b4f8

080094a0 <__mcmp>:
 80094a0:	b530      	push	{r4, r5, lr}
 80094a2:	6902      	ldr	r2, [r0, #16]
 80094a4:	690c      	ldr	r4, [r1, #16]
 80094a6:	1b12      	subs	r2, r2, r4
 80094a8:	d10e      	bne.n	80094c8 <__mcmp+0x28>
 80094aa:	f100 0314 	add.w	r3, r0, #20
 80094ae:	3114      	adds	r1, #20
 80094b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80094b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80094b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80094bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80094c0:	42a5      	cmp	r5, r4
 80094c2:	d003      	beq.n	80094cc <__mcmp+0x2c>
 80094c4:	d305      	bcc.n	80094d2 <__mcmp+0x32>
 80094c6:	2201      	movs	r2, #1
 80094c8:	4610      	mov	r0, r2
 80094ca:	bd30      	pop	{r4, r5, pc}
 80094cc:	4283      	cmp	r3, r0
 80094ce:	d3f3      	bcc.n	80094b8 <__mcmp+0x18>
 80094d0:	e7fa      	b.n	80094c8 <__mcmp+0x28>
 80094d2:	f04f 32ff 	mov.w	r2, #4294967295
 80094d6:	e7f7      	b.n	80094c8 <__mcmp+0x28>

080094d8 <__mdiff>:
 80094d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094dc:	460c      	mov	r4, r1
 80094de:	4606      	mov	r6, r0
 80094e0:	4611      	mov	r1, r2
 80094e2:	4620      	mov	r0, r4
 80094e4:	4690      	mov	r8, r2
 80094e6:	f7ff ffdb 	bl	80094a0 <__mcmp>
 80094ea:	1e05      	subs	r5, r0, #0
 80094ec:	d110      	bne.n	8009510 <__mdiff+0x38>
 80094ee:	4629      	mov	r1, r5
 80094f0:	4630      	mov	r0, r6
 80094f2:	f7ff fd53 	bl	8008f9c <_Balloc>
 80094f6:	b930      	cbnz	r0, 8009506 <__mdiff+0x2e>
 80094f8:	4b3a      	ldr	r3, [pc, #232]	; (80095e4 <__mdiff+0x10c>)
 80094fa:	4602      	mov	r2, r0
 80094fc:	f240 2132 	movw	r1, #562	; 0x232
 8009500:	4839      	ldr	r0, [pc, #228]	; (80095e8 <__mdiff+0x110>)
 8009502:	f000 fda1 	bl	800a048 <__assert_func>
 8009506:	2301      	movs	r3, #1
 8009508:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800950c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009510:	bfa4      	itt	ge
 8009512:	4643      	movge	r3, r8
 8009514:	46a0      	movge	r8, r4
 8009516:	4630      	mov	r0, r6
 8009518:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800951c:	bfa6      	itte	ge
 800951e:	461c      	movge	r4, r3
 8009520:	2500      	movge	r5, #0
 8009522:	2501      	movlt	r5, #1
 8009524:	f7ff fd3a 	bl	8008f9c <_Balloc>
 8009528:	b920      	cbnz	r0, 8009534 <__mdiff+0x5c>
 800952a:	4b2e      	ldr	r3, [pc, #184]	; (80095e4 <__mdiff+0x10c>)
 800952c:	4602      	mov	r2, r0
 800952e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009532:	e7e5      	b.n	8009500 <__mdiff+0x28>
 8009534:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009538:	6926      	ldr	r6, [r4, #16]
 800953a:	60c5      	str	r5, [r0, #12]
 800953c:	f104 0914 	add.w	r9, r4, #20
 8009540:	f108 0514 	add.w	r5, r8, #20
 8009544:	f100 0e14 	add.w	lr, r0, #20
 8009548:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800954c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009550:	f108 0210 	add.w	r2, r8, #16
 8009554:	46f2      	mov	sl, lr
 8009556:	2100      	movs	r1, #0
 8009558:	f859 3b04 	ldr.w	r3, [r9], #4
 800955c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009560:	fa1f f883 	uxth.w	r8, r3
 8009564:	fa11 f18b 	uxtah	r1, r1, fp
 8009568:	0c1b      	lsrs	r3, r3, #16
 800956a:	eba1 0808 	sub.w	r8, r1, r8
 800956e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009572:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009576:	fa1f f888 	uxth.w	r8, r8
 800957a:	1419      	asrs	r1, r3, #16
 800957c:	454e      	cmp	r6, r9
 800957e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009582:	f84a 3b04 	str.w	r3, [sl], #4
 8009586:	d8e7      	bhi.n	8009558 <__mdiff+0x80>
 8009588:	1b33      	subs	r3, r6, r4
 800958a:	3b15      	subs	r3, #21
 800958c:	f023 0303 	bic.w	r3, r3, #3
 8009590:	3304      	adds	r3, #4
 8009592:	3415      	adds	r4, #21
 8009594:	42a6      	cmp	r6, r4
 8009596:	bf38      	it	cc
 8009598:	2304      	movcc	r3, #4
 800959a:	441d      	add	r5, r3
 800959c:	4473      	add	r3, lr
 800959e:	469e      	mov	lr, r3
 80095a0:	462e      	mov	r6, r5
 80095a2:	4566      	cmp	r6, ip
 80095a4:	d30e      	bcc.n	80095c4 <__mdiff+0xec>
 80095a6:	f10c 0203 	add.w	r2, ip, #3
 80095aa:	1b52      	subs	r2, r2, r5
 80095ac:	f022 0203 	bic.w	r2, r2, #3
 80095b0:	3d03      	subs	r5, #3
 80095b2:	45ac      	cmp	ip, r5
 80095b4:	bf38      	it	cc
 80095b6:	2200      	movcc	r2, #0
 80095b8:	441a      	add	r2, r3
 80095ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80095be:	b17b      	cbz	r3, 80095e0 <__mdiff+0x108>
 80095c0:	6107      	str	r7, [r0, #16]
 80095c2:	e7a3      	b.n	800950c <__mdiff+0x34>
 80095c4:	f856 8b04 	ldr.w	r8, [r6], #4
 80095c8:	fa11 f288 	uxtah	r2, r1, r8
 80095cc:	1414      	asrs	r4, r2, #16
 80095ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80095d2:	b292      	uxth	r2, r2
 80095d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80095d8:	f84e 2b04 	str.w	r2, [lr], #4
 80095dc:	1421      	asrs	r1, r4, #16
 80095de:	e7e0      	b.n	80095a2 <__mdiff+0xca>
 80095e0:	3f01      	subs	r7, #1
 80095e2:	e7ea      	b.n	80095ba <__mdiff+0xe2>
 80095e4:	0800b487 	.word	0x0800b487
 80095e8:	0800b4f8 	.word	0x0800b4f8

080095ec <__d2b>:
 80095ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095f0:	4689      	mov	r9, r1
 80095f2:	2101      	movs	r1, #1
 80095f4:	ec57 6b10 	vmov	r6, r7, d0
 80095f8:	4690      	mov	r8, r2
 80095fa:	f7ff fccf 	bl	8008f9c <_Balloc>
 80095fe:	4604      	mov	r4, r0
 8009600:	b930      	cbnz	r0, 8009610 <__d2b+0x24>
 8009602:	4602      	mov	r2, r0
 8009604:	4b25      	ldr	r3, [pc, #148]	; (800969c <__d2b+0xb0>)
 8009606:	4826      	ldr	r0, [pc, #152]	; (80096a0 <__d2b+0xb4>)
 8009608:	f240 310a 	movw	r1, #778	; 0x30a
 800960c:	f000 fd1c 	bl	800a048 <__assert_func>
 8009610:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009614:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009618:	bb35      	cbnz	r5, 8009668 <__d2b+0x7c>
 800961a:	2e00      	cmp	r6, #0
 800961c:	9301      	str	r3, [sp, #4]
 800961e:	d028      	beq.n	8009672 <__d2b+0x86>
 8009620:	4668      	mov	r0, sp
 8009622:	9600      	str	r6, [sp, #0]
 8009624:	f7ff fd82 	bl	800912c <__lo0bits>
 8009628:	9900      	ldr	r1, [sp, #0]
 800962a:	b300      	cbz	r0, 800966e <__d2b+0x82>
 800962c:	9a01      	ldr	r2, [sp, #4]
 800962e:	f1c0 0320 	rsb	r3, r0, #32
 8009632:	fa02 f303 	lsl.w	r3, r2, r3
 8009636:	430b      	orrs	r3, r1
 8009638:	40c2      	lsrs	r2, r0
 800963a:	6163      	str	r3, [r4, #20]
 800963c:	9201      	str	r2, [sp, #4]
 800963e:	9b01      	ldr	r3, [sp, #4]
 8009640:	61a3      	str	r3, [r4, #24]
 8009642:	2b00      	cmp	r3, #0
 8009644:	bf14      	ite	ne
 8009646:	2202      	movne	r2, #2
 8009648:	2201      	moveq	r2, #1
 800964a:	6122      	str	r2, [r4, #16]
 800964c:	b1d5      	cbz	r5, 8009684 <__d2b+0x98>
 800964e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009652:	4405      	add	r5, r0
 8009654:	f8c9 5000 	str.w	r5, [r9]
 8009658:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800965c:	f8c8 0000 	str.w	r0, [r8]
 8009660:	4620      	mov	r0, r4
 8009662:	b003      	add	sp, #12
 8009664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800966c:	e7d5      	b.n	800961a <__d2b+0x2e>
 800966e:	6161      	str	r1, [r4, #20]
 8009670:	e7e5      	b.n	800963e <__d2b+0x52>
 8009672:	a801      	add	r0, sp, #4
 8009674:	f7ff fd5a 	bl	800912c <__lo0bits>
 8009678:	9b01      	ldr	r3, [sp, #4]
 800967a:	6163      	str	r3, [r4, #20]
 800967c:	2201      	movs	r2, #1
 800967e:	6122      	str	r2, [r4, #16]
 8009680:	3020      	adds	r0, #32
 8009682:	e7e3      	b.n	800964c <__d2b+0x60>
 8009684:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009688:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800968c:	f8c9 0000 	str.w	r0, [r9]
 8009690:	6918      	ldr	r0, [r3, #16]
 8009692:	f7ff fd2b 	bl	80090ec <__hi0bits>
 8009696:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800969a:	e7df      	b.n	800965c <__d2b+0x70>
 800969c:	0800b487 	.word	0x0800b487
 80096a0:	0800b4f8 	.word	0x0800b4f8

080096a4 <_calloc_r>:
 80096a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096a6:	fba1 2402 	umull	r2, r4, r1, r2
 80096aa:	b94c      	cbnz	r4, 80096c0 <_calloc_r+0x1c>
 80096ac:	4611      	mov	r1, r2
 80096ae:	9201      	str	r2, [sp, #4]
 80096b0:	f000 f87a 	bl	80097a8 <_malloc_r>
 80096b4:	9a01      	ldr	r2, [sp, #4]
 80096b6:	4605      	mov	r5, r0
 80096b8:	b930      	cbnz	r0, 80096c8 <_calloc_r+0x24>
 80096ba:	4628      	mov	r0, r5
 80096bc:	b003      	add	sp, #12
 80096be:	bd30      	pop	{r4, r5, pc}
 80096c0:	220c      	movs	r2, #12
 80096c2:	6002      	str	r2, [r0, #0]
 80096c4:	2500      	movs	r5, #0
 80096c6:	e7f8      	b.n	80096ba <_calloc_r+0x16>
 80096c8:	4621      	mov	r1, r4
 80096ca:	f7fe f82f 	bl	800772c <memset>
 80096ce:	e7f4      	b.n	80096ba <_calloc_r+0x16>

080096d0 <_free_r>:
 80096d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096d2:	2900      	cmp	r1, #0
 80096d4:	d044      	beq.n	8009760 <_free_r+0x90>
 80096d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096da:	9001      	str	r0, [sp, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f1a1 0404 	sub.w	r4, r1, #4
 80096e2:	bfb8      	it	lt
 80096e4:	18e4      	addlt	r4, r4, r3
 80096e6:	f000 fe55 	bl	800a394 <__malloc_lock>
 80096ea:	4a1e      	ldr	r2, [pc, #120]	; (8009764 <_free_r+0x94>)
 80096ec:	9801      	ldr	r0, [sp, #4]
 80096ee:	6813      	ldr	r3, [r2, #0]
 80096f0:	b933      	cbnz	r3, 8009700 <_free_r+0x30>
 80096f2:	6063      	str	r3, [r4, #4]
 80096f4:	6014      	str	r4, [r2, #0]
 80096f6:	b003      	add	sp, #12
 80096f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096fc:	f000 be50 	b.w	800a3a0 <__malloc_unlock>
 8009700:	42a3      	cmp	r3, r4
 8009702:	d908      	bls.n	8009716 <_free_r+0x46>
 8009704:	6825      	ldr	r5, [r4, #0]
 8009706:	1961      	adds	r1, r4, r5
 8009708:	428b      	cmp	r3, r1
 800970a:	bf01      	itttt	eq
 800970c:	6819      	ldreq	r1, [r3, #0]
 800970e:	685b      	ldreq	r3, [r3, #4]
 8009710:	1949      	addeq	r1, r1, r5
 8009712:	6021      	streq	r1, [r4, #0]
 8009714:	e7ed      	b.n	80096f2 <_free_r+0x22>
 8009716:	461a      	mov	r2, r3
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	b10b      	cbz	r3, 8009720 <_free_r+0x50>
 800971c:	42a3      	cmp	r3, r4
 800971e:	d9fa      	bls.n	8009716 <_free_r+0x46>
 8009720:	6811      	ldr	r1, [r2, #0]
 8009722:	1855      	adds	r5, r2, r1
 8009724:	42a5      	cmp	r5, r4
 8009726:	d10b      	bne.n	8009740 <_free_r+0x70>
 8009728:	6824      	ldr	r4, [r4, #0]
 800972a:	4421      	add	r1, r4
 800972c:	1854      	adds	r4, r2, r1
 800972e:	42a3      	cmp	r3, r4
 8009730:	6011      	str	r1, [r2, #0]
 8009732:	d1e0      	bne.n	80096f6 <_free_r+0x26>
 8009734:	681c      	ldr	r4, [r3, #0]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	6053      	str	r3, [r2, #4]
 800973a:	4421      	add	r1, r4
 800973c:	6011      	str	r1, [r2, #0]
 800973e:	e7da      	b.n	80096f6 <_free_r+0x26>
 8009740:	d902      	bls.n	8009748 <_free_r+0x78>
 8009742:	230c      	movs	r3, #12
 8009744:	6003      	str	r3, [r0, #0]
 8009746:	e7d6      	b.n	80096f6 <_free_r+0x26>
 8009748:	6825      	ldr	r5, [r4, #0]
 800974a:	1961      	adds	r1, r4, r5
 800974c:	428b      	cmp	r3, r1
 800974e:	bf04      	itt	eq
 8009750:	6819      	ldreq	r1, [r3, #0]
 8009752:	685b      	ldreq	r3, [r3, #4]
 8009754:	6063      	str	r3, [r4, #4]
 8009756:	bf04      	itt	eq
 8009758:	1949      	addeq	r1, r1, r5
 800975a:	6021      	streq	r1, [r4, #0]
 800975c:	6054      	str	r4, [r2, #4]
 800975e:	e7ca      	b.n	80096f6 <_free_r+0x26>
 8009760:	b003      	add	sp, #12
 8009762:	bd30      	pop	{r4, r5, pc}
 8009764:	20000ae8 	.word	0x20000ae8

08009768 <sbrk_aligned>:
 8009768:	b570      	push	{r4, r5, r6, lr}
 800976a:	4e0e      	ldr	r6, [pc, #56]	; (80097a4 <sbrk_aligned+0x3c>)
 800976c:	460c      	mov	r4, r1
 800976e:	6831      	ldr	r1, [r6, #0]
 8009770:	4605      	mov	r5, r0
 8009772:	b911      	cbnz	r1, 800977a <sbrk_aligned+0x12>
 8009774:	f000 fb42 	bl	8009dfc <_sbrk_r>
 8009778:	6030      	str	r0, [r6, #0]
 800977a:	4621      	mov	r1, r4
 800977c:	4628      	mov	r0, r5
 800977e:	f000 fb3d 	bl	8009dfc <_sbrk_r>
 8009782:	1c43      	adds	r3, r0, #1
 8009784:	d00a      	beq.n	800979c <sbrk_aligned+0x34>
 8009786:	1cc4      	adds	r4, r0, #3
 8009788:	f024 0403 	bic.w	r4, r4, #3
 800978c:	42a0      	cmp	r0, r4
 800978e:	d007      	beq.n	80097a0 <sbrk_aligned+0x38>
 8009790:	1a21      	subs	r1, r4, r0
 8009792:	4628      	mov	r0, r5
 8009794:	f000 fb32 	bl	8009dfc <_sbrk_r>
 8009798:	3001      	adds	r0, #1
 800979a:	d101      	bne.n	80097a0 <sbrk_aligned+0x38>
 800979c:	f04f 34ff 	mov.w	r4, #4294967295
 80097a0:	4620      	mov	r0, r4
 80097a2:	bd70      	pop	{r4, r5, r6, pc}
 80097a4:	20000aec 	.word	0x20000aec

080097a8 <_malloc_r>:
 80097a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ac:	1ccd      	adds	r5, r1, #3
 80097ae:	f025 0503 	bic.w	r5, r5, #3
 80097b2:	3508      	adds	r5, #8
 80097b4:	2d0c      	cmp	r5, #12
 80097b6:	bf38      	it	cc
 80097b8:	250c      	movcc	r5, #12
 80097ba:	2d00      	cmp	r5, #0
 80097bc:	4607      	mov	r7, r0
 80097be:	db01      	blt.n	80097c4 <_malloc_r+0x1c>
 80097c0:	42a9      	cmp	r1, r5
 80097c2:	d905      	bls.n	80097d0 <_malloc_r+0x28>
 80097c4:	230c      	movs	r3, #12
 80097c6:	603b      	str	r3, [r7, #0]
 80097c8:	2600      	movs	r6, #0
 80097ca:	4630      	mov	r0, r6
 80097cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097d0:	4e2e      	ldr	r6, [pc, #184]	; (800988c <_malloc_r+0xe4>)
 80097d2:	f000 fddf 	bl	800a394 <__malloc_lock>
 80097d6:	6833      	ldr	r3, [r6, #0]
 80097d8:	461c      	mov	r4, r3
 80097da:	bb34      	cbnz	r4, 800982a <_malloc_r+0x82>
 80097dc:	4629      	mov	r1, r5
 80097de:	4638      	mov	r0, r7
 80097e0:	f7ff ffc2 	bl	8009768 <sbrk_aligned>
 80097e4:	1c43      	adds	r3, r0, #1
 80097e6:	4604      	mov	r4, r0
 80097e8:	d14d      	bne.n	8009886 <_malloc_r+0xde>
 80097ea:	6834      	ldr	r4, [r6, #0]
 80097ec:	4626      	mov	r6, r4
 80097ee:	2e00      	cmp	r6, #0
 80097f0:	d140      	bne.n	8009874 <_malloc_r+0xcc>
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	4631      	mov	r1, r6
 80097f6:	4638      	mov	r0, r7
 80097f8:	eb04 0803 	add.w	r8, r4, r3
 80097fc:	f000 fafe 	bl	8009dfc <_sbrk_r>
 8009800:	4580      	cmp	r8, r0
 8009802:	d13a      	bne.n	800987a <_malloc_r+0xd2>
 8009804:	6821      	ldr	r1, [r4, #0]
 8009806:	3503      	adds	r5, #3
 8009808:	1a6d      	subs	r5, r5, r1
 800980a:	f025 0503 	bic.w	r5, r5, #3
 800980e:	3508      	adds	r5, #8
 8009810:	2d0c      	cmp	r5, #12
 8009812:	bf38      	it	cc
 8009814:	250c      	movcc	r5, #12
 8009816:	4629      	mov	r1, r5
 8009818:	4638      	mov	r0, r7
 800981a:	f7ff ffa5 	bl	8009768 <sbrk_aligned>
 800981e:	3001      	adds	r0, #1
 8009820:	d02b      	beq.n	800987a <_malloc_r+0xd2>
 8009822:	6823      	ldr	r3, [r4, #0]
 8009824:	442b      	add	r3, r5
 8009826:	6023      	str	r3, [r4, #0]
 8009828:	e00e      	b.n	8009848 <_malloc_r+0xa0>
 800982a:	6822      	ldr	r2, [r4, #0]
 800982c:	1b52      	subs	r2, r2, r5
 800982e:	d41e      	bmi.n	800986e <_malloc_r+0xc6>
 8009830:	2a0b      	cmp	r2, #11
 8009832:	d916      	bls.n	8009862 <_malloc_r+0xba>
 8009834:	1961      	adds	r1, r4, r5
 8009836:	42a3      	cmp	r3, r4
 8009838:	6025      	str	r5, [r4, #0]
 800983a:	bf18      	it	ne
 800983c:	6059      	strne	r1, [r3, #4]
 800983e:	6863      	ldr	r3, [r4, #4]
 8009840:	bf08      	it	eq
 8009842:	6031      	streq	r1, [r6, #0]
 8009844:	5162      	str	r2, [r4, r5]
 8009846:	604b      	str	r3, [r1, #4]
 8009848:	4638      	mov	r0, r7
 800984a:	f104 060b 	add.w	r6, r4, #11
 800984e:	f000 fda7 	bl	800a3a0 <__malloc_unlock>
 8009852:	f026 0607 	bic.w	r6, r6, #7
 8009856:	1d23      	adds	r3, r4, #4
 8009858:	1af2      	subs	r2, r6, r3
 800985a:	d0b6      	beq.n	80097ca <_malloc_r+0x22>
 800985c:	1b9b      	subs	r3, r3, r6
 800985e:	50a3      	str	r3, [r4, r2]
 8009860:	e7b3      	b.n	80097ca <_malloc_r+0x22>
 8009862:	6862      	ldr	r2, [r4, #4]
 8009864:	42a3      	cmp	r3, r4
 8009866:	bf0c      	ite	eq
 8009868:	6032      	streq	r2, [r6, #0]
 800986a:	605a      	strne	r2, [r3, #4]
 800986c:	e7ec      	b.n	8009848 <_malloc_r+0xa0>
 800986e:	4623      	mov	r3, r4
 8009870:	6864      	ldr	r4, [r4, #4]
 8009872:	e7b2      	b.n	80097da <_malloc_r+0x32>
 8009874:	4634      	mov	r4, r6
 8009876:	6876      	ldr	r6, [r6, #4]
 8009878:	e7b9      	b.n	80097ee <_malloc_r+0x46>
 800987a:	230c      	movs	r3, #12
 800987c:	603b      	str	r3, [r7, #0]
 800987e:	4638      	mov	r0, r7
 8009880:	f000 fd8e 	bl	800a3a0 <__malloc_unlock>
 8009884:	e7a1      	b.n	80097ca <_malloc_r+0x22>
 8009886:	6025      	str	r5, [r4, #0]
 8009888:	e7de      	b.n	8009848 <_malloc_r+0xa0>
 800988a:	bf00      	nop
 800988c:	20000ae8 	.word	0x20000ae8

08009890 <__ssputs_r>:
 8009890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009894:	688e      	ldr	r6, [r1, #8]
 8009896:	429e      	cmp	r6, r3
 8009898:	4682      	mov	sl, r0
 800989a:	460c      	mov	r4, r1
 800989c:	4690      	mov	r8, r2
 800989e:	461f      	mov	r7, r3
 80098a0:	d838      	bhi.n	8009914 <__ssputs_r+0x84>
 80098a2:	898a      	ldrh	r2, [r1, #12]
 80098a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098a8:	d032      	beq.n	8009910 <__ssputs_r+0x80>
 80098aa:	6825      	ldr	r5, [r4, #0]
 80098ac:	6909      	ldr	r1, [r1, #16]
 80098ae:	eba5 0901 	sub.w	r9, r5, r1
 80098b2:	6965      	ldr	r5, [r4, #20]
 80098b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098bc:	3301      	adds	r3, #1
 80098be:	444b      	add	r3, r9
 80098c0:	106d      	asrs	r5, r5, #1
 80098c2:	429d      	cmp	r5, r3
 80098c4:	bf38      	it	cc
 80098c6:	461d      	movcc	r5, r3
 80098c8:	0553      	lsls	r3, r2, #21
 80098ca:	d531      	bpl.n	8009930 <__ssputs_r+0xa0>
 80098cc:	4629      	mov	r1, r5
 80098ce:	f7ff ff6b 	bl	80097a8 <_malloc_r>
 80098d2:	4606      	mov	r6, r0
 80098d4:	b950      	cbnz	r0, 80098ec <__ssputs_r+0x5c>
 80098d6:	230c      	movs	r3, #12
 80098d8:	f8ca 3000 	str.w	r3, [sl]
 80098dc:	89a3      	ldrh	r3, [r4, #12]
 80098de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098e2:	81a3      	strh	r3, [r4, #12]
 80098e4:	f04f 30ff 	mov.w	r0, #4294967295
 80098e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ec:	6921      	ldr	r1, [r4, #16]
 80098ee:	464a      	mov	r2, r9
 80098f0:	f7ff fb46 	bl	8008f80 <memcpy>
 80098f4:	89a3      	ldrh	r3, [r4, #12]
 80098f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098fe:	81a3      	strh	r3, [r4, #12]
 8009900:	6126      	str	r6, [r4, #16]
 8009902:	6165      	str	r5, [r4, #20]
 8009904:	444e      	add	r6, r9
 8009906:	eba5 0509 	sub.w	r5, r5, r9
 800990a:	6026      	str	r6, [r4, #0]
 800990c:	60a5      	str	r5, [r4, #8]
 800990e:	463e      	mov	r6, r7
 8009910:	42be      	cmp	r6, r7
 8009912:	d900      	bls.n	8009916 <__ssputs_r+0x86>
 8009914:	463e      	mov	r6, r7
 8009916:	6820      	ldr	r0, [r4, #0]
 8009918:	4632      	mov	r2, r6
 800991a:	4641      	mov	r1, r8
 800991c:	f000 fd20 	bl	800a360 <memmove>
 8009920:	68a3      	ldr	r3, [r4, #8]
 8009922:	1b9b      	subs	r3, r3, r6
 8009924:	60a3      	str	r3, [r4, #8]
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	4433      	add	r3, r6
 800992a:	6023      	str	r3, [r4, #0]
 800992c:	2000      	movs	r0, #0
 800992e:	e7db      	b.n	80098e8 <__ssputs_r+0x58>
 8009930:	462a      	mov	r2, r5
 8009932:	f000 fd3b 	bl	800a3ac <_realloc_r>
 8009936:	4606      	mov	r6, r0
 8009938:	2800      	cmp	r0, #0
 800993a:	d1e1      	bne.n	8009900 <__ssputs_r+0x70>
 800993c:	6921      	ldr	r1, [r4, #16]
 800993e:	4650      	mov	r0, sl
 8009940:	f7ff fec6 	bl	80096d0 <_free_r>
 8009944:	e7c7      	b.n	80098d6 <__ssputs_r+0x46>
	...

08009948 <_svfiprintf_r>:
 8009948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994c:	4698      	mov	r8, r3
 800994e:	898b      	ldrh	r3, [r1, #12]
 8009950:	061b      	lsls	r3, r3, #24
 8009952:	b09d      	sub	sp, #116	; 0x74
 8009954:	4607      	mov	r7, r0
 8009956:	460d      	mov	r5, r1
 8009958:	4614      	mov	r4, r2
 800995a:	d50e      	bpl.n	800997a <_svfiprintf_r+0x32>
 800995c:	690b      	ldr	r3, [r1, #16]
 800995e:	b963      	cbnz	r3, 800997a <_svfiprintf_r+0x32>
 8009960:	2140      	movs	r1, #64	; 0x40
 8009962:	f7ff ff21 	bl	80097a8 <_malloc_r>
 8009966:	6028      	str	r0, [r5, #0]
 8009968:	6128      	str	r0, [r5, #16]
 800996a:	b920      	cbnz	r0, 8009976 <_svfiprintf_r+0x2e>
 800996c:	230c      	movs	r3, #12
 800996e:	603b      	str	r3, [r7, #0]
 8009970:	f04f 30ff 	mov.w	r0, #4294967295
 8009974:	e0d1      	b.n	8009b1a <_svfiprintf_r+0x1d2>
 8009976:	2340      	movs	r3, #64	; 0x40
 8009978:	616b      	str	r3, [r5, #20]
 800997a:	2300      	movs	r3, #0
 800997c:	9309      	str	r3, [sp, #36]	; 0x24
 800997e:	2320      	movs	r3, #32
 8009980:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009984:	f8cd 800c 	str.w	r8, [sp, #12]
 8009988:	2330      	movs	r3, #48	; 0x30
 800998a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009b34 <_svfiprintf_r+0x1ec>
 800998e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009992:	f04f 0901 	mov.w	r9, #1
 8009996:	4623      	mov	r3, r4
 8009998:	469a      	mov	sl, r3
 800999a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800999e:	b10a      	cbz	r2, 80099a4 <_svfiprintf_r+0x5c>
 80099a0:	2a25      	cmp	r2, #37	; 0x25
 80099a2:	d1f9      	bne.n	8009998 <_svfiprintf_r+0x50>
 80099a4:	ebba 0b04 	subs.w	fp, sl, r4
 80099a8:	d00b      	beq.n	80099c2 <_svfiprintf_r+0x7a>
 80099aa:	465b      	mov	r3, fp
 80099ac:	4622      	mov	r2, r4
 80099ae:	4629      	mov	r1, r5
 80099b0:	4638      	mov	r0, r7
 80099b2:	f7ff ff6d 	bl	8009890 <__ssputs_r>
 80099b6:	3001      	adds	r0, #1
 80099b8:	f000 80aa 	beq.w	8009b10 <_svfiprintf_r+0x1c8>
 80099bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099be:	445a      	add	r2, fp
 80099c0:	9209      	str	r2, [sp, #36]	; 0x24
 80099c2:	f89a 3000 	ldrb.w	r3, [sl]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f000 80a2 	beq.w	8009b10 <_svfiprintf_r+0x1c8>
 80099cc:	2300      	movs	r3, #0
 80099ce:	f04f 32ff 	mov.w	r2, #4294967295
 80099d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099d6:	f10a 0a01 	add.w	sl, sl, #1
 80099da:	9304      	str	r3, [sp, #16]
 80099dc:	9307      	str	r3, [sp, #28]
 80099de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099e2:	931a      	str	r3, [sp, #104]	; 0x68
 80099e4:	4654      	mov	r4, sl
 80099e6:	2205      	movs	r2, #5
 80099e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ec:	4851      	ldr	r0, [pc, #324]	; (8009b34 <_svfiprintf_r+0x1ec>)
 80099ee:	f7f6 fc17 	bl	8000220 <memchr>
 80099f2:	9a04      	ldr	r2, [sp, #16]
 80099f4:	b9d8      	cbnz	r0, 8009a2e <_svfiprintf_r+0xe6>
 80099f6:	06d0      	lsls	r0, r2, #27
 80099f8:	bf44      	itt	mi
 80099fa:	2320      	movmi	r3, #32
 80099fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a00:	0711      	lsls	r1, r2, #28
 8009a02:	bf44      	itt	mi
 8009a04:	232b      	movmi	r3, #43	; 0x2b
 8009a06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a10:	d015      	beq.n	8009a3e <_svfiprintf_r+0xf6>
 8009a12:	9a07      	ldr	r2, [sp, #28]
 8009a14:	4654      	mov	r4, sl
 8009a16:	2000      	movs	r0, #0
 8009a18:	f04f 0c0a 	mov.w	ip, #10
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a22:	3b30      	subs	r3, #48	; 0x30
 8009a24:	2b09      	cmp	r3, #9
 8009a26:	d94e      	bls.n	8009ac6 <_svfiprintf_r+0x17e>
 8009a28:	b1b0      	cbz	r0, 8009a58 <_svfiprintf_r+0x110>
 8009a2a:	9207      	str	r2, [sp, #28]
 8009a2c:	e014      	b.n	8009a58 <_svfiprintf_r+0x110>
 8009a2e:	eba0 0308 	sub.w	r3, r0, r8
 8009a32:	fa09 f303 	lsl.w	r3, r9, r3
 8009a36:	4313      	orrs	r3, r2
 8009a38:	9304      	str	r3, [sp, #16]
 8009a3a:	46a2      	mov	sl, r4
 8009a3c:	e7d2      	b.n	80099e4 <_svfiprintf_r+0x9c>
 8009a3e:	9b03      	ldr	r3, [sp, #12]
 8009a40:	1d19      	adds	r1, r3, #4
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	9103      	str	r1, [sp, #12]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	bfbb      	ittet	lt
 8009a4a:	425b      	neglt	r3, r3
 8009a4c:	f042 0202 	orrlt.w	r2, r2, #2
 8009a50:	9307      	strge	r3, [sp, #28]
 8009a52:	9307      	strlt	r3, [sp, #28]
 8009a54:	bfb8      	it	lt
 8009a56:	9204      	strlt	r2, [sp, #16]
 8009a58:	7823      	ldrb	r3, [r4, #0]
 8009a5a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a5c:	d10c      	bne.n	8009a78 <_svfiprintf_r+0x130>
 8009a5e:	7863      	ldrb	r3, [r4, #1]
 8009a60:	2b2a      	cmp	r3, #42	; 0x2a
 8009a62:	d135      	bne.n	8009ad0 <_svfiprintf_r+0x188>
 8009a64:	9b03      	ldr	r3, [sp, #12]
 8009a66:	1d1a      	adds	r2, r3, #4
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	9203      	str	r2, [sp, #12]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	bfb8      	it	lt
 8009a70:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a74:	3402      	adds	r4, #2
 8009a76:	9305      	str	r3, [sp, #20]
 8009a78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b44 <_svfiprintf_r+0x1fc>
 8009a7c:	7821      	ldrb	r1, [r4, #0]
 8009a7e:	2203      	movs	r2, #3
 8009a80:	4650      	mov	r0, sl
 8009a82:	f7f6 fbcd 	bl	8000220 <memchr>
 8009a86:	b140      	cbz	r0, 8009a9a <_svfiprintf_r+0x152>
 8009a88:	2340      	movs	r3, #64	; 0x40
 8009a8a:	eba0 000a 	sub.w	r0, r0, sl
 8009a8e:	fa03 f000 	lsl.w	r0, r3, r0
 8009a92:	9b04      	ldr	r3, [sp, #16]
 8009a94:	4303      	orrs	r3, r0
 8009a96:	3401      	adds	r4, #1
 8009a98:	9304      	str	r3, [sp, #16]
 8009a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a9e:	4826      	ldr	r0, [pc, #152]	; (8009b38 <_svfiprintf_r+0x1f0>)
 8009aa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009aa4:	2206      	movs	r2, #6
 8009aa6:	f7f6 fbbb 	bl	8000220 <memchr>
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	d038      	beq.n	8009b20 <_svfiprintf_r+0x1d8>
 8009aae:	4b23      	ldr	r3, [pc, #140]	; (8009b3c <_svfiprintf_r+0x1f4>)
 8009ab0:	bb1b      	cbnz	r3, 8009afa <_svfiprintf_r+0x1b2>
 8009ab2:	9b03      	ldr	r3, [sp, #12]
 8009ab4:	3307      	adds	r3, #7
 8009ab6:	f023 0307 	bic.w	r3, r3, #7
 8009aba:	3308      	adds	r3, #8
 8009abc:	9303      	str	r3, [sp, #12]
 8009abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac0:	4433      	add	r3, r6
 8009ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac4:	e767      	b.n	8009996 <_svfiprintf_r+0x4e>
 8009ac6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aca:	460c      	mov	r4, r1
 8009acc:	2001      	movs	r0, #1
 8009ace:	e7a5      	b.n	8009a1c <_svfiprintf_r+0xd4>
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	3401      	adds	r4, #1
 8009ad4:	9305      	str	r3, [sp, #20]
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	f04f 0c0a 	mov.w	ip, #10
 8009adc:	4620      	mov	r0, r4
 8009ade:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ae2:	3a30      	subs	r2, #48	; 0x30
 8009ae4:	2a09      	cmp	r2, #9
 8009ae6:	d903      	bls.n	8009af0 <_svfiprintf_r+0x1a8>
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d0c5      	beq.n	8009a78 <_svfiprintf_r+0x130>
 8009aec:	9105      	str	r1, [sp, #20]
 8009aee:	e7c3      	b.n	8009a78 <_svfiprintf_r+0x130>
 8009af0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009af4:	4604      	mov	r4, r0
 8009af6:	2301      	movs	r3, #1
 8009af8:	e7f0      	b.n	8009adc <_svfiprintf_r+0x194>
 8009afa:	ab03      	add	r3, sp, #12
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	462a      	mov	r2, r5
 8009b00:	4b0f      	ldr	r3, [pc, #60]	; (8009b40 <_svfiprintf_r+0x1f8>)
 8009b02:	a904      	add	r1, sp, #16
 8009b04:	4638      	mov	r0, r7
 8009b06:	f7fd feb9 	bl	800787c <_printf_float>
 8009b0a:	1c42      	adds	r2, r0, #1
 8009b0c:	4606      	mov	r6, r0
 8009b0e:	d1d6      	bne.n	8009abe <_svfiprintf_r+0x176>
 8009b10:	89ab      	ldrh	r3, [r5, #12]
 8009b12:	065b      	lsls	r3, r3, #25
 8009b14:	f53f af2c 	bmi.w	8009970 <_svfiprintf_r+0x28>
 8009b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b1a:	b01d      	add	sp, #116	; 0x74
 8009b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b20:	ab03      	add	r3, sp, #12
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	462a      	mov	r2, r5
 8009b26:	4b06      	ldr	r3, [pc, #24]	; (8009b40 <_svfiprintf_r+0x1f8>)
 8009b28:	a904      	add	r1, sp, #16
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	f7fe f94a 	bl	8007dc4 <_printf_i>
 8009b30:	e7eb      	b.n	8009b0a <_svfiprintf_r+0x1c2>
 8009b32:	bf00      	nop
 8009b34:	0800b654 	.word	0x0800b654
 8009b38:	0800b65e 	.word	0x0800b65e
 8009b3c:	0800787d 	.word	0x0800787d
 8009b40:	08009891 	.word	0x08009891
 8009b44:	0800b65a 	.word	0x0800b65a

08009b48 <__sfputc_r>:
 8009b48:	6893      	ldr	r3, [r2, #8]
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	b410      	push	{r4}
 8009b50:	6093      	str	r3, [r2, #8]
 8009b52:	da08      	bge.n	8009b66 <__sfputc_r+0x1e>
 8009b54:	6994      	ldr	r4, [r2, #24]
 8009b56:	42a3      	cmp	r3, r4
 8009b58:	db01      	blt.n	8009b5e <__sfputc_r+0x16>
 8009b5a:	290a      	cmp	r1, #10
 8009b5c:	d103      	bne.n	8009b66 <__sfputc_r+0x1e>
 8009b5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b62:	f000 b99f 	b.w	8009ea4 <__swbuf_r>
 8009b66:	6813      	ldr	r3, [r2, #0]
 8009b68:	1c58      	adds	r0, r3, #1
 8009b6a:	6010      	str	r0, [r2, #0]
 8009b6c:	7019      	strb	r1, [r3, #0]
 8009b6e:	4608      	mov	r0, r1
 8009b70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <__sfputs_r>:
 8009b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b78:	4606      	mov	r6, r0
 8009b7a:	460f      	mov	r7, r1
 8009b7c:	4614      	mov	r4, r2
 8009b7e:	18d5      	adds	r5, r2, r3
 8009b80:	42ac      	cmp	r4, r5
 8009b82:	d101      	bne.n	8009b88 <__sfputs_r+0x12>
 8009b84:	2000      	movs	r0, #0
 8009b86:	e007      	b.n	8009b98 <__sfputs_r+0x22>
 8009b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b8c:	463a      	mov	r2, r7
 8009b8e:	4630      	mov	r0, r6
 8009b90:	f7ff ffda 	bl	8009b48 <__sfputc_r>
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	d1f3      	bne.n	8009b80 <__sfputs_r+0xa>
 8009b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b9c <_vfiprintf_r>:
 8009b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba0:	460d      	mov	r5, r1
 8009ba2:	b09d      	sub	sp, #116	; 0x74
 8009ba4:	4614      	mov	r4, r2
 8009ba6:	4698      	mov	r8, r3
 8009ba8:	4606      	mov	r6, r0
 8009baa:	b118      	cbz	r0, 8009bb4 <_vfiprintf_r+0x18>
 8009bac:	6983      	ldr	r3, [r0, #24]
 8009bae:	b90b      	cbnz	r3, 8009bb4 <_vfiprintf_r+0x18>
 8009bb0:	f7ff f938 	bl	8008e24 <__sinit>
 8009bb4:	4b89      	ldr	r3, [pc, #548]	; (8009ddc <_vfiprintf_r+0x240>)
 8009bb6:	429d      	cmp	r5, r3
 8009bb8:	d11b      	bne.n	8009bf2 <_vfiprintf_r+0x56>
 8009bba:	6875      	ldr	r5, [r6, #4]
 8009bbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bbe:	07d9      	lsls	r1, r3, #31
 8009bc0:	d405      	bmi.n	8009bce <_vfiprintf_r+0x32>
 8009bc2:	89ab      	ldrh	r3, [r5, #12]
 8009bc4:	059a      	lsls	r2, r3, #22
 8009bc6:	d402      	bmi.n	8009bce <_vfiprintf_r+0x32>
 8009bc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bca:	f7ff f9ce 	bl	8008f6a <__retarget_lock_acquire_recursive>
 8009bce:	89ab      	ldrh	r3, [r5, #12]
 8009bd0:	071b      	lsls	r3, r3, #28
 8009bd2:	d501      	bpl.n	8009bd8 <_vfiprintf_r+0x3c>
 8009bd4:	692b      	ldr	r3, [r5, #16]
 8009bd6:	b9eb      	cbnz	r3, 8009c14 <_vfiprintf_r+0x78>
 8009bd8:	4629      	mov	r1, r5
 8009bda:	4630      	mov	r0, r6
 8009bdc:	f000 f9c6 	bl	8009f6c <__swsetup_r>
 8009be0:	b1c0      	cbz	r0, 8009c14 <_vfiprintf_r+0x78>
 8009be2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009be4:	07dc      	lsls	r4, r3, #31
 8009be6:	d50e      	bpl.n	8009c06 <_vfiprintf_r+0x6a>
 8009be8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bec:	b01d      	add	sp, #116	; 0x74
 8009bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf2:	4b7b      	ldr	r3, [pc, #492]	; (8009de0 <_vfiprintf_r+0x244>)
 8009bf4:	429d      	cmp	r5, r3
 8009bf6:	d101      	bne.n	8009bfc <_vfiprintf_r+0x60>
 8009bf8:	68b5      	ldr	r5, [r6, #8]
 8009bfa:	e7df      	b.n	8009bbc <_vfiprintf_r+0x20>
 8009bfc:	4b79      	ldr	r3, [pc, #484]	; (8009de4 <_vfiprintf_r+0x248>)
 8009bfe:	429d      	cmp	r5, r3
 8009c00:	bf08      	it	eq
 8009c02:	68f5      	ldreq	r5, [r6, #12]
 8009c04:	e7da      	b.n	8009bbc <_vfiprintf_r+0x20>
 8009c06:	89ab      	ldrh	r3, [r5, #12]
 8009c08:	0598      	lsls	r0, r3, #22
 8009c0a:	d4ed      	bmi.n	8009be8 <_vfiprintf_r+0x4c>
 8009c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c0e:	f7ff f9ad 	bl	8008f6c <__retarget_lock_release_recursive>
 8009c12:	e7e9      	b.n	8009be8 <_vfiprintf_r+0x4c>
 8009c14:	2300      	movs	r3, #0
 8009c16:	9309      	str	r3, [sp, #36]	; 0x24
 8009c18:	2320      	movs	r3, #32
 8009c1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c22:	2330      	movs	r3, #48	; 0x30
 8009c24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009de8 <_vfiprintf_r+0x24c>
 8009c28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c2c:	f04f 0901 	mov.w	r9, #1
 8009c30:	4623      	mov	r3, r4
 8009c32:	469a      	mov	sl, r3
 8009c34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c38:	b10a      	cbz	r2, 8009c3e <_vfiprintf_r+0xa2>
 8009c3a:	2a25      	cmp	r2, #37	; 0x25
 8009c3c:	d1f9      	bne.n	8009c32 <_vfiprintf_r+0x96>
 8009c3e:	ebba 0b04 	subs.w	fp, sl, r4
 8009c42:	d00b      	beq.n	8009c5c <_vfiprintf_r+0xc0>
 8009c44:	465b      	mov	r3, fp
 8009c46:	4622      	mov	r2, r4
 8009c48:	4629      	mov	r1, r5
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	f7ff ff93 	bl	8009b76 <__sfputs_r>
 8009c50:	3001      	adds	r0, #1
 8009c52:	f000 80aa 	beq.w	8009daa <_vfiprintf_r+0x20e>
 8009c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c58:	445a      	add	r2, fp
 8009c5a:	9209      	str	r2, [sp, #36]	; 0x24
 8009c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f000 80a2 	beq.w	8009daa <_vfiprintf_r+0x20e>
 8009c66:	2300      	movs	r3, #0
 8009c68:	f04f 32ff 	mov.w	r2, #4294967295
 8009c6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c70:	f10a 0a01 	add.w	sl, sl, #1
 8009c74:	9304      	str	r3, [sp, #16]
 8009c76:	9307      	str	r3, [sp, #28]
 8009c78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c7c:	931a      	str	r3, [sp, #104]	; 0x68
 8009c7e:	4654      	mov	r4, sl
 8009c80:	2205      	movs	r2, #5
 8009c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c86:	4858      	ldr	r0, [pc, #352]	; (8009de8 <_vfiprintf_r+0x24c>)
 8009c88:	f7f6 faca 	bl	8000220 <memchr>
 8009c8c:	9a04      	ldr	r2, [sp, #16]
 8009c8e:	b9d8      	cbnz	r0, 8009cc8 <_vfiprintf_r+0x12c>
 8009c90:	06d1      	lsls	r1, r2, #27
 8009c92:	bf44      	itt	mi
 8009c94:	2320      	movmi	r3, #32
 8009c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c9a:	0713      	lsls	r3, r2, #28
 8009c9c:	bf44      	itt	mi
 8009c9e:	232b      	movmi	r3, #43	; 0x2b
 8009ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8009caa:	d015      	beq.n	8009cd8 <_vfiprintf_r+0x13c>
 8009cac:	9a07      	ldr	r2, [sp, #28]
 8009cae:	4654      	mov	r4, sl
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	f04f 0c0a 	mov.w	ip, #10
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cbc:	3b30      	subs	r3, #48	; 0x30
 8009cbe:	2b09      	cmp	r3, #9
 8009cc0:	d94e      	bls.n	8009d60 <_vfiprintf_r+0x1c4>
 8009cc2:	b1b0      	cbz	r0, 8009cf2 <_vfiprintf_r+0x156>
 8009cc4:	9207      	str	r2, [sp, #28]
 8009cc6:	e014      	b.n	8009cf2 <_vfiprintf_r+0x156>
 8009cc8:	eba0 0308 	sub.w	r3, r0, r8
 8009ccc:	fa09 f303 	lsl.w	r3, r9, r3
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	9304      	str	r3, [sp, #16]
 8009cd4:	46a2      	mov	sl, r4
 8009cd6:	e7d2      	b.n	8009c7e <_vfiprintf_r+0xe2>
 8009cd8:	9b03      	ldr	r3, [sp, #12]
 8009cda:	1d19      	adds	r1, r3, #4
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	9103      	str	r1, [sp, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	bfbb      	ittet	lt
 8009ce4:	425b      	neglt	r3, r3
 8009ce6:	f042 0202 	orrlt.w	r2, r2, #2
 8009cea:	9307      	strge	r3, [sp, #28]
 8009cec:	9307      	strlt	r3, [sp, #28]
 8009cee:	bfb8      	it	lt
 8009cf0:	9204      	strlt	r2, [sp, #16]
 8009cf2:	7823      	ldrb	r3, [r4, #0]
 8009cf4:	2b2e      	cmp	r3, #46	; 0x2e
 8009cf6:	d10c      	bne.n	8009d12 <_vfiprintf_r+0x176>
 8009cf8:	7863      	ldrb	r3, [r4, #1]
 8009cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8009cfc:	d135      	bne.n	8009d6a <_vfiprintf_r+0x1ce>
 8009cfe:	9b03      	ldr	r3, [sp, #12]
 8009d00:	1d1a      	adds	r2, r3, #4
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	9203      	str	r2, [sp, #12]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	bfb8      	it	lt
 8009d0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d0e:	3402      	adds	r4, #2
 8009d10:	9305      	str	r3, [sp, #20]
 8009d12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009df8 <_vfiprintf_r+0x25c>
 8009d16:	7821      	ldrb	r1, [r4, #0]
 8009d18:	2203      	movs	r2, #3
 8009d1a:	4650      	mov	r0, sl
 8009d1c:	f7f6 fa80 	bl	8000220 <memchr>
 8009d20:	b140      	cbz	r0, 8009d34 <_vfiprintf_r+0x198>
 8009d22:	2340      	movs	r3, #64	; 0x40
 8009d24:	eba0 000a 	sub.w	r0, r0, sl
 8009d28:	fa03 f000 	lsl.w	r0, r3, r0
 8009d2c:	9b04      	ldr	r3, [sp, #16]
 8009d2e:	4303      	orrs	r3, r0
 8009d30:	3401      	adds	r4, #1
 8009d32:	9304      	str	r3, [sp, #16]
 8009d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d38:	482c      	ldr	r0, [pc, #176]	; (8009dec <_vfiprintf_r+0x250>)
 8009d3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d3e:	2206      	movs	r2, #6
 8009d40:	f7f6 fa6e 	bl	8000220 <memchr>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d03f      	beq.n	8009dc8 <_vfiprintf_r+0x22c>
 8009d48:	4b29      	ldr	r3, [pc, #164]	; (8009df0 <_vfiprintf_r+0x254>)
 8009d4a:	bb1b      	cbnz	r3, 8009d94 <_vfiprintf_r+0x1f8>
 8009d4c:	9b03      	ldr	r3, [sp, #12]
 8009d4e:	3307      	adds	r3, #7
 8009d50:	f023 0307 	bic.w	r3, r3, #7
 8009d54:	3308      	adds	r3, #8
 8009d56:	9303      	str	r3, [sp, #12]
 8009d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d5a:	443b      	add	r3, r7
 8009d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d5e:	e767      	b.n	8009c30 <_vfiprintf_r+0x94>
 8009d60:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d64:	460c      	mov	r4, r1
 8009d66:	2001      	movs	r0, #1
 8009d68:	e7a5      	b.n	8009cb6 <_vfiprintf_r+0x11a>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	3401      	adds	r4, #1
 8009d6e:	9305      	str	r3, [sp, #20]
 8009d70:	4619      	mov	r1, r3
 8009d72:	f04f 0c0a 	mov.w	ip, #10
 8009d76:	4620      	mov	r0, r4
 8009d78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d7c:	3a30      	subs	r2, #48	; 0x30
 8009d7e:	2a09      	cmp	r2, #9
 8009d80:	d903      	bls.n	8009d8a <_vfiprintf_r+0x1ee>
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d0c5      	beq.n	8009d12 <_vfiprintf_r+0x176>
 8009d86:	9105      	str	r1, [sp, #20]
 8009d88:	e7c3      	b.n	8009d12 <_vfiprintf_r+0x176>
 8009d8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d8e:	4604      	mov	r4, r0
 8009d90:	2301      	movs	r3, #1
 8009d92:	e7f0      	b.n	8009d76 <_vfiprintf_r+0x1da>
 8009d94:	ab03      	add	r3, sp, #12
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	462a      	mov	r2, r5
 8009d9a:	4b16      	ldr	r3, [pc, #88]	; (8009df4 <_vfiprintf_r+0x258>)
 8009d9c:	a904      	add	r1, sp, #16
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f7fd fd6c 	bl	800787c <_printf_float>
 8009da4:	4607      	mov	r7, r0
 8009da6:	1c78      	adds	r0, r7, #1
 8009da8:	d1d6      	bne.n	8009d58 <_vfiprintf_r+0x1bc>
 8009daa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dac:	07d9      	lsls	r1, r3, #31
 8009dae:	d405      	bmi.n	8009dbc <_vfiprintf_r+0x220>
 8009db0:	89ab      	ldrh	r3, [r5, #12]
 8009db2:	059a      	lsls	r2, r3, #22
 8009db4:	d402      	bmi.n	8009dbc <_vfiprintf_r+0x220>
 8009db6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009db8:	f7ff f8d8 	bl	8008f6c <__retarget_lock_release_recursive>
 8009dbc:	89ab      	ldrh	r3, [r5, #12]
 8009dbe:	065b      	lsls	r3, r3, #25
 8009dc0:	f53f af12 	bmi.w	8009be8 <_vfiprintf_r+0x4c>
 8009dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dc6:	e711      	b.n	8009bec <_vfiprintf_r+0x50>
 8009dc8:	ab03      	add	r3, sp, #12
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	462a      	mov	r2, r5
 8009dce:	4b09      	ldr	r3, [pc, #36]	; (8009df4 <_vfiprintf_r+0x258>)
 8009dd0:	a904      	add	r1, sp, #16
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	f7fd fff6 	bl	8007dc4 <_printf_i>
 8009dd8:	e7e4      	b.n	8009da4 <_vfiprintf_r+0x208>
 8009dda:	bf00      	nop
 8009ddc:	0800b4b8 	.word	0x0800b4b8
 8009de0:	0800b4d8 	.word	0x0800b4d8
 8009de4:	0800b498 	.word	0x0800b498
 8009de8:	0800b654 	.word	0x0800b654
 8009dec:	0800b65e 	.word	0x0800b65e
 8009df0:	0800787d 	.word	0x0800787d
 8009df4:	08009b77 	.word	0x08009b77
 8009df8:	0800b65a 	.word	0x0800b65a

08009dfc <_sbrk_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4d06      	ldr	r5, [pc, #24]	; (8009e18 <_sbrk_r+0x1c>)
 8009e00:	2300      	movs	r3, #0
 8009e02:	4604      	mov	r4, r0
 8009e04:	4608      	mov	r0, r1
 8009e06:	602b      	str	r3, [r5, #0]
 8009e08:	f7f8 fa32 	bl	8002270 <_sbrk>
 8009e0c:	1c43      	adds	r3, r0, #1
 8009e0e:	d102      	bne.n	8009e16 <_sbrk_r+0x1a>
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	b103      	cbz	r3, 8009e16 <_sbrk_r+0x1a>
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	bd38      	pop	{r3, r4, r5, pc}
 8009e18:	20000af0 	.word	0x20000af0

08009e1c <__sread>:
 8009e1c:	b510      	push	{r4, lr}
 8009e1e:	460c      	mov	r4, r1
 8009e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e24:	f000 faf2 	bl	800a40c <_read_r>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	bfab      	itete	ge
 8009e2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8009e30:	181b      	addge	r3, r3, r0
 8009e32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e36:	bfac      	ite	ge
 8009e38:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e3a:	81a3      	strhlt	r3, [r4, #12]
 8009e3c:	bd10      	pop	{r4, pc}

08009e3e <__swrite>:
 8009e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e42:	461f      	mov	r7, r3
 8009e44:	898b      	ldrh	r3, [r1, #12]
 8009e46:	05db      	lsls	r3, r3, #23
 8009e48:	4605      	mov	r5, r0
 8009e4a:	460c      	mov	r4, r1
 8009e4c:	4616      	mov	r6, r2
 8009e4e:	d505      	bpl.n	8009e5c <__swrite+0x1e>
 8009e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e54:	2302      	movs	r3, #2
 8009e56:	2200      	movs	r2, #0
 8009e58:	f000 f9f8 	bl	800a24c <_lseek_r>
 8009e5c:	89a3      	ldrh	r3, [r4, #12]
 8009e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e66:	81a3      	strh	r3, [r4, #12]
 8009e68:	4632      	mov	r2, r6
 8009e6a:	463b      	mov	r3, r7
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e72:	f000 b869 	b.w	8009f48 <_write_r>

08009e76 <__sseek>:
 8009e76:	b510      	push	{r4, lr}
 8009e78:	460c      	mov	r4, r1
 8009e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e7e:	f000 f9e5 	bl	800a24c <_lseek_r>
 8009e82:	1c43      	adds	r3, r0, #1
 8009e84:	89a3      	ldrh	r3, [r4, #12]
 8009e86:	bf15      	itete	ne
 8009e88:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e92:	81a3      	strheq	r3, [r4, #12]
 8009e94:	bf18      	it	ne
 8009e96:	81a3      	strhne	r3, [r4, #12]
 8009e98:	bd10      	pop	{r4, pc}

08009e9a <__sclose>:
 8009e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e9e:	f000 b8f1 	b.w	800a084 <_close_r>
	...

08009ea4 <__swbuf_r>:
 8009ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea6:	460e      	mov	r6, r1
 8009ea8:	4614      	mov	r4, r2
 8009eaa:	4605      	mov	r5, r0
 8009eac:	b118      	cbz	r0, 8009eb6 <__swbuf_r+0x12>
 8009eae:	6983      	ldr	r3, [r0, #24]
 8009eb0:	b90b      	cbnz	r3, 8009eb6 <__swbuf_r+0x12>
 8009eb2:	f7fe ffb7 	bl	8008e24 <__sinit>
 8009eb6:	4b21      	ldr	r3, [pc, #132]	; (8009f3c <__swbuf_r+0x98>)
 8009eb8:	429c      	cmp	r4, r3
 8009eba:	d12b      	bne.n	8009f14 <__swbuf_r+0x70>
 8009ebc:	686c      	ldr	r4, [r5, #4]
 8009ebe:	69a3      	ldr	r3, [r4, #24]
 8009ec0:	60a3      	str	r3, [r4, #8]
 8009ec2:	89a3      	ldrh	r3, [r4, #12]
 8009ec4:	071a      	lsls	r2, r3, #28
 8009ec6:	d52f      	bpl.n	8009f28 <__swbuf_r+0x84>
 8009ec8:	6923      	ldr	r3, [r4, #16]
 8009eca:	b36b      	cbz	r3, 8009f28 <__swbuf_r+0x84>
 8009ecc:	6923      	ldr	r3, [r4, #16]
 8009ece:	6820      	ldr	r0, [r4, #0]
 8009ed0:	1ac0      	subs	r0, r0, r3
 8009ed2:	6963      	ldr	r3, [r4, #20]
 8009ed4:	b2f6      	uxtb	r6, r6
 8009ed6:	4283      	cmp	r3, r0
 8009ed8:	4637      	mov	r7, r6
 8009eda:	dc04      	bgt.n	8009ee6 <__swbuf_r+0x42>
 8009edc:	4621      	mov	r1, r4
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f000 f966 	bl	800a1b0 <_fflush_r>
 8009ee4:	bb30      	cbnz	r0, 8009f34 <__swbuf_r+0x90>
 8009ee6:	68a3      	ldr	r3, [r4, #8]
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	60a3      	str	r3, [r4, #8]
 8009eec:	6823      	ldr	r3, [r4, #0]
 8009eee:	1c5a      	adds	r2, r3, #1
 8009ef0:	6022      	str	r2, [r4, #0]
 8009ef2:	701e      	strb	r6, [r3, #0]
 8009ef4:	6963      	ldr	r3, [r4, #20]
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	4283      	cmp	r3, r0
 8009efa:	d004      	beq.n	8009f06 <__swbuf_r+0x62>
 8009efc:	89a3      	ldrh	r3, [r4, #12]
 8009efe:	07db      	lsls	r3, r3, #31
 8009f00:	d506      	bpl.n	8009f10 <__swbuf_r+0x6c>
 8009f02:	2e0a      	cmp	r6, #10
 8009f04:	d104      	bne.n	8009f10 <__swbuf_r+0x6c>
 8009f06:	4621      	mov	r1, r4
 8009f08:	4628      	mov	r0, r5
 8009f0a:	f000 f951 	bl	800a1b0 <_fflush_r>
 8009f0e:	b988      	cbnz	r0, 8009f34 <__swbuf_r+0x90>
 8009f10:	4638      	mov	r0, r7
 8009f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f14:	4b0a      	ldr	r3, [pc, #40]	; (8009f40 <__swbuf_r+0x9c>)
 8009f16:	429c      	cmp	r4, r3
 8009f18:	d101      	bne.n	8009f1e <__swbuf_r+0x7a>
 8009f1a:	68ac      	ldr	r4, [r5, #8]
 8009f1c:	e7cf      	b.n	8009ebe <__swbuf_r+0x1a>
 8009f1e:	4b09      	ldr	r3, [pc, #36]	; (8009f44 <__swbuf_r+0xa0>)
 8009f20:	429c      	cmp	r4, r3
 8009f22:	bf08      	it	eq
 8009f24:	68ec      	ldreq	r4, [r5, #12]
 8009f26:	e7ca      	b.n	8009ebe <__swbuf_r+0x1a>
 8009f28:	4621      	mov	r1, r4
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f000 f81e 	bl	8009f6c <__swsetup_r>
 8009f30:	2800      	cmp	r0, #0
 8009f32:	d0cb      	beq.n	8009ecc <__swbuf_r+0x28>
 8009f34:	f04f 37ff 	mov.w	r7, #4294967295
 8009f38:	e7ea      	b.n	8009f10 <__swbuf_r+0x6c>
 8009f3a:	bf00      	nop
 8009f3c:	0800b4b8 	.word	0x0800b4b8
 8009f40:	0800b4d8 	.word	0x0800b4d8
 8009f44:	0800b498 	.word	0x0800b498

08009f48 <_write_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	4d07      	ldr	r5, [pc, #28]	; (8009f68 <_write_r+0x20>)
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	4608      	mov	r0, r1
 8009f50:	4611      	mov	r1, r2
 8009f52:	2200      	movs	r2, #0
 8009f54:	602a      	str	r2, [r5, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	f7f8 f939 	bl	80021ce <_write>
 8009f5c:	1c43      	adds	r3, r0, #1
 8009f5e:	d102      	bne.n	8009f66 <_write_r+0x1e>
 8009f60:	682b      	ldr	r3, [r5, #0]
 8009f62:	b103      	cbz	r3, 8009f66 <_write_r+0x1e>
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	bd38      	pop	{r3, r4, r5, pc}
 8009f68:	20000af0 	.word	0x20000af0

08009f6c <__swsetup_r>:
 8009f6c:	4b32      	ldr	r3, [pc, #200]	; (800a038 <__swsetup_r+0xcc>)
 8009f6e:	b570      	push	{r4, r5, r6, lr}
 8009f70:	681d      	ldr	r5, [r3, #0]
 8009f72:	4606      	mov	r6, r0
 8009f74:	460c      	mov	r4, r1
 8009f76:	b125      	cbz	r5, 8009f82 <__swsetup_r+0x16>
 8009f78:	69ab      	ldr	r3, [r5, #24]
 8009f7a:	b913      	cbnz	r3, 8009f82 <__swsetup_r+0x16>
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	f7fe ff51 	bl	8008e24 <__sinit>
 8009f82:	4b2e      	ldr	r3, [pc, #184]	; (800a03c <__swsetup_r+0xd0>)
 8009f84:	429c      	cmp	r4, r3
 8009f86:	d10f      	bne.n	8009fa8 <__swsetup_r+0x3c>
 8009f88:	686c      	ldr	r4, [r5, #4]
 8009f8a:	89a3      	ldrh	r3, [r4, #12]
 8009f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f90:	0719      	lsls	r1, r3, #28
 8009f92:	d42c      	bmi.n	8009fee <__swsetup_r+0x82>
 8009f94:	06dd      	lsls	r5, r3, #27
 8009f96:	d411      	bmi.n	8009fbc <__swsetup_r+0x50>
 8009f98:	2309      	movs	r3, #9
 8009f9a:	6033      	str	r3, [r6, #0]
 8009f9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fa0:	81a3      	strh	r3, [r4, #12]
 8009fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa6:	e03e      	b.n	800a026 <__swsetup_r+0xba>
 8009fa8:	4b25      	ldr	r3, [pc, #148]	; (800a040 <__swsetup_r+0xd4>)
 8009faa:	429c      	cmp	r4, r3
 8009fac:	d101      	bne.n	8009fb2 <__swsetup_r+0x46>
 8009fae:	68ac      	ldr	r4, [r5, #8]
 8009fb0:	e7eb      	b.n	8009f8a <__swsetup_r+0x1e>
 8009fb2:	4b24      	ldr	r3, [pc, #144]	; (800a044 <__swsetup_r+0xd8>)
 8009fb4:	429c      	cmp	r4, r3
 8009fb6:	bf08      	it	eq
 8009fb8:	68ec      	ldreq	r4, [r5, #12]
 8009fba:	e7e6      	b.n	8009f8a <__swsetup_r+0x1e>
 8009fbc:	0758      	lsls	r0, r3, #29
 8009fbe:	d512      	bpl.n	8009fe6 <__swsetup_r+0x7a>
 8009fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fc2:	b141      	cbz	r1, 8009fd6 <__swsetup_r+0x6a>
 8009fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fc8:	4299      	cmp	r1, r3
 8009fca:	d002      	beq.n	8009fd2 <__swsetup_r+0x66>
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f7ff fb7f 	bl	80096d0 <_free_r>
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8009fd6:	89a3      	ldrh	r3, [r4, #12]
 8009fd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fdc:	81a3      	strh	r3, [r4, #12]
 8009fde:	2300      	movs	r3, #0
 8009fe0:	6063      	str	r3, [r4, #4]
 8009fe2:	6923      	ldr	r3, [r4, #16]
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	89a3      	ldrh	r3, [r4, #12]
 8009fe8:	f043 0308 	orr.w	r3, r3, #8
 8009fec:	81a3      	strh	r3, [r4, #12]
 8009fee:	6923      	ldr	r3, [r4, #16]
 8009ff0:	b94b      	cbnz	r3, 800a006 <__swsetup_r+0x9a>
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ffc:	d003      	beq.n	800a006 <__swsetup_r+0x9a>
 8009ffe:	4621      	mov	r1, r4
 800a000:	4630      	mov	r0, r6
 800a002:	f000 f95b 	bl	800a2bc <__smakebuf_r>
 800a006:	89a0      	ldrh	r0, [r4, #12]
 800a008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a00c:	f010 0301 	ands.w	r3, r0, #1
 800a010:	d00a      	beq.n	800a028 <__swsetup_r+0xbc>
 800a012:	2300      	movs	r3, #0
 800a014:	60a3      	str	r3, [r4, #8]
 800a016:	6963      	ldr	r3, [r4, #20]
 800a018:	425b      	negs	r3, r3
 800a01a:	61a3      	str	r3, [r4, #24]
 800a01c:	6923      	ldr	r3, [r4, #16]
 800a01e:	b943      	cbnz	r3, 800a032 <__swsetup_r+0xc6>
 800a020:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a024:	d1ba      	bne.n	8009f9c <__swsetup_r+0x30>
 800a026:	bd70      	pop	{r4, r5, r6, pc}
 800a028:	0781      	lsls	r1, r0, #30
 800a02a:	bf58      	it	pl
 800a02c:	6963      	ldrpl	r3, [r4, #20]
 800a02e:	60a3      	str	r3, [r4, #8]
 800a030:	e7f4      	b.n	800a01c <__swsetup_r+0xb0>
 800a032:	2000      	movs	r0, #0
 800a034:	e7f7      	b.n	800a026 <__swsetup_r+0xba>
 800a036:	bf00      	nop
 800a038:	2000000c 	.word	0x2000000c
 800a03c:	0800b4b8 	.word	0x0800b4b8
 800a040:	0800b4d8 	.word	0x0800b4d8
 800a044:	0800b498 	.word	0x0800b498

0800a048 <__assert_func>:
 800a048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a04a:	4614      	mov	r4, r2
 800a04c:	461a      	mov	r2, r3
 800a04e:	4b09      	ldr	r3, [pc, #36]	; (800a074 <__assert_func+0x2c>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4605      	mov	r5, r0
 800a054:	68d8      	ldr	r0, [r3, #12]
 800a056:	b14c      	cbz	r4, 800a06c <__assert_func+0x24>
 800a058:	4b07      	ldr	r3, [pc, #28]	; (800a078 <__assert_func+0x30>)
 800a05a:	9100      	str	r1, [sp, #0]
 800a05c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a060:	4906      	ldr	r1, [pc, #24]	; (800a07c <__assert_func+0x34>)
 800a062:	462b      	mov	r3, r5
 800a064:	f000 f8e0 	bl	800a228 <fiprintf>
 800a068:	f000 f9ef 	bl	800a44a <abort>
 800a06c:	4b04      	ldr	r3, [pc, #16]	; (800a080 <__assert_func+0x38>)
 800a06e:	461c      	mov	r4, r3
 800a070:	e7f3      	b.n	800a05a <__assert_func+0x12>
 800a072:	bf00      	nop
 800a074:	2000000c 	.word	0x2000000c
 800a078:	0800b665 	.word	0x0800b665
 800a07c:	0800b672 	.word	0x0800b672
 800a080:	0800b6a0 	.word	0x0800b6a0

0800a084 <_close_r>:
 800a084:	b538      	push	{r3, r4, r5, lr}
 800a086:	4d06      	ldr	r5, [pc, #24]	; (800a0a0 <_close_r+0x1c>)
 800a088:	2300      	movs	r3, #0
 800a08a:	4604      	mov	r4, r0
 800a08c:	4608      	mov	r0, r1
 800a08e:	602b      	str	r3, [r5, #0]
 800a090:	f7f8 f8b9 	bl	8002206 <_close>
 800a094:	1c43      	adds	r3, r0, #1
 800a096:	d102      	bne.n	800a09e <_close_r+0x1a>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	b103      	cbz	r3, 800a09e <_close_r+0x1a>
 800a09c:	6023      	str	r3, [r4, #0]
 800a09e:	bd38      	pop	{r3, r4, r5, pc}
 800a0a0:	20000af0 	.word	0x20000af0

0800a0a4 <__sflush_r>:
 800a0a4:	898a      	ldrh	r2, [r1, #12]
 800a0a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0aa:	4605      	mov	r5, r0
 800a0ac:	0710      	lsls	r0, r2, #28
 800a0ae:	460c      	mov	r4, r1
 800a0b0:	d458      	bmi.n	800a164 <__sflush_r+0xc0>
 800a0b2:	684b      	ldr	r3, [r1, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	dc05      	bgt.n	800a0c4 <__sflush_r+0x20>
 800a0b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	dc02      	bgt.n	800a0c4 <__sflush_r+0x20>
 800a0be:	2000      	movs	r0, #0
 800a0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0c6:	2e00      	cmp	r6, #0
 800a0c8:	d0f9      	beq.n	800a0be <__sflush_r+0x1a>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0d0:	682f      	ldr	r7, [r5, #0]
 800a0d2:	602b      	str	r3, [r5, #0]
 800a0d4:	d032      	beq.n	800a13c <__sflush_r+0x98>
 800a0d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	075a      	lsls	r2, r3, #29
 800a0dc:	d505      	bpl.n	800a0ea <__sflush_r+0x46>
 800a0de:	6863      	ldr	r3, [r4, #4]
 800a0e0:	1ac0      	subs	r0, r0, r3
 800a0e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0e4:	b10b      	cbz	r3, 800a0ea <__sflush_r+0x46>
 800a0e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0e8:	1ac0      	subs	r0, r0, r3
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0f0:	6a21      	ldr	r1, [r4, #32]
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	47b0      	blx	r6
 800a0f6:	1c43      	adds	r3, r0, #1
 800a0f8:	89a3      	ldrh	r3, [r4, #12]
 800a0fa:	d106      	bne.n	800a10a <__sflush_r+0x66>
 800a0fc:	6829      	ldr	r1, [r5, #0]
 800a0fe:	291d      	cmp	r1, #29
 800a100:	d82c      	bhi.n	800a15c <__sflush_r+0xb8>
 800a102:	4a2a      	ldr	r2, [pc, #168]	; (800a1ac <__sflush_r+0x108>)
 800a104:	40ca      	lsrs	r2, r1
 800a106:	07d6      	lsls	r6, r2, #31
 800a108:	d528      	bpl.n	800a15c <__sflush_r+0xb8>
 800a10a:	2200      	movs	r2, #0
 800a10c:	6062      	str	r2, [r4, #4]
 800a10e:	04d9      	lsls	r1, r3, #19
 800a110:	6922      	ldr	r2, [r4, #16]
 800a112:	6022      	str	r2, [r4, #0]
 800a114:	d504      	bpl.n	800a120 <__sflush_r+0x7c>
 800a116:	1c42      	adds	r2, r0, #1
 800a118:	d101      	bne.n	800a11e <__sflush_r+0x7a>
 800a11a:	682b      	ldr	r3, [r5, #0]
 800a11c:	b903      	cbnz	r3, 800a120 <__sflush_r+0x7c>
 800a11e:	6560      	str	r0, [r4, #84]	; 0x54
 800a120:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a122:	602f      	str	r7, [r5, #0]
 800a124:	2900      	cmp	r1, #0
 800a126:	d0ca      	beq.n	800a0be <__sflush_r+0x1a>
 800a128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a12c:	4299      	cmp	r1, r3
 800a12e:	d002      	beq.n	800a136 <__sflush_r+0x92>
 800a130:	4628      	mov	r0, r5
 800a132:	f7ff facd 	bl	80096d0 <_free_r>
 800a136:	2000      	movs	r0, #0
 800a138:	6360      	str	r0, [r4, #52]	; 0x34
 800a13a:	e7c1      	b.n	800a0c0 <__sflush_r+0x1c>
 800a13c:	6a21      	ldr	r1, [r4, #32]
 800a13e:	2301      	movs	r3, #1
 800a140:	4628      	mov	r0, r5
 800a142:	47b0      	blx	r6
 800a144:	1c41      	adds	r1, r0, #1
 800a146:	d1c7      	bne.n	800a0d8 <__sflush_r+0x34>
 800a148:	682b      	ldr	r3, [r5, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d0c4      	beq.n	800a0d8 <__sflush_r+0x34>
 800a14e:	2b1d      	cmp	r3, #29
 800a150:	d001      	beq.n	800a156 <__sflush_r+0xb2>
 800a152:	2b16      	cmp	r3, #22
 800a154:	d101      	bne.n	800a15a <__sflush_r+0xb6>
 800a156:	602f      	str	r7, [r5, #0]
 800a158:	e7b1      	b.n	800a0be <__sflush_r+0x1a>
 800a15a:	89a3      	ldrh	r3, [r4, #12]
 800a15c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a160:	81a3      	strh	r3, [r4, #12]
 800a162:	e7ad      	b.n	800a0c0 <__sflush_r+0x1c>
 800a164:	690f      	ldr	r7, [r1, #16]
 800a166:	2f00      	cmp	r7, #0
 800a168:	d0a9      	beq.n	800a0be <__sflush_r+0x1a>
 800a16a:	0793      	lsls	r3, r2, #30
 800a16c:	680e      	ldr	r6, [r1, #0]
 800a16e:	bf08      	it	eq
 800a170:	694b      	ldreq	r3, [r1, #20]
 800a172:	600f      	str	r7, [r1, #0]
 800a174:	bf18      	it	ne
 800a176:	2300      	movne	r3, #0
 800a178:	eba6 0807 	sub.w	r8, r6, r7
 800a17c:	608b      	str	r3, [r1, #8]
 800a17e:	f1b8 0f00 	cmp.w	r8, #0
 800a182:	dd9c      	ble.n	800a0be <__sflush_r+0x1a>
 800a184:	6a21      	ldr	r1, [r4, #32]
 800a186:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a188:	4643      	mov	r3, r8
 800a18a:	463a      	mov	r2, r7
 800a18c:	4628      	mov	r0, r5
 800a18e:	47b0      	blx	r6
 800a190:	2800      	cmp	r0, #0
 800a192:	dc06      	bgt.n	800a1a2 <__sflush_r+0xfe>
 800a194:	89a3      	ldrh	r3, [r4, #12]
 800a196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a19a:	81a3      	strh	r3, [r4, #12]
 800a19c:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a0:	e78e      	b.n	800a0c0 <__sflush_r+0x1c>
 800a1a2:	4407      	add	r7, r0
 800a1a4:	eba8 0800 	sub.w	r8, r8, r0
 800a1a8:	e7e9      	b.n	800a17e <__sflush_r+0xda>
 800a1aa:	bf00      	nop
 800a1ac:	20400001 	.word	0x20400001

0800a1b0 <_fflush_r>:
 800a1b0:	b538      	push	{r3, r4, r5, lr}
 800a1b2:	690b      	ldr	r3, [r1, #16]
 800a1b4:	4605      	mov	r5, r0
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	b913      	cbnz	r3, 800a1c0 <_fflush_r+0x10>
 800a1ba:	2500      	movs	r5, #0
 800a1bc:	4628      	mov	r0, r5
 800a1be:	bd38      	pop	{r3, r4, r5, pc}
 800a1c0:	b118      	cbz	r0, 800a1ca <_fflush_r+0x1a>
 800a1c2:	6983      	ldr	r3, [r0, #24]
 800a1c4:	b90b      	cbnz	r3, 800a1ca <_fflush_r+0x1a>
 800a1c6:	f7fe fe2d 	bl	8008e24 <__sinit>
 800a1ca:	4b14      	ldr	r3, [pc, #80]	; (800a21c <_fflush_r+0x6c>)
 800a1cc:	429c      	cmp	r4, r3
 800a1ce:	d11b      	bne.n	800a208 <_fflush_r+0x58>
 800a1d0:	686c      	ldr	r4, [r5, #4]
 800a1d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d0ef      	beq.n	800a1ba <_fflush_r+0xa>
 800a1da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1dc:	07d0      	lsls	r0, r2, #31
 800a1de:	d404      	bmi.n	800a1ea <_fflush_r+0x3a>
 800a1e0:	0599      	lsls	r1, r3, #22
 800a1e2:	d402      	bmi.n	800a1ea <_fflush_r+0x3a>
 800a1e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1e6:	f7fe fec0 	bl	8008f6a <__retarget_lock_acquire_recursive>
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	f7ff ff59 	bl	800a0a4 <__sflush_r>
 800a1f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1f4:	07da      	lsls	r2, r3, #31
 800a1f6:	4605      	mov	r5, r0
 800a1f8:	d4e0      	bmi.n	800a1bc <_fflush_r+0xc>
 800a1fa:	89a3      	ldrh	r3, [r4, #12]
 800a1fc:	059b      	lsls	r3, r3, #22
 800a1fe:	d4dd      	bmi.n	800a1bc <_fflush_r+0xc>
 800a200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a202:	f7fe feb3 	bl	8008f6c <__retarget_lock_release_recursive>
 800a206:	e7d9      	b.n	800a1bc <_fflush_r+0xc>
 800a208:	4b05      	ldr	r3, [pc, #20]	; (800a220 <_fflush_r+0x70>)
 800a20a:	429c      	cmp	r4, r3
 800a20c:	d101      	bne.n	800a212 <_fflush_r+0x62>
 800a20e:	68ac      	ldr	r4, [r5, #8]
 800a210:	e7df      	b.n	800a1d2 <_fflush_r+0x22>
 800a212:	4b04      	ldr	r3, [pc, #16]	; (800a224 <_fflush_r+0x74>)
 800a214:	429c      	cmp	r4, r3
 800a216:	bf08      	it	eq
 800a218:	68ec      	ldreq	r4, [r5, #12]
 800a21a:	e7da      	b.n	800a1d2 <_fflush_r+0x22>
 800a21c:	0800b4b8 	.word	0x0800b4b8
 800a220:	0800b4d8 	.word	0x0800b4d8
 800a224:	0800b498 	.word	0x0800b498

0800a228 <fiprintf>:
 800a228:	b40e      	push	{r1, r2, r3}
 800a22a:	b503      	push	{r0, r1, lr}
 800a22c:	4601      	mov	r1, r0
 800a22e:	ab03      	add	r3, sp, #12
 800a230:	4805      	ldr	r0, [pc, #20]	; (800a248 <fiprintf+0x20>)
 800a232:	f853 2b04 	ldr.w	r2, [r3], #4
 800a236:	6800      	ldr	r0, [r0, #0]
 800a238:	9301      	str	r3, [sp, #4]
 800a23a:	f7ff fcaf 	bl	8009b9c <_vfiprintf_r>
 800a23e:	b002      	add	sp, #8
 800a240:	f85d eb04 	ldr.w	lr, [sp], #4
 800a244:	b003      	add	sp, #12
 800a246:	4770      	bx	lr
 800a248:	2000000c 	.word	0x2000000c

0800a24c <_lseek_r>:
 800a24c:	b538      	push	{r3, r4, r5, lr}
 800a24e:	4d07      	ldr	r5, [pc, #28]	; (800a26c <_lseek_r+0x20>)
 800a250:	4604      	mov	r4, r0
 800a252:	4608      	mov	r0, r1
 800a254:	4611      	mov	r1, r2
 800a256:	2200      	movs	r2, #0
 800a258:	602a      	str	r2, [r5, #0]
 800a25a:	461a      	mov	r2, r3
 800a25c:	f7f7 fffa 	bl	8002254 <_lseek>
 800a260:	1c43      	adds	r3, r0, #1
 800a262:	d102      	bne.n	800a26a <_lseek_r+0x1e>
 800a264:	682b      	ldr	r3, [r5, #0]
 800a266:	b103      	cbz	r3, 800a26a <_lseek_r+0x1e>
 800a268:	6023      	str	r3, [r4, #0]
 800a26a:	bd38      	pop	{r3, r4, r5, pc}
 800a26c:	20000af0 	.word	0x20000af0

0800a270 <__swhatbuf_r>:
 800a270:	b570      	push	{r4, r5, r6, lr}
 800a272:	460e      	mov	r6, r1
 800a274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a278:	2900      	cmp	r1, #0
 800a27a:	b096      	sub	sp, #88	; 0x58
 800a27c:	4614      	mov	r4, r2
 800a27e:	461d      	mov	r5, r3
 800a280:	da08      	bge.n	800a294 <__swhatbuf_r+0x24>
 800a282:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	602a      	str	r2, [r5, #0]
 800a28a:	061a      	lsls	r2, r3, #24
 800a28c:	d410      	bmi.n	800a2b0 <__swhatbuf_r+0x40>
 800a28e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a292:	e00e      	b.n	800a2b2 <__swhatbuf_r+0x42>
 800a294:	466a      	mov	r2, sp
 800a296:	f000 f8df 	bl	800a458 <_fstat_r>
 800a29a:	2800      	cmp	r0, #0
 800a29c:	dbf1      	blt.n	800a282 <__swhatbuf_r+0x12>
 800a29e:	9a01      	ldr	r2, [sp, #4]
 800a2a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a2a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a2a8:	425a      	negs	r2, r3
 800a2aa:	415a      	adcs	r2, r3
 800a2ac:	602a      	str	r2, [r5, #0]
 800a2ae:	e7ee      	b.n	800a28e <__swhatbuf_r+0x1e>
 800a2b0:	2340      	movs	r3, #64	; 0x40
 800a2b2:	2000      	movs	r0, #0
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	b016      	add	sp, #88	; 0x58
 800a2b8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a2bc <__smakebuf_r>:
 800a2bc:	898b      	ldrh	r3, [r1, #12]
 800a2be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2c0:	079d      	lsls	r5, r3, #30
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	460c      	mov	r4, r1
 800a2c6:	d507      	bpl.n	800a2d8 <__smakebuf_r+0x1c>
 800a2c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2cc:	6023      	str	r3, [r4, #0]
 800a2ce:	6123      	str	r3, [r4, #16]
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	6163      	str	r3, [r4, #20]
 800a2d4:	b002      	add	sp, #8
 800a2d6:	bd70      	pop	{r4, r5, r6, pc}
 800a2d8:	ab01      	add	r3, sp, #4
 800a2da:	466a      	mov	r2, sp
 800a2dc:	f7ff ffc8 	bl	800a270 <__swhatbuf_r>
 800a2e0:	9900      	ldr	r1, [sp, #0]
 800a2e2:	4605      	mov	r5, r0
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	f7ff fa5f 	bl	80097a8 <_malloc_r>
 800a2ea:	b948      	cbnz	r0, 800a300 <__smakebuf_r+0x44>
 800a2ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2f0:	059a      	lsls	r2, r3, #22
 800a2f2:	d4ef      	bmi.n	800a2d4 <__smakebuf_r+0x18>
 800a2f4:	f023 0303 	bic.w	r3, r3, #3
 800a2f8:	f043 0302 	orr.w	r3, r3, #2
 800a2fc:	81a3      	strh	r3, [r4, #12]
 800a2fe:	e7e3      	b.n	800a2c8 <__smakebuf_r+0xc>
 800a300:	4b0d      	ldr	r3, [pc, #52]	; (800a338 <__smakebuf_r+0x7c>)
 800a302:	62b3      	str	r3, [r6, #40]	; 0x28
 800a304:	89a3      	ldrh	r3, [r4, #12]
 800a306:	6020      	str	r0, [r4, #0]
 800a308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a30c:	81a3      	strh	r3, [r4, #12]
 800a30e:	9b00      	ldr	r3, [sp, #0]
 800a310:	6163      	str	r3, [r4, #20]
 800a312:	9b01      	ldr	r3, [sp, #4]
 800a314:	6120      	str	r0, [r4, #16]
 800a316:	b15b      	cbz	r3, 800a330 <__smakebuf_r+0x74>
 800a318:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a31c:	4630      	mov	r0, r6
 800a31e:	f000 f8ad 	bl	800a47c <_isatty_r>
 800a322:	b128      	cbz	r0, 800a330 <__smakebuf_r+0x74>
 800a324:	89a3      	ldrh	r3, [r4, #12]
 800a326:	f023 0303 	bic.w	r3, r3, #3
 800a32a:	f043 0301 	orr.w	r3, r3, #1
 800a32e:	81a3      	strh	r3, [r4, #12]
 800a330:	89a0      	ldrh	r0, [r4, #12]
 800a332:	4305      	orrs	r5, r0
 800a334:	81a5      	strh	r5, [r4, #12]
 800a336:	e7cd      	b.n	800a2d4 <__smakebuf_r+0x18>
 800a338:	08008dbd 	.word	0x08008dbd

0800a33c <__ascii_mbtowc>:
 800a33c:	b082      	sub	sp, #8
 800a33e:	b901      	cbnz	r1, 800a342 <__ascii_mbtowc+0x6>
 800a340:	a901      	add	r1, sp, #4
 800a342:	b142      	cbz	r2, 800a356 <__ascii_mbtowc+0x1a>
 800a344:	b14b      	cbz	r3, 800a35a <__ascii_mbtowc+0x1e>
 800a346:	7813      	ldrb	r3, [r2, #0]
 800a348:	600b      	str	r3, [r1, #0]
 800a34a:	7812      	ldrb	r2, [r2, #0]
 800a34c:	1e10      	subs	r0, r2, #0
 800a34e:	bf18      	it	ne
 800a350:	2001      	movne	r0, #1
 800a352:	b002      	add	sp, #8
 800a354:	4770      	bx	lr
 800a356:	4610      	mov	r0, r2
 800a358:	e7fb      	b.n	800a352 <__ascii_mbtowc+0x16>
 800a35a:	f06f 0001 	mvn.w	r0, #1
 800a35e:	e7f8      	b.n	800a352 <__ascii_mbtowc+0x16>

0800a360 <memmove>:
 800a360:	4288      	cmp	r0, r1
 800a362:	b510      	push	{r4, lr}
 800a364:	eb01 0402 	add.w	r4, r1, r2
 800a368:	d902      	bls.n	800a370 <memmove+0x10>
 800a36a:	4284      	cmp	r4, r0
 800a36c:	4623      	mov	r3, r4
 800a36e:	d807      	bhi.n	800a380 <memmove+0x20>
 800a370:	1e43      	subs	r3, r0, #1
 800a372:	42a1      	cmp	r1, r4
 800a374:	d008      	beq.n	800a388 <memmove+0x28>
 800a376:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a37a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a37e:	e7f8      	b.n	800a372 <memmove+0x12>
 800a380:	4402      	add	r2, r0
 800a382:	4601      	mov	r1, r0
 800a384:	428a      	cmp	r2, r1
 800a386:	d100      	bne.n	800a38a <memmove+0x2a>
 800a388:	bd10      	pop	{r4, pc}
 800a38a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a38e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a392:	e7f7      	b.n	800a384 <memmove+0x24>

0800a394 <__malloc_lock>:
 800a394:	4801      	ldr	r0, [pc, #4]	; (800a39c <__malloc_lock+0x8>)
 800a396:	f7fe bde8 	b.w	8008f6a <__retarget_lock_acquire_recursive>
 800a39a:	bf00      	nop
 800a39c:	20000ae4 	.word	0x20000ae4

0800a3a0 <__malloc_unlock>:
 800a3a0:	4801      	ldr	r0, [pc, #4]	; (800a3a8 <__malloc_unlock+0x8>)
 800a3a2:	f7fe bde3 	b.w	8008f6c <__retarget_lock_release_recursive>
 800a3a6:	bf00      	nop
 800a3a8:	20000ae4 	.word	0x20000ae4

0800a3ac <_realloc_r>:
 800a3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b0:	4680      	mov	r8, r0
 800a3b2:	4614      	mov	r4, r2
 800a3b4:	460e      	mov	r6, r1
 800a3b6:	b921      	cbnz	r1, 800a3c2 <_realloc_r+0x16>
 800a3b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3bc:	4611      	mov	r1, r2
 800a3be:	f7ff b9f3 	b.w	80097a8 <_malloc_r>
 800a3c2:	b92a      	cbnz	r2, 800a3d0 <_realloc_r+0x24>
 800a3c4:	f7ff f984 	bl	80096d0 <_free_r>
 800a3c8:	4625      	mov	r5, r4
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3d0:	f000 f864 	bl	800a49c <_malloc_usable_size_r>
 800a3d4:	4284      	cmp	r4, r0
 800a3d6:	4607      	mov	r7, r0
 800a3d8:	d802      	bhi.n	800a3e0 <_realloc_r+0x34>
 800a3da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a3de:	d812      	bhi.n	800a406 <_realloc_r+0x5a>
 800a3e0:	4621      	mov	r1, r4
 800a3e2:	4640      	mov	r0, r8
 800a3e4:	f7ff f9e0 	bl	80097a8 <_malloc_r>
 800a3e8:	4605      	mov	r5, r0
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d0ed      	beq.n	800a3ca <_realloc_r+0x1e>
 800a3ee:	42bc      	cmp	r4, r7
 800a3f0:	4622      	mov	r2, r4
 800a3f2:	4631      	mov	r1, r6
 800a3f4:	bf28      	it	cs
 800a3f6:	463a      	movcs	r2, r7
 800a3f8:	f7fe fdc2 	bl	8008f80 <memcpy>
 800a3fc:	4631      	mov	r1, r6
 800a3fe:	4640      	mov	r0, r8
 800a400:	f7ff f966 	bl	80096d0 <_free_r>
 800a404:	e7e1      	b.n	800a3ca <_realloc_r+0x1e>
 800a406:	4635      	mov	r5, r6
 800a408:	e7df      	b.n	800a3ca <_realloc_r+0x1e>
	...

0800a40c <_read_r>:
 800a40c:	b538      	push	{r3, r4, r5, lr}
 800a40e:	4d07      	ldr	r5, [pc, #28]	; (800a42c <_read_r+0x20>)
 800a410:	4604      	mov	r4, r0
 800a412:	4608      	mov	r0, r1
 800a414:	4611      	mov	r1, r2
 800a416:	2200      	movs	r2, #0
 800a418:	602a      	str	r2, [r5, #0]
 800a41a:	461a      	mov	r2, r3
 800a41c:	f7f7 feba 	bl	8002194 <_read>
 800a420:	1c43      	adds	r3, r0, #1
 800a422:	d102      	bne.n	800a42a <_read_r+0x1e>
 800a424:	682b      	ldr	r3, [r5, #0]
 800a426:	b103      	cbz	r3, 800a42a <_read_r+0x1e>
 800a428:	6023      	str	r3, [r4, #0]
 800a42a:	bd38      	pop	{r3, r4, r5, pc}
 800a42c:	20000af0 	.word	0x20000af0

0800a430 <__ascii_wctomb>:
 800a430:	b149      	cbz	r1, 800a446 <__ascii_wctomb+0x16>
 800a432:	2aff      	cmp	r2, #255	; 0xff
 800a434:	bf85      	ittet	hi
 800a436:	238a      	movhi	r3, #138	; 0x8a
 800a438:	6003      	strhi	r3, [r0, #0]
 800a43a:	700a      	strbls	r2, [r1, #0]
 800a43c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a440:	bf98      	it	ls
 800a442:	2001      	movls	r0, #1
 800a444:	4770      	bx	lr
 800a446:	4608      	mov	r0, r1
 800a448:	4770      	bx	lr

0800a44a <abort>:
 800a44a:	b508      	push	{r3, lr}
 800a44c:	2006      	movs	r0, #6
 800a44e:	f000 f855 	bl	800a4fc <raise>
 800a452:	2001      	movs	r0, #1
 800a454:	f7f7 fe94 	bl	8002180 <_exit>

0800a458 <_fstat_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	4d07      	ldr	r5, [pc, #28]	; (800a478 <_fstat_r+0x20>)
 800a45c:	2300      	movs	r3, #0
 800a45e:	4604      	mov	r4, r0
 800a460:	4608      	mov	r0, r1
 800a462:	4611      	mov	r1, r2
 800a464:	602b      	str	r3, [r5, #0]
 800a466:	f7f7 feda 	bl	800221e <_fstat>
 800a46a:	1c43      	adds	r3, r0, #1
 800a46c:	d102      	bne.n	800a474 <_fstat_r+0x1c>
 800a46e:	682b      	ldr	r3, [r5, #0]
 800a470:	b103      	cbz	r3, 800a474 <_fstat_r+0x1c>
 800a472:	6023      	str	r3, [r4, #0]
 800a474:	bd38      	pop	{r3, r4, r5, pc}
 800a476:	bf00      	nop
 800a478:	20000af0 	.word	0x20000af0

0800a47c <_isatty_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4d06      	ldr	r5, [pc, #24]	; (800a498 <_isatty_r+0x1c>)
 800a480:	2300      	movs	r3, #0
 800a482:	4604      	mov	r4, r0
 800a484:	4608      	mov	r0, r1
 800a486:	602b      	str	r3, [r5, #0]
 800a488:	f7f7 fed9 	bl	800223e <_isatty>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	d102      	bne.n	800a496 <_isatty_r+0x1a>
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	b103      	cbz	r3, 800a496 <_isatty_r+0x1a>
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	20000af0 	.word	0x20000af0

0800a49c <_malloc_usable_size_r>:
 800a49c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4a0:	1f18      	subs	r0, r3, #4
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	bfbc      	itt	lt
 800a4a6:	580b      	ldrlt	r3, [r1, r0]
 800a4a8:	18c0      	addlt	r0, r0, r3
 800a4aa:	4770      	bx	lr

0800a4ac <_raise_r>:
 800a4ac:	291f      	cmp	r1, #31
 800a4ae:	b538      	push	{r3, r4, r5, lr}
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	460d      	mov	r5, r1
 800a4b4:	d904      	bls.n	800a4c0 <_raise_r+0x14>
 800a4b6:	2316      	movs	r3, #22
 800a4b8:	6003      	str	r3, [r0, #0]
 800a4ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4c2:	b112      	cbz	r2, 800a4ca <_raise_r+0x1e>
 800a4c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4c8:	b94b      	cbnz	r3, 800a4de <_raise_r+0x32>
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f000 f830 	bl	800a530 <_getpid_r>
 800a4d0:	462a      	mov	r2, r5
 800a4d2:	4601      	mov	r1, r0
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4da:	f000 b817 	b.w	800a50c <_kill_r>
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d00a      	beq.n	800a4f8 <_raise_r+0x4c>
 800a4e2:	1c59      	adds	r1, r3, #1
 800a4e4:	d103      	bne.n	800a4ee <_raise_r+0x42>
 800a4e6:	2316      	movs	r3, #22
 800a4e8:	6003      	str	r3, [r0, #0]
 800a4ea:	2001      	movs	r0, #1
 800a4ec:	e7e7      	b.n	800a4be <_raise_r+0x12>
 800a4ee:	2400      	movs	r4, #0
 800a4f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	4798      	blx	r3
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	e7e0      	b.n	800a4be <_raise_r+0x12>

0800a4fc <raise>:
 800a4fc:	4b02      	ldr	r3, [pc, #8]	; (800a508 <raise+0xc>)
 800a4fe:	4601      	mov	r1, r0
 800a500:	6818      	ldr	r0, [r3, #0]
 800a502:	f7ff bfd3 	b.w	800a4ac <_raise_r>
 800a506:	bf00      	nop
 800a508:	2000000c 	.word	0x2000000c

0800a50c <_kill_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	4d07      	ldr	r5, [pc, #28]	; (800a52c <_kill_r+0x20>)
 800a510:	2300      	movs	r3, #0
 800a512:	4604      	mov	r4, r0
 800a514:	4608      	mov	r0, r1
 800a516:	4611      	mov	r1, r2
 800a518:	602b      	str	r3, [r5, #0]
 800a51a:	f7f7 fe21 	bl	8002160 <_kill>
 800a51e:	1c43      	adds	r3, r0, #1
 800a520:	d102      	bne.n	800a528 <_kill_r+0x1c>
 800a522:	682b      	ldr	r3, [r5, #0]
 800a524:	b103      	cbz	r3, 800a528 <_kill_r+0x1c>
 800a526:	6023      	str	r3, [r4, #0]
 800a528:	bd38      	pop	{r3, r4, r5, pc}
 800a52a:	bf00      	nop
 800a52c:	20000af0 	.word	0x20000af0

0800a530 <_getpid_r>:
 800a530:	f7f7 be0e 	b.w	8002150 <_getpid>

0800a534 <pow>:
 800a534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a536:	ed2d 8b02 	vpush	{d8}
 800a53a:	eeb0 8a40 	vmov.f32	s16, s0
 800a53e:	eef0 8a60 	vmov.f32	s17, s1
 800a542:	ec55 4b11 	vmov	r4, r5, d1
 800a546:	f000 f867 	bl	800a618 <__ieee754_pow>
 800a54a:	4622      	mov	r2, r4
 800a54c:	462b      	mov	r3, r5
 800a54e:	4620      	mov	r0, r4
 800a550:	4629      	mov	r1, r5
 800a552:	ec57 6b10 	vmov	r6, r7, d0
 800a556:	f7f6 fb09 	bl	8000b6c <__aeabi_dcmpun>
 800a55a:	2800      	cmp	r0, #0
 800a55c:	d13b      	bne.n	800a5d6 <pow+0xa2>
 800a55e:	ec51 0b18 	vmov	r0, r1, d8
 800a562:	2200      	movs	r2, #0
 800a564:	2300      	movs	r3, #0
 800a566:	f7f6 facf 	bl	8000b08 <__aeabi_dcmpeq>
 800a56a:	b1b8      	cbz	r0, 800a59c <pow+0x68>
 800a56c:	2200      	movs	r2, #0
 800a56e:	2300      	movs	r3, #0
 800a570:	4620      	mov	r0, r4
 800a572:	4629      	mov	r1, r5
 800a574:	f7f6 fac8 	bl	8000b08 <__aeabi_dcmpeq>
 800a578:	2800      	cmp	r0, #0
 800a57a:	d146      	bne.n	800a60a <pow+0xd6>
 800a57c:	ec45 4b10 	vmov	d0, r4, r5
 800a580:	f000 fe63 	bl	800b24a <finite>
 800a584:	b338      	cbz	r0, 800a5d6 <pow+0xa2>
 800a586:	2200      	movs	r2, #0
 800a588:	2300      	movs	r3, #0
 800a58a:	4620      	mov	r0, r4
 800a58c:	4629      	mov	r1, r5
 800a58e:	f7f6 fac5 	bl	8000b1c <__aeabi_dcmplt>
 800a592:	b300      	cbz	r0, 800a5d6 <pow+0xa2>
 800a594:	f7fd f8a0 	bl	80076d8 <__errno>
 800a598:	2322      	movs	r3, #34	; 0x22
 800a59a:	e01b      	b.n	800a5d4 <pow+0xa0>
 800a59c:	ec47 6b10 	vmov	d0, r6, r7
 800a5a0:	f000 fe53 	bl	800b24a <finite>
 800a5a4:	b9e0      	cbnz	r0, 800a5e0 <pow+0xac>
 800a5a6:	eeb0 0a48 	vmov.f32	s0, s16
 800a5aa:	eef0 0a68 	vmov.f32	s1, s17
 800a5ae:	f000 fe4c 	bl	800b24a <finite>
 800a5b2:	b1a8      	cbz	r0, 800a5e0 <pow+0xac>
 800a5b4:	ec45 4b10 	vmov	d0, r4, r5
 800a5b8:	f000 fe47 	bl	800b24a <finite>
 800a5bc:	b180      	cbz	r0, 800a5e0 <pow+0xac>
 800a5be:	4632      	mov	r2, r6
 800a5c0:	463b      	mov	r3, r7
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	4639      	mov	r1, r7
 800a5c6:	f7f6 fad1 	bl	8000b6c <__aeabi_dcmpun>
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	d0e2      	beq.n	800a594 <pow+0x60>
 800a5ce:	f7fd f883 	bl	80076d8 <__errno>
 800a5d2:	2321      	movs	r3, #33	; 0x21
 800a5d4:	6003      	str	r3, [r0, #0]
 800a5d6:	ecbd 8b02 	vpop	{d8}
 800a5da:	ec47 6b10 	vmov	d0, r6, r7
 800a5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	4639      	mov	r1, r7
 800a5e8:	f7f6 fa8e 	bl	8000b08 <__aeabi_dcmpeq>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d0f2      	beq.n	800a5d6 <pow+0xa2>
 800a5f0:	eeb0 0a48 	vmov.f32	s0, s16
 800a5f4:	eef0 0a68 	vmov.f32	s1, s17
 800a5f8:	f000 fe27 	bl	800b24a <finite>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	d0ea      	beq.n	800a5d6 <pow+0xa2>
 800a600:	ec45 4b10 	vmov	d0, r4, r5
 800a604:	f000 fe21 	bl	800b24a <finite>
 800a608:	e7c3      	b.n	800a592 <pow+0x5e>
 800a60a:	4f01      	ldr	r7, [pc, #4]	; (800a610 <pow+0xdc>)
 800a60c:	2600      	movs	r6, #0
 800a60e:	e7e2      	b.n	800a5d6 <pow+0xa2>
 800a610:	3ff00000 	.word	0x3ff00000
 800a614:	00000000 	.word	0x00000000

0800a618 <__ieee754_pow>:
 800a618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a61c:	ed2d 8b06 	vpush	{d8-d10}
 800a620:	b089      	sub	sp, #36	; 0x24
 800a622:	ed8d 1b00 	vstr	d1, [sp]
 800a626:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a62a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a62e:	ea58 0102 	orrs.w	r1, r8, r2
 800a632:	ec57 6b10 	vmov	r6, r7, d0
 800a636:	d115      	bne.n	800a664 <__ieee754_pow+0x4c>
 800a638:	19b3      	adds	r3, r6, r6
 800a63a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a63e:	4152      	adcs	r2, r2
 800a640:	4299      	cmp	r1, r3
 800a642:	4b89      	ldr	r3, [pc, #548]	; (800a868 <__ieee754_pow+0x250>)
 800a644:	4193      	sbcs	r3, r2
 800a646:	f080 84d2 	bcs.w	800afee <__ieee754_pow+0x9d6>
 800a64a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a64e:	4630      	mov	r0, r6
 800a650:	4639      	mov	r1, r7
 800a652:	f7f5 fe3b 	bl	80002cc <__adddf3>
 800a656:	ec41 0b10 	vmov	d0, r0, r1
 800a65a:	b009      	add	sp, #36	; 0x24
 800a65c:	ecbd 8b06 	vpop	{d8-d10}
 800a660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a664:	4b81      	ldr	r3, [pc, #516]	; (800a86c <__ieee754_pow+0x254>)
 800a666:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a66a:	429c      	cmp	r4, r3
 800a66c:	ee10 aa10 	vmov	sl, s0
 800a670:	463d      	mov	r5, r7
 800a672:	dc06      	bgt.n	800a682 <__ieee754_pow+0x6a>
 800a674:	d101      	bne.n	800a67a <__ieee754_pow+0x62>
 800a676:	2e00      	cmp	r6, #0
 800a678:	d1e7      	bne.n	800a64a <__ieee754_pow+0x32>
 800a67a:	4598      	cmp	r8, r3
 800a67c:	dc01      	bgt.n	800a682 <__ieee754_pow+0x6a>
 800a67e:	d10f      	bne.n	800a6a0 <__ieee754_pow+0x88>
 800a680:	b172      	cbz	r2, 800a6a0 <__ieee754_pow+0x88>
 800a682:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a686:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a68a:	ea55 050a 	orrs.w	r5, r5, sl
 800a68e:	d1dc      	bne.n	800a64a <__ieee754_pow+0x32>
 800a690:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a694:	18db      	adds	r3, r3, r3
 800a696:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a69a:	4152      	adcs	r2, r2
 800a69c:	429d      	cmp	r5, r3
 800a69e:	e7d0      	b.n	800a642 <__ieee754_pow+0x2a>
 800a6a0:	2d00      	cmp	r5, #0
 800a6a2:	da3b      	bge.n	800a71c <__ieee754_pow+0x104>
 800a6a4:	4b72      	ldr	r3, [pc, #456]	; (800a870 <__ieee754_pow+0x258>)
 800a6a6:	4598      	cmp	r8, r3
 800a6a8:	dc51      	bgt.n	800a74e <__ieee754_pow+0x136>
 800a6aa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a6ae:	4598      	cmp	r8, r3
 800a6b0:	f340 84ac 	ble.w	800b00c <__ieee754_pow+0x9f4>
 800a6b4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a6b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a6bc:	2b14      	cmp	r3, #20
 800a6be:	dd0f      	ble.n	800a6e0 <__ieee754_pow+0xc8>
 800a6c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a6c4:	fa22 f103 	lsr.w	r1, r2, r3
 800a6c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	f040 849d 	bne.w	800b00c <__ieee754_pow+0x9f4>
 800a6d2:	f001 0101 	and.w	r1, r1, #1
 800a6d6:	f1c1 0302 	rsb	r3, r1, #2
 800a6da:	9304      	str	r3, [sp, #16]
 800a6dc:	b182      	cbz	r2, 800a700 <__ieee754_pow+0xe8>
 800a6de:	e05f      	b.n	800a7a0 <__ieee754_pow+0x188>
 800a6e0:	2a00      	cmp	r2, #0
 800a6e2:	d15b      	bne.n	800a79c <__ieee754_pow+0x184>
 800a6e4:	f1c3 0314 	rsb	r3, r3, #20
 800a6e8:	fa48 f103 	asr.w	r1, r8, r3
 800a6ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a6f0:	4543      	cmp	r3, r8
 800a6f2:	f040 8488 	bne.w	800b006 <__ieee754_pow+0x9ee>
 800a6f6:	f001 0101 	and.w	r1, r1, #1
 800a6fa:	f1c1 0302 	rsb	r3, r1, #2
 800a6fe:	9304      	str	r3, [sp, #16]
 800a700:	4b5c      	ldr	r3, [pc, #368]	; (800a874 <__ieee754_pow+0x25c>)
 800a702:	4598      	cmp	r8, r3
 800a704:	d132      	bne.n	800a76c <__ieee754_pow+0x154>
 800a706:	f1b9 0f00 	cmp.w	r9, #0
 800a70a:	f280 8478 	bge.w	800affe <__ieee754_pow+0x9e6>
 800a70e:	4959      	ldr	r1, [pc, #356]	; (800a874 <__ieee754_pow+0x25c>)
 800a710:	4632      	mov	r2, r6
 800a712:	463b      	mov	r3, r7
 800a714:	2000      	movs	r0, #0
 800a716:	f7f6 f8b9 	bl	800088c <__aeabi_ddiv>
 800a71a:	e79c      	b.n	800a656 <__ieee754_pow+0x3e>
 800a71c:	2300      	movs	r3, #0
 800a71e:	9304      	str	r3, [sp, #16]
 800a720:	2a00      	cmp	r2, #0
 800a722:	d13d      	bne.n	800a7a0 <__ieee754_pow+0x188>
 800a724:	4b51      	ldr	r3, [pc, #324]	; (800a86c <__ieee754_pow+0x254>)
 800a726:	4598      	cmp	r8, r3
 800a728:	d1ea      	bne.n	800a700 <__ieee754_pow+0xe8>
 800a72a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a72e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a732:	ea53 030a 	orrs.w	r3, r3, sl
 800a736:	f000 845a 	beq.w	800afee <__ieee754_pow+0x9d6>
 800a73a:	4b4f      	ldr	r3, [pc, #316]	; (800a878 <__ieee754_pow+0x260>)
 800a73c:	429c      	cmp	r4, r3
 800a73e:	dd08      	ble.n	800a752 <__ieee754_pow+0x13a>
 800a740:	f1b9 0f00 	cmp.w	r9, #0
 800a744:	f2c0 8457 	blt.w	800aff6 <__ieee754_pow+0x9de>
 800a748:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a74c:	e783      	b.n	800a656 <__ieee754_pow+0x3e>
 800a74e:	2302      	movs	r3, #2
 800a750:	e7e5      	b.n	800a71e <__ieee754_pow+0x106>
 800a752:	f1b9 0f00 	cmp.w	r9, #0
 800a756:	f04f 0000 	mov.w	r0, #0
 800a75a:	f04f 0100 	mov.w	r1, #0
 800a75e:	f6bf af7a 	bge.w	800a656 <__ieee754_pow+0x3e>
 800a762:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a766:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a76a:	e774      	b.n	800a656 <__ieee754_pow+0x3e>
 800a76c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a770:	d106      	bne.n	800a780 <__ieee754_pow+0x168>
 800a772:	4632      	mov	r2, r6
 800a774:	463b      	mov	r3, r7
 800a776:	4630      	mov	r0, r6
 800a778:	4639      	mov	r1, r7
 800a77a:	f7f5 ff5d 	bl	8000638 <__aeabi_dmul>
 800a77e:	e76a      	b.n	800a656 <__ieee754_pow+0x3e>
 800a780:	4b3e      	ldr	r3, [pc, #248]	; (800a87c <__ieee754_pow+0x264>)
 800a782:	4599      	cmp	r9, r3
 800a784:	d10c      	bne.n	800a7a0 <__ieee754_pow+0x188>
 800a786:	2d00      	cmp	r5, #0
 800a788:	db0a      	blt.n	800a7a0 <__ieee754_pow+0x188>
 800a78a:	ec47 6b10 	vmov	d0, r6, r7
 800a78e:	b009      	add	sp, #36	; 0x24
 800a790:	ecbd 8b06 	vpop	{d8-d10}
 800a794:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a798:	f000 bc6c 	b.w	800b074 <__ieee754_sqrt>
 800a79c:	2300      	movs	r3, #0
 800a79e:	9304      	str	r3, [sp, #16]
 800a7a0:	ec47 6b10 	vmov	d0, r6, r7
 800a7a4:	f000 fd48 	bl	800b238 <fabs>
 800a7a8:	ec51 0b10 	vmov	r0, r1, d0
 800a7ac:	f1ba 0f00 	cmp.w	sl, #0
 800a7b0:	d129      	bne.n	800a806 <__ieee754_pow+0x1ee>
 800a7b2:	b124      	cbz	r4, 800a7be <__ieee754_pow+0x1a6>
 800a7b4:	4b2f      	ldr	r3, [pc, #188]	; (800a874 <__ieee754_pow+0x25c>)
 800a7b6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d123      	bne.n	800a806 <__ieee754_pow+0x1ee>
 800a7be:	f1b9 0f00 	cmp.w	r9, #0
 800a7c2:	da05      	bge.n	800a7d0 <__ieee754_pow+0x1b8>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	492a      	ldr	r1, [pc, #168]	; (800a874 <__ieee754_pow+0x25c>)
 800a7cc:	f7f6 f85e 	bl	800088c <__aeabi_ddiv>
 800a7d0:	2d00      	cmp	r5, #0
 800a7d2:	f6bf af40 	bge.w	800a656 <__ieee754_pow+0x3e>
 800a7d6:	9b04      	ldr	r3, [sp, #16]
 800a7d8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a7dc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a7e0:	4323      	orrs	r3, r4
 800a7e2:	d108      	bne.n	800a7f6 <__ieee754_pow+0x1de>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	4610      	mov	r0, r2
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	f7f5 fd6c 	bl	80002c8 <__aeabi_dsub>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	e78f      	b.n	800a716 <__ieee754_pow+0xfe>
 800a7f6:	9b04      	ldr	r3, [sp, #16]
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	f47f af2c 	bne.w	800a656 <__ieee754_pow+0x3e>
 800a7fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a802:	4619      	mov	r1, r3
 800a804:	e727      	b.n	800a656 <__ieee754_pow+0x3e>
 800a806:	0feb      	lsrs	r3, r5, #31
 800a808:	3b01      	subs	r3, #1
 800a80a:	9306      	str	r3, [sp, #24]
 800a80c:	9a06      	ldr	r2, [sp, #24]
 800a80e:	9b04      	ldr	r3, [sp, #16]
 800a810:	4313      	orrs	r3, r2
 800a812:	d102      	bne.n	800a81a <__ieee754_pow+0x202>
 800a814:	4632      	mov	r2, r6
 800a816:	463b      	mov	r3, r7
 800a818:	e7e6      	b.n	800a7e8 <__ieee754_pow+0x1d0>
 800a81a:	4b19      	ldr	r3, [pc, #100]	; (800a880 <__ieee754_pow+0x268>)
 800a81c:	4598      	cmp	r8, r3
 800a81e:	f340 80fb 	ble.w	800aa18 <__ieee754_pow+0x400>
 800a822:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a826:	4598      	cmp	r8, r3
 800a828:	4b13      	ldr	r3, [pc, #76]	; (800a878 <__ieee754_pow+0x260>)
 800a82a:	dd0c      	ble.n	800a846 <__ieee754_pow+0x22e>
 800a82c:	429c      	cmp	r4, r3
 800a82e:	dc0f      	bgt.n	800a850 <__ieee754_pow+0x238>
 800a830:	f1b9 0f00 	cmp.w	r9, #0
 800a834:	da0f      	bge.n	800a856 <__ieee754_pow+0x23e>
 800a836:	2000      	movs	r0, #0
 800a838:	b009      	add	sp, #36	; 0x24
 800a83a:	ecbd 8b06 	vpop	{d8-d10}
 800a83e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a842:	f000 bcf0 	b.w	800b226 <__math_oflow>
 800a846:	429c      	cmp	r4, r3
 800a848:	dbf2      	blt.n	800a830 <__ieee754_pow+0x218>
 800a84a:	4b0a      	ldr	r3, [pc, #40]	; (800a874 <__ieee754_pow+0x25c>)
 800a84c:	429c      	cmp	r4, r3
 800a84e:	dd19      	ble.n	800a884 <__ieee754_pow+0x26c>
 800a850:	f1b9 0f00 	cmp.w	r9, #0
 800a854:	dcef      	bgt.n	800a836 <__ieee754_pow+0x21e>
 800a856:	2000      	movs	r0, #0
 800a858:	b009      	add	sp, #36	; 0x24
 800a85a:	ecbd 8b06 	vpop	{d8-d10}
 800a85e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a862:	f000 bcd7 	b.w	800b214 <__math_uflow>
 800a866:	bf00      	nop
 800a868:	fff00000 	.word	0xfff00000
 800a86c:	7ff00000 	.word	0x7ff00000
 800a870:	433fffff 	.word	0x433fffff
 800a874:	3ff00000 	.word	0x3ff00000
 800a878:	3fefffff 	.word	0x3fefffff
 800a87c:	3fe00000 	.word	0x3fe00000
 800a880:	41e00000 	.word	0x41e00000
 800a884:	4b60      	ldr	r3, [pc, #384]	; (800aa08 <__ieee754_pow+0x3f0>)
 800a886:	2200      	movs	r2, #0
 800a888:	f7f5 fd1e 	bl	80002c8 <__aeabi_dsub>
 800a88c:	a354      	add	r3, pc, #336	; (adr r3, 800a9e0 <__ieee754_pow+0x3c8>)
 800a88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a892:	4604      	mov	r4, r0
 800a894:	460d      	mov	r5, r1
 800a896:	f7f5 fecf 	bl	8000638 <__aeabi_dmul>
 800a89a:	a353      	add	r3, pc, #332	; (adr r3, 800a9e8 <__ieee754_pow+0x3d0>)
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	4606      	mov	r6, r0
 800a8a2:	460f      	mov	r7, r1
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	f7f5 fec6 	bl	8000638 <__aeabi_dmul>
 800a8ac:	4b57      	ldr	r3, [pc, #348]	; (800aa0c <__ieee754_pow+0x3f4>)
 800a8ae:	4682      	mov	sl, r0
 800a8b0:	468b      	mov	fp, r1
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	4629      	mov	r1, r5
 800a8b8:	f7f5 febe 	bl	8000638 <__aeabi_dmul>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	460b      	mov	r3, r1
 800a8c0:	a14b      	add	r1, pc, #300	; (adr r1, 800a9f0 <__ieee754_pow+0x3d8>)
 800a8c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8c6:	f7f5 fcff 	bl	80002c8 <__aeabi_dsub>
 800a8ca:	4622      	mov	r2, r4
 800a8cc:	462b      	mov	r3, r5
 800a8ce:	f7f5 feb3 	bl	8000638 <__aeabi_dmul>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	494d      	ldr	r1, [pc, #308]	; (800aa10 <__ieee754_pow+0x3f8>)
 800a8da:	f7f5 fcf5 	bl	80002c8 <__aeabi_dsub>
 800a8de:	4622      	mov	r2, r4
 800a8e0:	4680      	mov	r8, r0
 800a8e2:	4689      	mov	r9, r1
 800a8e4:	462b      	mov	r3, r5
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	f7f5 fea5 	bl	8000638 <__aeabi_dmul>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	4640      	mov	r0, r8
 800a8f4:	4649      	mov	r1, r9
 800a8f6:	f7f5 fe9f 	bl	8000638 <__aeabi_dmul>
 800a8fa:	a33f      	add	r3, pc, #252	; (adr r3, 800a9f8 <__ieee754_pow+0x3e0>)
 800a8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a900:	f7f5 fe9a 	bl	8000638 <__aeabi_dmul>
 800a904:	4602      	mov	r2, r0
 800a906:	460b      	mov	r3, r1
 800a908:	4650      	mov	r0, sl
 800a90a:	4659      	mov	r1, fp
 800a90c:	f7f5 fcdc 	bl	80002c8 <__aeabi_dsub>
 800a910:	4602      	mov	r2, r0
 800a912:	460b      	mov	r3, r1
 800a914:	4680      	mov	r8, r0
 800a916:	4689      	mov	r9, r1
 800a918:	4630      	mov	r0, r6
 800a91a:	4639      	mov	r1, r7
 800a91c:	f7f5 fcd6 	bl	80002cc <__adddf3>
 800a920:	2000      	movs	r0, #0
 800a922:	4632      	mov	r2, r6
 800a924:	463b      	mov	r3, r7
 800a926:	4604      	mov	r4, r0
 800a928:	460d      	mov	r5, r1
 800a92a:	f7f5 fccd 	bl	80002c8 <__aeabi_dsub>
 800a92e:	4602      	mov	r2, r0
 800a930:	460b      	mov	r3, r1
 800a932:	4640      	mov	r0, r8
 800a934:	4649      	mov	r1, r9
 800a936:	f7f5 fcc7 	bl	80002c8 <__aeabi_dsub>
 800a93a:	9b04      	ldr	r3, [sp, #16]
 800a93c:	9a06      	ldr	r2, [sp, #24]
 800a93e:	3b01      	subs	r3, #1
 800a940:	4313      	orrs	r3, r2
 800a942:	4682      	mov	sl, r0
 800a944:	468b      	mov	fp, r1
 800a946:	f040 81e7 	bne.w	800ad18 <__ieee754_pow+0x700>
 800a94a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800aa00 <__ieee754_pow+0x3e8>
 800a94e:	eeb0 8a47 	vmov.f32	s16, s14
 800a952:	eef0 8a67 	vmov.f32	s17, s15
 800a956:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a95a:	2600      	movs	r6, #0
 800a95c:	4632      	mov	r2, r6
 800a95e:	463b      	mov	r3, r7
 800a960:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a964:	f7f5 fcb0 	bl	80002c8 <__aeabi_dsub>
 800a968:	4622      	mov	r2, r4
 800a96a:	462b      	mov	r3, r5
 800a96c:	f7f5 fe64 	bl	8000638 <__aeabi_dmul>
 800a970:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a974:	4680      	mov	r8, r0
 800a976:	4689      	mov	r9, r1
 800a978:	4650      	mov	r0, sl
 800a97a:	4659      	mov	r1, fp
 800a97c:	f7f5 fe5c 	bl	8000638 <__aeabi_dmul>
 800a980:	4602      	mov	r2, r0
 800a982:	460b      	mov	r3, r1
 800a984:	4640      	mov	r0, r8
 800a986:	4649      	mov	r1, r9
 800a988:	f7f5 fca0 	bl	80002cc <__adddf3>
 800a98c:	4632      	mov	r2, r6
 800a98e:	463b      	mov	r3, r7
 800a990:	4680      	mov	r8, r0
 800a992:	4689      	mov	r9, r1
 800a994:	4620      	mov	r0, r4
 800a996:	4629      	mov	r1, r5
 800a998:	f7f5 fe4e 	bl	8000638 <__aeabi_dmul>
 800a99c:	460b      	mov	r3, r1
 800a99e:	4604      	mov	r4, r0
 800a9a0:	460d      	mov	r5, r1
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	4649      	mov	r1, r9
 800a9a6:	4640      	mov	r0, r8
 800a9a8:	f7f5 fc90 	bl	80002cc <__adddf3>
 800a9ac:	4b19      	ldr	r3, [pc, #100]	; (800aa14 <__ieee754_pow+0x3fc>)
 800a9ae:	4299      	cmp	r1, r3
 800a9b0:	ec45 4b19 	vmov	d9, r4, r5
 800a9b4:	4606      	mov	r6, r0
 800a9b6:	460f      	mov	r7, r1
 800a9b8:	468b      	mov	fp, r1
 800a9ba:	f340 82f1 	ble.w	800afa0 <__ieee754_pow+0x988>
 800a9be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a9c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a9c6:	4303      	orrs	r3, r0
 800a9c8:	f000 81e4 	beq.w	800ad94 <__ieee754_pow+0x77c>
 800a9cc:	ec51 0b18 	vmov	r0, r1, d8
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	f7f6 f8a2 	bl	8000b1c <__aeabi_dcmplt>
 800a9d8:	3800      	subs	r0, #0
 800a9da:	bf18      	it	ne
 800a9dc:	2001      	movne	r0, #1
 800a9de:	e72b      	b.n	800a838 <__ieee754_pow+0x220>
 800a9e0:	60000000 	.word	0x60000000
 800a9e4:	3ff71547 	.word	0x3ff71547
 800a9e8:	f85ddf44 	.word	0xf85ddf44
 800a9ec:	3e54ae0b 	.word	0x3e54ae0b
 800a9f0:	55555555 	.word	0x55555555
 800a9f4:	3fd55555 	.word	0x3fd55555
 800a9f8:	652b82fe 	.word	0x652b82fe
 800a9fc:	3ff71547 	.word	0x3ff71547
 800aa00:	00000000 	.word	0x00000000
 800aa04:	bff00000 	.word	0xbff00000
 800aa08:	3ff00000 	.word	0x3ff00000
 800aa0c:	3fd00000 	.word	0x3fd00000
 800aa10:	3fe00000 	.word	0x3fe00000
 800aa14:	408fffff 	.word	0x408fffff
 800aa18:	4bd5      	ldr	r3, [pc, #852]	; (800ad70 <__ieee754_pow+0x758>)
 800aa1a:	402b      	ands	r3, r5
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	b92b      	cbnz	r3, 800aa2c <__ieee754_pow+0x414>
 800aa20:	4bd4      	ldr	r3, [pc, #848]	; (800ad74 <__ieee754_pow+0x75c>)
 800aa22:	f7f5 fe09 	bl	8000638 <__aeabi_dmul>
 800aa26:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800aa2a:	460c      	mov	r4, r1
 800aa2c:	1523      	asrs	r3, r4, #20
 800aa2e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aa32:	4413      	add	r3, r2
 800aa34:	9305      	str	r3, [sp, #20]
 800aa36:	4bd0      	ldr	r3, [pc, #832]	; (800ad78 <__ieee754_pow+0x760>)
 800aa38:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aa3c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800aa40:	429c      	cmp	r4, r3
 800aa42:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aa46:	dd08      	ble.n	800aa5a <__ieee754_pow+0x442>
 800aa48:	4bcc      	ldr	r3, [pc, #816]	; (800ad7c <__ieee754_pow+0x764>)
 800aa4a:	429c      	cmp	r4, r3
 800aa4c:	f340 8162 	ble.w	800ad14 <__ieee754_pow+0x6fc>
 800aa50:	9b05      	ldr	r3, [sp, #20]
 800aa52:	3301      	adds	r3, #1
 800aa54:	9305      	str	r3, [sp, #20]
 800aa56:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800aa5a:	2400      	movs	r4, #0
 800aa5c:	00e3      	lsls	r3, r4, #3
 800aa5e:	9307      	str	r3, [sp, #28]
 800aa60:	4bc7      	ldr	r3, [pc, #796]	; (800ad80 <__ieee754_pow+0x768>)
 800aa62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa66:	ed93 7b00 	vldr	d7, [r3]
 800aa6a:	4629      	mov	r1, r5
 800aa6c:	ec53 2b17 	vmov	r2, r3, d7
 800aa70:	eeb0 9a47 	vmov.f32	s18, s14
 800aa74:	eef0 9a67 	vmov.f32	s19, s15
 800aa78:	4682      	mov	sl, r0
 800aa7a:	f7f5 fc25 	bl	80002c8 <__aeabi_dsub>
 800aa7e:	4652      	mov	r2, sl
 800aa80:	4606      	mov	r6, r0
 800aa82:	460f      	mov	r7, r1
 800aa84:	462b      	mov	r3, r5
 800aa86:	ec51 0b19 	vmov	r0, r1, d9
 800aa8a:	f7f5 fc1f 	bl	80002cc <__adddf3>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	460b      	mov	r3, r1
 800aa92:	2000      	movs	r0, #0
 800aa94:	49bb      	ldr	r1, [pc, #748]	; (800ad84 <__ieee754_pow+0x76c>)
 800aa96:	f7f5 fef9 	bl	800088c <__aeabi_ddiv>
 800aa9a:	ec41 0b1a 	vmov	d10, r0, r1
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	4639      	mov	r1, r7
 800aaa6:	f7f5 fdc7 	bl	8000638 <__aeabi_dmul>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aab0:	9302      	str	r3, [sp, #8]
 800aab2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aab6:	46ab      	mov	fp, r5
 800aab8:	106d      	asrs	r5, r5, #1
 800aaba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800aabe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800aac2:	ec41 0b18 	vmov	d8, r0, r1
 800aac6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800aaca:	2200      	movs	r2, #0
 800aacc:	4640      	mov	r0, r8
 800aace:	4649      	mov	r1, r9
 800aad0:	4614      	mov	r4, r2
 800aad2:	461d      	mov	r5, r3
 800aad4:	f7f5 fdb0 	bl	8000638 <__aeabi_dmul>
 800aad8:	4602      	mov	r2, r0
 800aada:	460b      	mov	r3, r1
 800aadc:	4630      	mov	r0, r6
 800aade:	4639      	mov	r1, r7
 800aae0:	f7f5 fbf2 	bl	80002c8 <__aeabi_dsub>
 800aae4:	ec53 2b19 	vmov	r2, r3, d9
 800aae8:	4606      	mov	r6, r0
 800aaea:	460f      	mov	r7, r1
 800aaec:	4620      	mov	r0, r4
 800aaee:	4629      	mov	r1, r5
 800aaf0:	f7f5 fbea 	bl	80002c8 <__aeabi_dsub>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4650      	mov	r0, sl
 800aafa:	4659      	mov	r1, fp
 800aafc:	f7f5 fbe4 	bl	80002c8 <__aeabi_dsub>
 800ab00:	4642      	mov	r2, r8
 800ab02:	464b      	mov	r3, r9
 800ab04:	f7f5 fd98 	bl	8000638 <__aeabi_dmul>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	4639      	mov	r1, r7
 800ab10:	f7f5 fbda 	bl	80002c8 <__aeabi_dsub>
 800ab14:	ec53 2b1a 	vmov	r2, r3, d10
 800ab18:	f7f5 fd8e 	bl	8000638 <__aeabi_dmul>
 800ab1c:	ec53 2b18 	vmov	r2, r3, d8
 800ab20:	ec41 0b19 	vmov	d9, r0, r1
 800ab24:	ec51 0b18 	vmov	r0, r1, d8
 800ab28:	f7f5 fd86 	bl	8000638 <__aeabi_dmul>
 800ab2c:	a37c      	add	r3, pc, #496	; (adr r3, 800ad20 <__ieee754_pow+0x708>)
 800ab2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab32:	4604      	mov	r4, r0
 800ab34:	460d      	mov	r5, r1
 800ab36:	f7f5 fd7f 	bl	8000638 <__aeabi_dmul>
 800ab3a:	a37b      	add	r3, pc, #492	; (adr r3, 800ad28 <__ieee754_pow+0x710>)
 800ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab40:	f7f5 fbc4 	bl	80002cc <__adddf3>
 800ab44:	4622      	mov	r2, r4
 800ab46:	462b      	mov	r3, r5
 800ab48:	f7f5 fd76 	bl	8000638 <__aeabi_dmul>
 800ab4c:	a378      	add	r3, pc, #480	; (adr r3, 800ad30 <__ieee754_pow+0x718>)
 800ab4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab52:	f7f5 fbbb 	bl	80002cc <__adddf3>
 800ab56:	4622      	mov	r2, r4
 800ab58:	462b      	mov	r3, r5
 800ab5a:	f7f5 fd6d 	bl	8000638 <__aeabi_dmul>
 800ab5e:	a376      	add	r3, pc, #472	; (adr r3, 800ad38 <__ieee754_pow+0x720>)
 800ab60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab64:	f7f5 fbb2 	bl	80002cc <__adddf3>
 800ab68:	4622      	mov	r2, r4
 800ab6a:	462b      	mov	r3, r5
 800ab6c:	f7f5 fd64 	bl	8000638 <__aeabi_dmul>
 800ab70:	a373      	add	r3, pc, #460	; (adr r3, 800ad40 <__ieee754_pow+0x728>)
 800ab72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab76:	f7f5 fba9 	bl	80002cc <__adddf3>
 800ab7a:	4622      	mov	r2, r4
 800ab7c:	462b      	mov	r3, r5
 800ab7e:	f7f5 fd5b 	bl	8000638 <__aeabi_dmul>
 800ab82:	a371      	add	r3, pc, #452	; (adr r3, 800ad48 <__ieee754_pow+0x730>)
 800ab84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab88:	f7f5 fba0 	bl	80002cc <__adddf3>
 800ab8c:	4622      	mov	r2, r4
 800ab8e:	4606      	mov	r6, r0
 800ab90:	460f      	mov	r7, r1
 800ab92:	462b      	mov	r3, r5
 800ab94:	4620      	mov	r0, r4
 800ab96:	4629      	mov	r1, r5
 800ab98:	f7f5 fd4e 	bl	8000638 <__aeabi_dmul>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	4630      	mov	r0, r6
 800aba2:	4639      	mov	r1, r7
 800aba4:	f7f5 fd48 	bl	8000638 <__aeabi_dmul>
 800aba8:	4642      	mov	r2, r8
 800abaa:	4604      	mov	r4, r0
 800abac:	460d      	mov	r5, r1
 800abae:	464b      	mov	r3, r9
 800abb0:	ec51 0b18 	vmov	r0, r1, d8
 800abb4:	f7f5 fb8a 	bl	80002cc <__adddf3>
 800abb8:	ec53 2b19 	vmov	r2, r3, d9
 800abbc:	f7f5 fd3c 	bl	8000638 <__aeabi_dmul>
 800abc0:	4622      	mov	r2, r4
 800abc2:	462b      	mov	r3, r5
 800abc4:	f7f5 fb82 	bl	80002cc <__adddf3>
 800abc8:	4642      	mov	r2, r8
 800abca:	4682      	mov	sl, r0
 800abcc:	468b      	mov	fp, r1
 800abce:	464b      	mov	r3, r9
 800abd0:	4640      	mov	r0, r8
 800abd2:	4649      	mov	r1, r9
 800abd4:	f7f5 fd30 	bl	8000638 <__aeabi_dmul>
 800abd8:	4b6b      	ldr	r3, [pc, #428]	; (800ad88 <__ieee754_pow+0x770>)
 800abda:	2200      	movs	r2, #0
 800abdc:	4606      	mov	r6, r0
 800abde:	460f      	mov	r7, r1
 800abe0:	f7f5 fb74 	bl	80002cc <__adddf3>
 800abe4:	4652      	mov	r2, sl
 800abe6:	465b      	mov	r3, fp
 800abe8:	f7f5 fb70 	bl	80002cc <__adddf3>
 800abec:	2000      	movs	r0, #0
 800abee:	4604      	mov	r4, r0
 800abf0:	460d      	mov	r5, r1
 800abf2:	4602      	mov	r2, r0
 800abf4:	460b      	mov	r3, r1
 800abf6:	4640      	mov	r0, r8
 800abf8:	4649      	mov	r1, r9
 800abfa:	f7f5 fd1d 	bl	8000638 <__aeabi_dmul>
 800abfe:	4b62      	ldr	r3, [pc, #392]	; (800ad88 <__ieee754_pow+0x770>)
 800ac00:	4680      	mov	r8, r0
 800ac02:	4689      	mov	r9, r1
 800ac04:	2200      	movs	r2, #0
 800ac06:	4620      	mov	r0, r4
 800ac08:	4629      	mov	r1, r5
 800ac0a:	f7f5 fb5d 	bl	80002c8 <__aeabi_dsub>
 800ac0e:	4632      	mov	r2, r6
 800ac10:	463b      	mov	r3, r7
 800ac12:	f7f5 fb59 	bl	80002c8 <__aeabi_dsub>
 800ac16:	4602      	mov	r2, r0
 800ac18:	460b      	mov	r3, r1
 800ac1a:	4650      	mov	r0, sl
 800ac1c:	4659      	mov	r1, fp
 800ac1e:	f7f5 fb53 	bl	80002c8 <__aeabi_dsub>
 800ac22:	ec53 2b18 	vmov	r2, r3, d8
 800ac26:	f7f5 fd07 	bl	8000638 <__aeabi_dmul>
 800ac2a:	4622      	mov	r2, r4
 800ac2c:	4606      	mov	r6, r0
 800ac2e:	460f      	mov	r7, r1
 800ac30:	462b      	mov	r3, r5
 800ac32:	ec51 0b19 	vmov	r0, r1, d9
 800ac36:	f7f5 fcff 	bl	8000638 <__aeabi_dmul>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	4630      	mov	r0, r6
 800ac40:	4639      	mov	r1, r7
 800ac42:	f7f5 fb43 	bl	80002cc <__adddf3>
 800ac46:	4606      	mov	r6, r0
 800ac48:	460f      	mov	r7, r1
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4640      	mov	r0, r8
 800ac50:	4649      	mov	r1, r9
 800ac52:	f7f5 fb3b 	bl	80002cc <__adddf3>
 800ac56:	a33e      	add	r3, pc, #248	; (adr r3, 800ad50 <__ieee754_pow+0x738>)
 800ac58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	4604      	mov	r4, r0
 800ac60:	460d      	mov	r5, r1
 800ac62:	f7f5 fce9 	bl	8000638 <__aeabi_dmul>
 800ac66:	4642      	mov	r2, r8
 800ac68:	ec41 0b18 	vmov	d8, r0, r1
 800ac6c:	464b      	mov	r3, r9
 800ac6e:	4620      	mov	r0, r4
 800ac70:	4629      	mov	r1, r5
 800ac72:	f7f5 fb29 	bl	80002c8 <__aeabi_dsub>
 800ac76:	4602      	mov	r2, r0
 800ac78:	460b      	mov	r3, r1
 800ac7a:	4630      	mov	r0, r6
 800ac7c:	4639      	mov	r1, r7
 800ac7e:	f7f5 fb23 	bl	80002c8 <__aeabi_dsub>
 800ac82:	a335      	add	r3, pc, #212	; (adr r3, 800ad58 <__ieee754_pow+0x740>)
 800ac84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac88:	f7f5 fcd6 	bl	8000638 <__aeabi_dmul>
 800ac8c:	a334      	add	r3, pc, #208	; (adr r3, 800ad60 <__ieee754_pow+0x748>)
 800ac8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac92:	4606      	mov	r6, r0
 800ac94:	460f      	mov	r7, r1
 800ac96:	4620      	mov	r0, r4
 800ac98:	4629      	mov	r1, r5
 800ac9a:	f7f5 fccd 	bl	8000638 <__aeabi_dmul>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	460b      	mov	r3, r1
 800aca2:	4630      	mov	r0, r6
 800aca4:	4639      	mov	r1, r7
 800aca6:	f7f5 fb11 	bl	80002cc <__adddf3>
 800acaa:	9a07      	ldr	r2, [sp, #28]
 800acac:	4b37      	ldr	r3, [pc, #220]	; (800ad8c <__ieee754_pow+0x774>)
 800acae:	4413      	add	r3, r2
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	f7f5 fb0a 	bl	80002cc <__adddf3>
 800acb8:	4682      	mov	sl, r0
 800acba:	9805      	ldr	r0, [sp, #20]
 800acbc:	468b      	mov	fp, r1
 800acbe:	f7f5 fc51 	bl	8000564 <__aeabi_i2d>
 800acc2:	9a07      	ldr	r2, [sp, #28]
 800acc4:	4b32      	ldr	r3, [pc, #200]	; (800ad90 <__ieee754_pow+0x778>)
 800acc6:	4413      	add	r3, r2
 800acc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800accc:	4606      	mov	r6, r0
 800acce:	460f      	mov	r7, r1
 800acd0:	4652      	mov	r2, sl
 800acd2:	465b      	mov	r3, fp
 800acd4:	ec51 0b18 	vmov	r0, r1, d8
 800acd8:	f7f5 faf8 	bl	80002cc <__adddf3>
 800acdc:	4642      	mov	r2, r8
 800acde:	464b      	mov	r3, r9
 800ace0:	f7f5 faf4 	bl	80002cc <__adddf3>
 800ace4:	4632      	mov	r2, r6
 800ace6:	463b      	mov	r3, r7
 800ace8:	f7f5 faf0 	bl	80002cc <__adddf3>
 800acec:	2000      	movs	r0, #0
 800acee:	4632      	mov	r2, r6
 800acf0:	463b      	mov	r3, r7
 800acf2:	4604      	mov	r4, r0
 800acf4:	460d      	mov	r5, r1
 800acf6:	f7f5 fae7 	bl	80002c8 <__aeabi_dsub>
 800acfa:	4642      	mov	r2, r8
 800acfc:	464b      	mov	r3, r9
 800acfe:	f7f5 fae3 	bl	80002c8 <__aeabi_dsub>
 800ad02:	ec53 2b18 	vmov	r2, r3, d8
 800ad06:	f7f5 fadf 	bl	80002c8 <__aeabi_dsub>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	4650      	mov	r0, sl
 800ad10:	4659      	mov	r1, fp
 800ad12:	e610      	b.n	800a936 <__ieee754_pow+0x31e>
 800ad14:	2401      	movs	r4, #1
 800ad16:	e6a1      	b.n	800aa5c <__ieee754_pow+0x444>
 800ad18:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ad68 <__ieee754_pow+0x750>
 800ad1c:	e617      	b.n	800a94e <__ieee754_pow+0x336>
 800ad1e:	bf00      	nop
 800ad20:	4a454eef 	.word	0x4a454eef
 800ad24:	3fca7e28 	.word	0x3fca7e28
 800ad28:	93c9db65 	.word	0x93c9db65
 800ad2c:	3fcd864a 	.word	0x3fcd864a
 800ad30:	a91d4101 	.word	0xa91d4101
 800ad34:	3fd17460 	.word	0x3fd17460
 800ad38:	518f264d 	.word	0x518f264d
 800ad3c:	3fd55555 	.word	0x3fd55555
 800ad40:	db6fabff 	.word	0xdb6fabff
 800ad44:	3fdb6db6 	.word	0x3fdb6db6
 800ad48:	33333303 	.word	0x33333303
 800ad4c:	3fe33333 	.word	0x3fe33333
 800ad50:	e0000000 	.word	0xe0000000
 800ad54:	3feec709 	.word	0x3feec709
 800ad58:	dc3a03fd 	.word	0xdc3a03fd
 800ad5c:	3feec709 	.word	0x3feec709
 800ad60:	145b01f5 	.word	0x145b01f5
 800ad64:	be3e2fe0 	.word	0xbe3e2fe0
 800ad68:	00000000 	.word	0x00000000
 800ad6c:	3ff00000 	.word	0x3ff00000
 800ad70:	7ff00000 	.word	0x7ff00000
 800ad74:	43400000 	.word	0x43400000
 800ad78:	0003988e 	.word	0x0003988e
 800ad7c:	000bb679 	.word	0x000bb679
 800ad80:	0800b7b0 	.word	0x0800b7b0
 800ad84:	3ff00000 	.word	0x3ff00000
 800ad88:	40080000 	.word	0x40080000
 800ad8c:	0800b7d0 	.word	0x0800b7d0
 800ad90:	0800b7c0 	.word	0x0800b7c0
 800ad94:	a3b5      	add	r3, pc, #724	; (adr r3, 800b06c <__ieee754_pow+0xa54>)
 800ad96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9a:	4640      	mov	r0, r8
 800ad9c:	4649      	mov	r1, r9
 800ad9e:	f7f5 fa95 	bl	80002cc <__adddf3>
 800ada2:	4622      	mov	r2, r4
 800ada4:	ec41 0b1a 	vmov	d10, r0, r1
 800ada8:	462b      	mov	r3, r5
 800adaa:	4630      	mov	r0, r6
 800adac:	4639      	mov	r1, r7
 800adae:	f7f5 fa8b 	bl	80002c8 <__aeabi_dsub>
 800adb2:	4602      	mov	r2, r0
 800adb4:	460b      	mov	r3, r1
 800adb6:	ec51 0b1a 	vmov	r0, r1, d10
 800adba:	f7f5 fecd 	bl	8000b58 <__aeabi_dcmpgt>
 800adbe:	2800      	cmp	r0, #0
 800adc0:	f47f ae04 	bne.w	800a9cc <__ieee754_pow+0x3b4>
 800adc4:	4aa4      	ldr	r2, [pc, #656]	; (800b058 <__ieee754_pow+0xa40>)
 800adc6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800adca:	4293      	cmp	r3, r2
 800adcc:	f340 8108 	ble.w	800afe0 <__ieee754_pow+0x9c8>
 800add0:	151b      	asrs	r3, r3, #20
 800add2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800add6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800adda:	fa4a f303 	asr.w	r3, sl, r3
 800adde:	445b      	add	r3, fp
 800ade0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ade4:	4e9d      	ldr	r6, [pc, #628]	; (800b05c <__ieee754_pow+0xa44>)
 800ade6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800adea:	4116      	asrs	r6, r2
 800adec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800adf0:	2000      	movs	r0, #0
 800adf2:	ea23 0106 	bic.w	r1, r3, r6
 800adf6:	f1c2 0214 	rsb	r2, r2, #20
 800adfa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800adfe:	fa4a fa02 	asr.w	sl, sl, r2
 800ae02:	f1bb 0f00 	cmp.w	fp, #0
 800ae06:	4602      	mov	r2, r0
 800ae08:	460b      	mov	r3, r1
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	bfb8      	it	lt
 800ae10:	f1ca 0a00 	rsblt	sl, sl, #0
 800ae14:	f7f5 fa58 	bl	80002c8 <__aeabi_dsub>
 800ae18:	ec41 0b19 	vmov	d9, r0, r1
 800ae1c:	4642      	mov	r2, r8
 800ae1e:	464b      	mov	r3, r9
 800ae20:	ec51 0b19 	vmov	r0, r1, d9
 800ae24:	f7f5 fa52 	bl	80002cc <__adddf3>
 800ae28:	a37b      	add	r3, pc, #492	; (adr r3, 800b018 <__ieee754_pow+0xa00>)
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	2000      	movs	r0, #0
 800ae30:	4604      	mov	r4, r0
 800ae32:	460d      	mov	r5, r1
 800ae34:	f7f5 fc00 	bl	8000638 <__aeabi_dmul>
 800ae38:	ec53 2b19 	vmov	r2, r3, d9
 800ae3c:	4606      	mov	r6, r0
 800ae3e:	460f      	mov	r7, r1
 800ae40:	4620      	mov	r0, r4
 800ae42:	4629      	mov	r1, r5
 800ae44:	f7f5 fa40 	bl	80002c8 <__aeabi_dsub>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	4640      	mov	r0, r8
 800ae4e:	4649      	mov	r1, r9
 800ae50:	f7f5 fa3a 	bl	80002c8 <__aeabi_dsub>
 800ae54:	a372      	add	r3, pc, #456	; (adr r3, 800b020 <__ieee754_pow+0xa08>)
 800ae56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5a:	f7f5 fbed 	bl	8000638 <__aeabi_dmul>
 800ae5e:	a372      	add	r3, pc, #456	; (adr r3, 800b028 <__ieee754_pow+0xa10>)
 800ae60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae64:	4680      	mov	r8, r0
 800ae66:	4689      	mov	r9, r1
 800ae68:	4620      	mov	r0, r4
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	f7f5 fbe4 	bl	8000638 <__aeabi_dmul>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	4640      	mov	r0, r8
 800ae76:	4649      	mov	r1, r9
 800ae78:	f7f5 fa28 	bl	80002cc <__adddf3>
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	460d      	mov	r5, r1
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	4630      	mov	r0, r6
 800ae86:	4639      	mov	r1, r7
 800ae88:	f7f5 fa20 	bl	80002cc <__adddf3>
 800ae8c:	4632      	mov	r2, r6
 800ae8e:	463b      	mov	r3, r7
 800ae90:	4680      	mov	r8, r0
 800ae92:	4689      	mov	r9, r1
 800ae94:	f7f5 fa18 	bl	80002c8 <__aeabi_dsub>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	460b      	mov	r3, r1
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	4629      	mov	r1, r5
 800aea0:	f7f5 fa12 	bl	80002c8 <__aeabi_dsub>
 800aea4:	4642      	mov	r2, r8
 800aea6:	4606      	mov	r6, r0
 800aea8:	460f      	mov	r7, r1
 800aeaa:	464b      	mov	r3, r9
 800aeac:	4640      	mov	r0, r8
 800aeae:	4649      	mov	r1, r9
 800aeb0:	f7f5 fbc2 	bl	8000638 <__aeabi_dmul>
 800aeb4:	a35e      	add	r3, pc, #376	; (adr r3, 800b030 <__ieee754_pow+0xa18>)
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	4604      	mov	r4, r0
 800aebc:	460d      	mov	r5, r1
 800aebe:	f7f5 fbbb 	bl	8000638 <__aeabi_dmul>
 800aec2:	a35d      	add	r3, pc, #372	; (adr r3, 800b038 <__ieee754_pow+0xa20>)
 800aec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec8:	f7f5 f9fe 	bl	80002c8 <__aeabi_dsub>
 800aecc:	4622      	mov	r2, r4
 800aece:	462b      	mov	r3, r5
 800aed0:	f7f5 fbb2 	bl	8000638 <__aeabi_dmul>
 800aed4:	a35a      	add	r3, pc, #360	; (adr r3, 800b040 <__ieee754_pow+0xa28>)
 800aed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeda:	f7f5 f9f7 	bl	80002cc <__adddf3>
 800aede:	4622      	mov	r2, r4
 800aee0:	462b      	mov	r3, r5
 800aee2:	f7f5 fba9 	bl	8000638 <__aeabi_dmul>
 800aee6:	a358      	add	r3, pc, #352	; (adr r3, 800b048 <__ieee754_pow+0xa30>)
 800aee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeec:	f7f5 f9ec 	bl	80002c8 <__aeabi_dsub>
 800aef0:	4622      	mov	r2, r4
 800aef2:	462b      	mov	r3, r5
 800aef4:	f7f5 fba0 	bl	8000638 <__aeabi_dmul>
 800aef8:	a355      	add	r3, pc, #340	; (adr r3, 800b050 <__ieee754_pow+0xa38>)
 800aefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefe:	f7f5 f9e5 	bl	80002cc <__adddf3>
 800af02:	4622      	mov	r2, r4
 800af04:	462b      	mov	r3, r5
 800af06:	f7f5 fb97 	bl	8000638 <__aeabi_dmul>
 800af0a:	4602      	mov	r2, r0
 800af0c:	460b      	mov	r3, r1
 800af0e:	4640      	mov	r0, r8
 800af10:	4649      	mov	r1, r9
 800af12:	f7f5 f9d9 	bl	80002c8 <__aeabi_dsub>
 800af16:	4604      	mov	r4, r0
 800af18:	460d      	mov	r5, r1
 800af1a:	4602      	mov	r2, r0
 800af1c:	460b      	mov	r3, r1
 800af1e:	4640      	mov	r0, r8
 800af20:	4649      	mov	r1, r9
 800af22:	f7f5 fb89 	bl	8000638 <__aeabi_dmul>
 800af26:	2200      	movs	r2, #0
 800af28:	ec41 0b19 	vmov	d9, r0, r1
 800af2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af30:	4620      	mov	r0, r4
 800af32:	4629      	mov	r1, r5
 800af34:	f7f5 f9c8 	bl	80002c8 <__aeabi_dsub>
 800af38:	4602      	mov	r2, r0
 800af3a:	460b      	mov	r3, r1
 800af3c:	ec51 0b19 	vmov	r0, r1, d9
 800af40:	f7f5 fca4 	bl	800088c <__aeabi_ddiv>
 800af44:	4632      	mov	r2, r6
 800af46:	4604      	mov	r4, r0
 800af48:	460d      	mov	r5, r1
 800af4a:	463b      	mov	r3, r7
 800af4c:	4640      	mov	r0, r8
 800af4e:	4649      	mov	r1, r9
 800af50:	f7f5 fb72 	bl	8000638 <__aeabi_dmul>
 800af54:	4632      	mov	r2, r6
 800af56:	463b      	mov	r3, r7
 800af58:	f7f5 f9b8 	bl	80002cc <__adddf3>
 800af5c:	4602      	mov	r2, r0
 800af5e:	460b      	mov	r3, r1
 800af60:	4620      	mov	r0, r4
 800af62:	4629      	mov	r1, r5
 800af64:	f7f5 f9b0 	bl	80002c8 <__aeabi_dsub>
 800af68:	4642      	mov	r2, r8
 800af6a:	464b      	mov	r3, r9
 800af6c:	f7f5 f9ac 	bl	80002c8 <__aeabi_dsub>
 800af70:	460b      	mov	r3, r1
 800af72:	4602      	mov	r2, r0
 800af74:	493a      	ldr	r1, [pc, #232]	; (800b060 <__ieee754_pow+0xa48>)
 800af76:	2000      	movs	r0, #0
 800af78:	f7f5 f9a6 	bl	80002c8 <__aeabi_dsub>
 800af7c:	ec41 0b10 	vmov	d0, r0, r1
 800af80:	ee10 3a90 	vmov	r3, s1
 800af84:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800af88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af8c:	da2b      	bge.n	800afe6 <__ieee754_pow+0x9ce>
 800af8e:	4650      	mov	r0, sl
 800af90:	f000 f966 	bl	800b260 <scalbn>
 800af94:	ec51 0b10 	vmov	r0, r1, d0
 800af98:	ec53 2b18 	vmov	r2, r3, d8
 800af9c:	f7ff bbed 	b.w	800a77a <__ieee754_pow+0x162>
 800afa0:	4b30      	ldr	r3, [pc, #192]	; (800b064 <__ieee754_pow+0xa4c>)
 800afa2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800afa6:	429e      	cmp	r6, r3
 800afa8:	f77f af0c 	ble.w	800adc4 <__ieee754_pow+0x7ac>
 800afac:	4b2e      	ldr	r3, [pc, #184]	; (800b068 <__ieee754_pow+0xa50>)
 800afae:	440b      	add	r3, r1
 800afb0:	4303      	orrs	r3, r0
 800afb2:	d009      	beq.n	800afc8 <__ieee754_pow+0x9b0>
 800afb4:	ec51 0b18 	vmov	r0, r1, d8
 800afb8:	2200      	movs	r2, #0
 800afba:	2300      	movs	r3, #0
 800afbc:	f7f5 fdae 	bl	8000b1c <__aeabi_dcmplt>
 800afc0:	3800      	subs	r0, #0
 800afc2:	bf18      	it	ne
 800afc4:	2001      	movne	r0, #1
 800afc6:	e447      	b.n	800a858 <__ieee754_pow+0x240>
 800afc8:	4622      	mov	r2, r4
 800afca:	462b      	mov	r3, r5
 800afcc:	f7f5 f97c 	bl	80002c8 <__aeabi_dsub>
 800afd0:	4642      	mov	r2, r8
 800afd2:	464b      	mov	r3, r9
 800afd4:	f7f5 fdb6 	bl	8000b44 <__aeabi_dcmpge>
 800afd8:	2800      	cmp	r0, #0
 800afda:	f43f aef3 	beq.w	800adc4 <__ieee754_pow+0x7ac>
 800afde:	e7e9      	b.n	800afb4 <__ieee754_pow+0x99c>
 800afe0:	f04f 0a00 	mov.w	sl, #0
 800afe4:	e71a      	b.n	800ae1c <__ieee754_pow+0x804>
 800afe6:	ec51 0b10 	vmov	r0, r1, d0
 800afea:	4619      	mov	r1, r3
 800afec:	e7d4      	b.n	800af98 <__ieee754_pow+0x980>
 800afee:	491c      	ldr	r1, [pc, #112]	; (800b060 <__ieee754_pow+0xa48>)
 800aff0:	2000      	movs	r0, #0
 800aff2:	f7ff bb30 	b.w	800a656 <__ieee754_pow+0x3e>
 800aff6:	2000      	movs	r0, #0
 800aff8:	2100      	movs	r1, #0
 800affa:	f7ff bb2c 	b.w	800a656 <__ieee754_pow+0x3e>
 800affe:	4630      	mov	r0, r6
 800b000:	4639      	mov	r1, r7
 800b002:	f7ff bb28 	b.w	800a656 <__ieee754_pow+0x3e>
 800b006:	9204      	str	r2, [sp, #16]
 800b008:	f7ff bb7a 	b.w	800a700 <__ieee754_pow+0xe8>
 800b00c:	2300      	movs	r3, #0
 800b00e:	f7ff bb64 	b.w	800a6da <__ieee754_pow+0xc2>
 800b012:	bf00      	nop
 800b014:	f3af 8000 	nop.w
 800b018:	00000000 	.word	0x00000000
 800b01c:	3fe62e43 	.word	0x3fe62e43
 800b020:	fefa39ef 	.word	0xfefa39ef
 800b024:	3fe62e42 	.word	0x3fe62e42
 800b028:	0ca86c39 	.word	0x0ca86c39
 800b02c:	be205c61 	.word	0xbe205c61
 800b030:	72bea4d0 	.word	0x72bea4d0
 800b034:	3e663769 	.word	0x3e663769
 800b038:	c5d26bf1 	.word	0xc5d26bf1
 800b03c:	3ebbbd41 	.word	0x3ebbbd41
 800b040:	af25de2c 	.word	0xaf25de2c
 800b044:	3f11566a 	.word	0x3f11566a
 800b048:	16bebd93 	.word	0x16bebd93
 800b04c:	3f66c16c 	.word	0x3f66c16c
 800b050:	5555553e 	.word	0x5555553e
 800b054:	3fc55555 	.word	0x3fc55555
 800b058:	3fe00000 	.word	0x3fe00000
 800b05c:	000fffff 	.word	0x000fffff
 800b060:	3ff00000 	.word	0x3ff00000
 800b064:	4090cbff 	.word	0x4090cbff
 800b068:	3f6f3400 	.word	0x3f6f3400
 800b06c:	652b82fe 	.word	0x652b82fe
 800b070:	3c971547 	.word	0x3c971547

0800b074 <__ieee754_sqrt>:
 800b074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b078:	ec55 4b10 	vmov	r4, r5, d0
 800b07c:	4e55      	ldr	r6, [pc, #340]	; (800b1d4 <__ieee754_sqrt+0x160>)
 800b07e:	43ae      	bics	r6, r5
 800b080:	ee10 0a10 	vmov	r0, s0
 800b084:	ee10 3a10 	vmov	r3, s0
 800b088:	462a      	mov	r2, r5
 800b08a:	4629      	mov	r1, r5
 800b08c:	d110      	bne.n	800b0b0 <__ieee754_sqrt+0x3c>
 800b08e:	ee10 2a10 	vmov	r2, s0
 800b092:	462b      	mov	r3, r5
 800b094:	f7f5 fad0 	bl	8000638 <__aeabi_dmul>
 800b098:	4602      	mov	r2, r0
 800b09a:	460b      	mov	r3, r1
 800b09c:	4620      	mov	r0, r4
 800b09e:	4629      	mov	r1, r5
 800b0a0:	f7f5 f914 	bl	80002cc <__adddf3>
 800b0a4:	4604      	mov	r4, r0
 800b0a6:	460d      	mov	r5, r1
 800b0a8:	ec45 4b10 	vmov	d0, r4, r5
 800b0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b0:	2d00      	cmp	r5, #0
 800b0b2:	dc10      	bgt.n	800b0d6 <__ieee754_sqrt+0x62>
 800b0b4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b0b8:	4330      	orrs	r0, r6
 800b0ba:	d0f5      	beq.n	800b0a8 <__ieee754_sqrt+0x34>
 800b0bc:	b15d      	cbz	r5, 800b0d6 <__ieee754_sqrt+0x62>
 800b0be:	ee10 2a10 	vmov	r2, s0
 800b0c2:	462b      	mov	r3, r5
 800b0c4:	ee10 0a10 	vmov	r0, s0
 800b0c8:	f7f5 f8fe 	bl	80002c8 <__aeabi_dsub>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	f7f5 fbdc 	bl	800088c <__aeabi_ddiv>
 800b0d4:	e7e6      	b.n	800b0a4 <__ieee754_sqrt+0x30>
 800b0d6:	1512      	asrs	r2, r2, #20
 800b0d8:	d074      	beq.n	800b1c4 <__ieee754_sqrt+0x150>
 800b0da:	07d4      	lsls	r4, r2, #31
 800b0dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b0e0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b0e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b0e8:	bf5e      	ittt	pl
 800b0ea:	0fda      	lsrpl	r2, r3, #31
 800b0ec:	005b      	lslpl	r3, r3, #1
 800b0ee:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b0f2:	2400      	movs	r4, #0
 800b0f4:	0fda      	lsrs	r2, r3, #31
 800b0f6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b0fa:	107f      	asrs	r7, r7, #1
 800b0fc:	005b      	lsls	r3, r3, #1
 800b0fe:	2516      	movs	r5, #22
 800b100:	4620      	mov	r0, r4
 800b102:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b106:	1886      	adds	r6, r0, r2
 800b108:	428e      	cmp	r6, r1
 800b10a:	bfde      	ittt	le
 800b10c:	1b89      	suble	r1, r1, r6
 800b10e:	18b0      	addle	r0, r6, r2
 800b110:	18a4      	addle	r4, r4, r2
 800b112:	0049      	lsls	r1, r1, #1
 800b114:	3d01      	subs	r5, #1
 800b116:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b11a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b11e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b122:	d1f0      	bne.n	800b106 <__ieee754_sqrt+0x92>
 800b124:	462a      	mov	r2, r5
 800b126:	f04f 0e20 	mov.w	lr, #32
 800b12a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b12e:	4281      	cmp	r1, r0
 800b130:	eb06 0c05 	add.w	ip, r6, r5
 800b134:	dc02      	bgt.n	800b13c <__ieee754_sqrt+0xc8>
 800b136:	d113      	bne.n	800b160 <__ieee754_sqrt+0xec>
 800b138:	459c      	cmp	ip, r3
 800b13a:	d811      	bhi.n	800b160 <__ieee754_sqrt+0xec>
 800b13c:	f1bc 0f00 	cmp.w	ip, #0
 800b140:	eb0c 0506 	add.w	r5, ip, r6
 800b144:	da43      	bge.n	800b1ce <__ieee754_sqrt+0x15a>
 800b146:	2d00      	cmp	r5, #0
 800b148:	db41      	blt.n	800b1ce <__ieee754_sqrt+0x15a>
 800b14a:	f100 0801 	add.w	r8, r0, #1
 800b14e:	1a09      	subs	r1, r1, r0
 800b150:	459c      	cmp	ip, r3
 800b152:	bf88      	it	hi
 800b154:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b158:	eba3 030c 	sub.w	r3, r3, ip
 800b15c:	4432      	add	r2, r6
 800b15e:	4640      	mov	r0, r8
 800b160:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b164:	f1be 0e01 	subs.w	lr, lr, #1
 800b168:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b16c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b170:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b174:	d1db      	bne.n	800b12e <__ieee754_sqrt+0xba>
 800b176:	430b      	orrs	r3, r1
 800b178:	d006      	beq.n	800b188 <__ieee754_sqrt+0x114>
 800b17a:	1c50      	adds	r0, r2, #1
 800b17c:	bf13      	iteet	ne
 800b17e:	3201      	addne	r2, #1
 800b180:	3401      	addeq	r4, #1
 800b182:	4672      	moveq	r2, lr
 800b184:	f022 0201 	bicne.w	r2, r2, #1
 800b188:	1063      	asrs	r3, r4, #1
 800b18a:	0852      	lsrs	r2, r2, #1
 800b18c:	07e1      	lsls	r1, r4, #31
 800b18e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b192:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b196:	bf48      	it	mi
 800b198:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b19c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b1a0:	4614      	mov	r4, r2
 800b1a2:	e781      	b.n	800b0a8 <__ieee754_sqrt+0x34>
 800b1a4:	0ad9      	lsrs	r1, r3, #11
 800b1a6:	3815      	subs	r0, #21
 800b1a8:	055b      	lsls	r3, r3, #21
 800b1aa:	2900      	cmp	r1, #0
 800b1ac:	d0fa      	beq.n	800b1a4 <__ieee754_sqrt+0x130>
 800b1ae:	02cd      	lsls	r5, r1, #11
 800b1b0:	d50a      	bpl.n	800b1c8 <__ieee754_sqrt+0x154>
 800b1b2:	f1c2 0420 	rsb	r4, r2, #32
 800b1b6:	fa23 f404 	lsr.w	r4, r3, r4
 800b1ba:	1e55      	subs	r5, r2, #1
 800b1bc:	4093      	lsls	r3, r2
 800b1be:	4321      	orrs	r1, r4
 800b1c0:	1b42      	subs	r2, r0, r5
 800b1c2:	e78a      	b.n	800b0da <__ieee754_sqrt+0x66>
 800b1c4:	4610      	mov	r0, r2
 800b1c6:	e7f0      	b.n	800b1aa <__ieee754_sqrt+0x136>
 800b1c8:	0049      	lsls	r1, r1, #1
 800b1ca:	3201      	adds	r2, #1
 800b1cc:	e7ef      	b.n	800b1ae <__ieee754_sqrt+0x13a>
 800b1ce:	4680      	mov	r8, r0
 800b1d0:	e7bd      	b.n	800b14e <__ieee754_sqrt+0xda>
 800b1d2:	bf00      	nop
 800b1d4:	7ff00000 	.word	0x7ff00000

0800b1d8 <with_errno>:
 800b1d8:	b570      	push	{r4, r5, r6, lr}
 800b1da:	4604      	mov	r4, r0
 800b1dc:	460d      	mov	r5, r1
 800b1de:	4616      	mov	r6, r2
 800b1e0:	f7fc fa7a 	bl	80076d8 <__errno>
 800b1e4:	4629      	mov	r1, r5
 800b1e6:	6006      	str	r6, [r0, #0]
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	bd70      	pop	{r4, r5, r6, pc}

0800b1ec <xflow>:
 800b1ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ee:	4614      	mov	r4, r2
 800b1f0:	461d      	mov	r5, r3
 800b1f2:	b108      	cbz	r0, 800b1f8 <xflow+0xc>
 800b1f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b1f8:	e9cd 2300 	strd	r2, r3, [sp]
 800b1fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b200:	4620      	mov	r0, r4
 800b202:	4629      	mov	r1, r5
 800b204:	f7f5 fa18 	bl	8000638 <__aeabi_dmul>
 800b208:	2222      	movs	r2, #34	; 0x22
 800b20a:	b003      	add	sp, #12
 800b20c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b210:	f7ff bfe2 	b.w	800b1d8 <with_errno>

0800b214 <__math_uflow>:
 800b214:	b508      	push	{r3, lr}
 800b216:	2200      	movs	r2, #0
 800b218:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b21c:	f7ff ffe6 	bl	800b1ec <xflow>
 800b220:	ec41 0b10 	vmov	d0, r0, r1
 800b224:	bd08      	pop	{r3, pc}

0800b226 <__math_oflow>:
 800b226:	b508      	push	{r3, lr}
 800b228:	2200      	movs	r2, #0
 800b22a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b22e:	f7ff ffdd 	bl	800b1ec <xflow>
 800b232:	ec41 0b10 	vmov	d0, r0, r1
 800b236:	bd08      	pop	{r3, pc}

0800b238 <fabs>:
 800b238:	ec51 0b10 	vmov	r0, r1, d0
 800b23c:	ee10 2a10 	vmov	r2, s0
 800b240:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b244:	ec43 2b10 	vmov	d0, r2, r3
 800b248:	4770      	bx	lr

0800b24a <finite>:
 800b24a:	b082      	sub	sp, #8
 800b24c:	ed8d 0b00 	vstr	d0, [sp]
 800b250:	9801      	ldr	r0, [sp, #4]
 800b252:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b256:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b25a:	0fc0      	lsrs	r0, r0, #31
 800b25c:	b002      	add	sp, #8
 800b25e:	4770      	bx	lr

0800b260 <scalbn>:
 800b260:	b570      	push	{r4, r5, r6, lr}
 800b262:	ec55 4b10 	vmov	r4, r5, d0
 800b266:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b26a:	4606      	mov	r6, r0
 800b26c:	462b      	mov	r3, r5
 800b26e:	b99a      	cbnz	r2, 800b298 <scalbn+0x38>
 800b270:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b274:	4323      	orrs	r3, r4
 800b276:	d036      	beq.n	800b2e6 <scalbn+0x86>
 800b278:	4b39      	ldr	r3, [pc, #228]	; (800b360 <scalbn+0x100>)
 800b27a:	4629      	mov	r1, r5
 800b27c:	ee10 0a10 	vmov	r0, s0
 800b280:	2200      	movs	r2, #0
 800b282:	f7f5 f9d9 	bl	8000638 <__aeabi_dmul>
 800b286:	4b37      	ldr	r3, [pc, #220]	; (800b364 <scalbn+0x104>)
 800b288:	429e      	cmp	r6, r3
 800b28a:	4604      	mov	r4, r0
 800b28c:	460d      	mov	r5, r1
 800b28e:	da10      	bge.n	800b2b2 <scalbn+0x52>
 800b290:	a32b      	add	r3, pc, #172	; (adr r3, 800b340 <scalbn+0xe0>)
 800b292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b296:	e03a      	b.n	800b30e <scalbn+0xae>
 800b298:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b29c:	428a      	cmp	r2, r1
 800b29e:	d10c      	bne.n	800b2ba <scalbn+0x5a>
 800b2a0:	ee10 2a10 	vmov	r2, s0
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	4629      	mov	r1, r5
 800b2a8:	f7f5 f810 	bl	80002cc <__adddf3>
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	460d      	mov	r5, r1
 800b2b0:	e019      	b.n	800b2e6 <scalbn+0x86>
 800b2b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	3a36      	subs	r2, #54	; 0x36
 800b2ba:	4432      	add	r2, r6
 800b2bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b2c0:	428a      	cmp	r2, r1
 800b2c2:	dd08      	ble.n	800b2d6 <scalbn+0x76>
 800b2c4:	2d00      	cmp	r5, #0
 800b2c6:	a120      	add	r1, pc, #128	; (adr r1, 800b348 <scalbn+0xe8>)
 800b2c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2cc:	da1c      	bge.n	800b308 <scalbn+0xa8>
 800b2ce:	a120      	add	r1, pc, #128	; (adr r1, 800b350 <scalbn+0xf0>)
 800b2d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2d4:	e018      	b.n	800b308 <scalbn+0xa8>
 800b2d6:	2a00      	cmp	r2, #0
 800b2d8:	dd08      	ble.n	800b2ec <scalbn+0x8c>
 800b2da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b2de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b2e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b2e6:	ec45 4b10 	vmov	d0, r4, r5
 800b2ea:	bd70      	pop	{r4, r5, r6, pc}
 800b2ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b2f0:	da19      	bge.n	800b326 <scalbn+0xc6>
 800b2f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b2f6:	429e      	cmp	r6, r3
 800b2f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b2fc:	dd0a      	ble.n	800b314 <scalbn+0xb4>
 800b2fe:	a112      	add	r1, pc, #72	; (adr r1, 800b348 <scalbn+0xe8>)
 800b300:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1e2      	bne.n	800b2ce <scalbn+0x6e>
 800b308:	a30f      	add	r3, pc, #60	; (adr r3, 800b348 <scalbn+0xe8>)
 800b30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30e:	f7f5 f993 	bl	8000638 <__aeabi_dmul>
 800b312:	e7cb      	b.n	800b2ac <scalbn+0x4c>
 800b314:	a10a      	add	r1, pc, #40	; (adr r1, 800b340 <scalbn+0xe0>)
 800b316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d0b8      	beq.n	800b290 <scalbn+0x30>
 800b31e:	a10e      	add	r1, pc, #56	; (adr r1, 800b358 <scalbn+0xf8>)
 800b320:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b324:	e7b4      	b.n	800b290 <scalbn+0x30>
 800b326:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b32a:	3236      	adds	r2, #54	; 0x36
 800b32c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b330:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b334:	4620      	mov	r0, r4
 800b336:	4b0c      	ldr	r3, [pc, #48]	; (800b368 <scalbn+0x108>)
 800b338:	2200      	movs	r2, #0
 800b33a:	e7e8      	b.n	800b30e <scalbn+0xae>
 800b33c:	f3af 8000 	nop.w
 800b340:	c2f8f359 	.word	0xc2f8f359
 800b344:	01a56e1f 	.word	0x01a56e1f
 800b348:	8800759c 	.word	0x8800759c
 800b34c:	7e37e43c 	.word	0x7e37e43c
 800b350:	8800759c 	.word	0x8800759c
 800b354:	fe37e43c 	.word	0xfe37e43c
 800b358:	c2f8f359 	.word	0xc2f8f359
 800b35c:	81a56e1f 	.word	0x81a56e1f
 800b360:	43500000 	.word	0x43500000
 800b364:	ffff3cb0 	.word	0xffff3cb0
 800b368:	3c900000 	.word	0x3c900000

0800b36c <_init>:
 800b36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36e:	bf00      	nop
 800b370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b372:	bc08      	pop	{r3}
 800b374:	469e      	mov	lr, r3
 800b376:	4770      	bx	lr

0800b378 <_fini>:
 800b378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37a:	bf00      	nop
 800b37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b37e:	bc08      	pop	{r3}
 800b380:	469e      	mov	lr, r3
 800b382:	4770      	bx	lr
